{"version":3,"sources":["../src/command.js"],"names":[],"mappings":"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","file":"command.js","sourcesContent":["// thinkjs command\n\nimport fs from 'fs';\nimport path from 'path';\nimport commander from 'commander';\nimport './core/think.js';\n\nlet {sep} = path;\nlet cwd = process.cwd();\nlet templatePath = path.dirname(__dirname) + sep + 'template';\nlet projectRootPath = cwd; //project root path\nlet modeList = ['normal', 'module'];\n\nthink.mode = think.mode_module;\n\n\n/**\n * get date time\n * @return {} []\n */\nlet getDateTime = () => {\n  let fn = d => {\n    return ('0' + d).slice(-2);\n  };\n  let d = new Date();\n  let date = d.getFullYear() + '-' + fn(d.getMonth() + 1) + '-' + fn(d.getDate());\n  let time = fn(d.getHours()) + ':' + fn(d.getMinutes()) + ':' + fn(d.getSeconds());\n  return date + ' ' + time;\n};\n/**\n * log\n * @param  {Function} fn []\n * @return {}      []\n */\nlet log = fn => {\n  think.log(colors => {\n    return '  ' + fn(colors);\n  }, '', null); \n};\n\n/**\n * mkdir\n * @param  {String} dir []\n * @return {}     []\n */\nlet mkdir = dir => {\n  if(think.isDir(dir)){\n    return;\n  }\n  think.mkdir(dir);\n  log(colors => {\n    return colors.cyan('create') + ' : ' + path.relative(cwd, dir);\n  });\n};\n\n/**\n * get version\n * @return {String} []\n */\nlet getVersion = () => {\n  let filepath = path.resolve(__dirname, '../package.json');\n  let version = JSON.parse(fs.readFileSync(filepath)).version;\n  return version;\n};\n\n/**\n * get app root path\n * @return {} []\n */\nlet getProjectAppPath = () => {\n  let path = projectRootPath + think.sep;\n  path += commander.es || commander.ts ? 'src' : 'app';\n  return path;\n};\n/**\n * get app name\n * @return {} []\n */\nlet getAppName = () => {\n  let filepath = path.normalize(cwd + '/' + projectRootPath).replace(/\\\\/g, '');\n  let matched = filepath.match(/([^\\/]+)\\/?$/);\n  return matched[1];\n};\n\n/**\n * copy file\n * @param  {String} source []\n * @param  {String} target []\n * @return {}        []\n */\nlet copyFile = (source, target, replace, showWarning) => {\n\n  if(showWarning === undefined){\n    showWarning = true;\n  }\n\n  if(think.isBoolean(replace)){\n    showWarning = replace;\n    replace = '';\n  }\n\n  //if target file is exist, ignore it\n  if(think.isFile(target)){\n    if(showWarning){\n      log(colors => {\n        return colors.yellow('exist') + ' : ' + path.normalize(target);\n      });\n    }\n    return;\n  }\n\n  mkdir(path.dirname(target));\n\n  let es = commander.es || commander.es6;\n\n  //TypeScript\n  if(commander.ts){\n    let tsSource = source.replace(/\\.\\w+$/, a => {\n      return a === '.js' ? '.ts' : '_ts' + a;\n    });\n    if(think.isFile(templatePath + '/' + tsSource)){\n      source = tsSource;\n    }\n    if(target.indexOf(think.sep + 'src' + think.sep) > -1){\n      //replace target file extname to .ts\n      target = target.replace(/\\.js$/, '.ts');\n    }\n  }\n  //ECMAScript 2015/2016\n  else if(es){\n    let esSource = source.replace(/\\.\\w+$/, a => {\n      return a === '.js' ? '.es' : '_es' + a;\n    });\n    if(think.isFile(templatePath + think.sep + esSource)){\n      source = esSource;\n    }\n  }\n\n  //if source file is not exist\n  if(!think.isFile(templatePath + think.sep + source)){\n    return;\n  }\n\n  let content = fs.readFileSync(templatePath + think.sep + source, 'utf8');\n  //replace content \n  if(think.isObject(replace)){\n    for(let key in replace){\n      /*eslint-disable no-constant-condition*/\n      while(1){ \n        let content1 = content.replace(key, replace[key]);\n        if(content1 === content){\n          content = content1;\n          break;\n        }\n        content = content1;\n      }\n    }\n  }\n\n  fs.writeFileSync(target, content);\n  log(colors => {\n    return colors.cyan('create') + ' : ' + path.relative(cwd, target);\n  });\n};\n\n/**\n * check is thinkjs app\n * @param  {String}  projectRootPath []\n * @return {Boolean}             []\n */\nlet isThinkApp = projectRootPath => {\n  if(think.isDir(projectRootPath)){\n    let filepath = projectRootPath + '/.thinkjsrc';\n    if(think.isFile(filepath)){\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * is module exist\n * @param  {String}  module []\n * @return {Boolean}        []\n */\nlet isModuleExist = module => {\n  let modelPath = think.getPath(module, 'model');\n  // if(think.mode === think.mode_normal){\n  //   modelPath = think.getPath(module, 'controller');\n  // }\n  return think.isDir(modelPath);\n};\n/**\n * parse app config\n * @param  {} projectRootPath []\n * @return {}             []\n */\nlet parseAppConfig = () => {\n  let filepath = projectRootPath + '/.thinkjsrc';\n  let content = fs.readFileSync(filepath, 'utf8');\n  let data = JSON.parse(content);\n\n  commander.ts = data.ts;\n  commander.es = data.es || data.es6; //compatible with 2.0.x\n  think.mode = think['mode_' + data.mode];\n\n  think.APP_PATH = getProjectAppPath();\n};\n\n/**\n * get view root path;\n * @return {String}             []\n */\nlet getProjectViewPath = module => {\n  let APP_PATH = think.APP_PATH;\n\n  think.APP_PATH = projectRootPath + '/view';\n\n  //read view config, view root_path may be changed it.\n  let viewConfigFile = projectRootPath + '/app/common/config/view.js';\n  if(think.mode === think.mode_normal){\n    viewConfigFile = projectRootPath + '/app/config/view.js';\n  }\n  think.ROOT_PATH = projectRootPath;\n  if(think.isFile(viewConfigFile)){\n    let data = require(viewConfigFile);\n    let viewRootPath = path.normalize(data.root_path || data.default && data.default.root_path);\n    think.APP_PATH = viewRootPath;\n  }\n  let viewPath = think.getPath(module, '');\n\n\n  think.APP_PATH = APP_PATH;\n  return path.normalize(viewPath).slice(0, -1);\n};\n\n/**\n * check env\n * @return {} []\n */\nlet _checkEnv = () => {\n  if(!isThinkApp('./')){\n    console.log();\n    log(colors => {\n      return colors.red('current path is not thinkjs project.\\n');\n    });\n    process.exit();\n  }\n  parseAppConfig();\n  console.log();\n};\n\n/**\n * copy common files\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nlet _copyWwwFiles = () => {\n  mkdir(projectRootPath);\n\n  let name = commander.test ? 'package_test' : 'package';\n  copyFile(name + '.json', projectRootPath + '/package.json');\n\n  let mode = 'normal';\n  if(think.mode === think.mode_module){\n    mode = 'module';\n  }\n  copyFile('thinkjsrc.json', projectRootPath + '/.thinkjsrc', {\n    '<createAt>': getDateTime(),\n    '<mode>': mode\n  });\n\n  let ROOT_PATH = projectRootPath + '/www';\n  copyFile('nginx.conf', projectRootPath + '/nginx.conf', {\n    '<ROOT_PATH>': ROOT_PATH\n  });\n\n  copyFile('pm2.json', projectRootPath + '/pm2.json', {\n    '<ROOT_PATH>': path.dirname(ROOT_PATH),\n    '<APP_NAME>': getAppName()\n  });\n\n  copyFile('gitignore.log', projectRootPath + '/.gitignore');\n  copyFile('README.md', projectRootPath + '/README.md');\n\n  if(commander.ts){\n    copyFile('bin/compile.ts', projectRootPath + '/bin/compile.js');\n    copyFile('think.d.ts', projectRootPath + '/typings/thinkjs/think.d.ts');\n  }\n\n  mkdir(projectRootPath + '/www');\n  copyFile('www/development.js', projectRootPath + '/www/development.js');\n  copyFile('www/production.js', projectRootPath + '/www/production.js');\n  copyFile('www/testing.js', projectRootPath + '/www/testing.js');\n  copyFile('www/README.md', projectRootPath + '/www/README.md');\n\n  mkdir(projectRootPath + '/www/static/');\n  mkdir(projectRootPath + '/www/static/js');\n  mkdir(projectRootPath + '/www/static/css');\n  mkdir(projectRootPath + '/www/static/img');\n};\n/**\n * copy error template files\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nlet _copyErrorTemplateFiles = () => {\n\n  let module = 'common';\n  if(think.mode === think.mode_normal){\n    module = 'home';\n  }\n\n  let controllerPath = think.getPath(module, 'controller');\n  mkdir(controllerPath);\n  copyFile('controller/error.js', controllerPath + '/error.js');\n\n  let commonViewPath = getProjectViewPath(module);\n\n  mkdir(commonViewPath);\n  copyFile('view/error_400.html', commonViewPath + '/error_400.html');\n  copyFile('view/error_403.html', commonViewPath + '/error_403.html');\n  copyFile('view/error_404.html', commonViewPath + '/error_404.html');\n  copyFile('view/error_500.html', commonViewPath + '/error_500.html');\n  copyFile('view/error_503.html', commonViewPath + '/error_503.html');\n};\n\nlet getSecret = length => {\n  length = length || 8;\n  let str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()`1234567890';\n  let arr = str.split('').sort(() => {\n    return Math.random() >= 0.5 ? 1 : -1;\n  }).slice(0, length);\n  return arr.join('');\n};\n/**\n * copy common config files\n * @return {}             []\n */\nlet _copyCommonConfigFiles = () => {\n  let rootPath = think.getPath('common', 'config');\n  mkdir(rootPath);\n\n  copyFile('config/config.js', rootPath + '/config.js', false);\n  copyFile('config/view.js', rootPath + '/view.js');\n  copyFile('config/db.js', rootPath + '/db.js');\n  copyFile('config/hook.js', rootPath + '/hook.js');\n  copyFile('config/session.js', rootPath + '/session.js', {\n    '<SECRET>': getSecret()\n  });\n  copyFile('config/error.js', rootPath + '/error.js');\n\n  mkdir(rootPath + '/env');\n  copyFile('config/env/development.js', rootPath + '/env/development.js');\n  copyFile('config/env/testing.js', rootPath + '/env/testing.js');\n  copyFile('config/env/production.js', rootPath + '/env/production.js');\n\n  mkdir(rootPath + '/locale');\n  copyFile('config/locale/en.js', rootPath + '/locale/en.js');\n};\n/**\n * copy bootstrap files\n * @return {}             []\n */\nlet _copyCommonBootstrapFiles = () => {\n  let rootPath = think.getPath('common', 'bootstrap');\n  mkdir(rootPath);\n\n  copyFile('bootstrap/middleware.js', rootPath + '/middleware.js');\n  copyFile('bootstrap/global.js', rootPath + '/global.js');\n};\n\n\n/**\n * create module\n * @param  {String} module      []\n * @return {}             []\n */\nlet _createModule = module => {\n  if(think.mode !== think.mode_module && module !== 'home'){\n    log(colors => {\n      return colors.red('app mode is not module, can not create module.\\n');\n    });\n    process.exit();\n  }\n  if(isModuleExist(module)){\n    log(colors => {\n      return colors.red('module `' + module + '` is exist.\\n');\n    });\n    process.exit();\n  }\n  \n  //config files\n  let configPath = think.getPath(module, 'config');\n  mkdir(configPath);\n  copyFile('config/config.js', configPath + '/config.js', false);\n\n  //controller files\n  let controllerPath = think.getPath(module, 'controller');\n  mkdir(controllerPath);\n  copyFile('controller/base.js', controllerPath + '/base.js');\n  copyFile('controller/index.js', controllerPath + '/index.js');\n\n  //logic files\n  let logicPath = think.getPath(module, 'logic');\n  mkdir(logicPath);\n  copyFile('logic/index.js', logicPath + '/index.js');\n\n  //model files\n  let modelPath = think.getPath(module, 'model');\n  mkdir(modelPath);\n  copyFile('model/index.js', modelPath + '/index.js', false);\n\n  //view files\n  let viewPath = getProjectViewPath(module);\n  mkdir(viewPath);\n  copyFile('view/index_index.html', viewPath + '/index_index.html');\n};\n\n/**\n * create module\n * @param  {} module []\n * @return {}        []\n */\nlet createModule = module => {\n  _checkEnv();\n\n  if(module === 'common'){\n    return;\n  }\n  \n  _createModule(module);\n};\n/**\n * create controller\n * @param  {} controller []\n * @return {}            []\n */\nlet createController = controller => {\n  _checkEnv();\n\n  controller = controller.split('/');\n  let module = 'common';\n  if(controller.length >= 2){\n    module = controller[0];\n    controller = controller.slice(1).join('/');\n  }else{\n    controller = controller[0];\n  }\n\n  if(!isModuleExist(module)){\n    createModule(module);\n  }\n\n  let controllerPath = think.getPath(module, 'controller');\n  let file = 'index.js';\n  if(commander.rest){\n    file = 'rest.js';\n  }\n  copyFile('controller/' + file, controllerPath + '/' + controller + '.js');\n\n  let logicPath = think.getPath(module, 'logic');\n  copyFile('logic/index.js', logicPath + '/' + controller + '.js');\n\n  console.log();\n};\n\n/**\n * create service\n * @param  {} controller []\n * @return {}            []\n */\nlet createService = service => {\n  _checkEnv();\n\n  service = service.split('/');\n  let module = 'common';\n  if(service.length === 2){\n    module = service[0];\n    service = service[1];\n  }else{\n    service = service[0];\n  }\n\n  if(!isModuleExist(module)){\n    createModule(module);\n  }\n\n  let servicePath = think.getPath(module, 'service');\n  copyFile('service/index.js', servicePath + '/' + service + '.js');\n\n  console.log();\n};\n/**\n * create model file\n * @param  {String} model []\n * @return {}       []\n */\nlet createModel = model => {\n  _checkEnv();\n\n  model = model.split('/');\n  let module = 'common';\n  if(model.length === 2){\n    module = model[0];\n    model = model[1];\n  }else{\n    model = model[0];\n  }\n\n  if(!isModuleExist(module)){\n    createModule(module);\n  }\n\n  let file = 'index.js';\n  if(commander.relation){\n    file = 'relation.js';\n  }else if(commander.mongo){\n    file = 'mongo.js';\n  }\n  let controllerPath = think.getPath(module, 'model');\n  copyFile('model/' + file, controllerPath + '/' + model + '.js');\n\n  console.log();\n};\n\n/**\n * create middleware\n * @param  {String} middleware []\n * @return {[type]}            []\n */\nlet createMiddleware = middleware => {\n  _checkEnv();\n  let midlewarePath = think.getPath('common', 'middleware');\n  let filepath = midlewarePath + '/' + middleware + '.js';\n  mkdir(midlewarePath);\n  copyFile('middleware/base.js', filepath);\n\n  console.log();\n};\n\n/**\n * create adapter\n * @param  {String} adatper []\n * @return {}         []\n */\nlet createAdapter = adapter => {\n  _checkEnv();\n\n  adapter = adapter.split('/');\n\n  let type = adapter[0];\n  let name = adapter[1] || 'base';\n\n  let adapterPath = think.getPath('common', 'adapter');\n\n  copyFile('adapter/base.js', adapterPath + '/' + type + '/' + name + '.js');\n\n  console.log();\n};\n\n/**\n * module app\n * @param  {} projectRootPath []\n * @return {}             []\n */\nlet _createProject = () => {\n\n  _copyWwwFiles();\n\n  mkdir(think.APP_PATH);\n\n  _copyCommonBootstrapFiles();\n  _copyCommonConfigFiles();\n  _copyErrorTemplateFiles();\n\n  _createModule('home');\n\n  if(commander.test){\n    copyFile('test/index.js', projectRootPath + '/test/index.js');\n  }\n};\n/**\n * create project\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nlet createProject = () => {\n  if(isThinkApp(projectRootPath)){\n    console.log();\n    log(colors => {\n      return colors.red('path `' + projectRootPath + '` is already a thinkjs project.\\n');\n    });\n    return;\n  }\n  console.log();\n\n  think.APP_PATH = getProjectAppPath();\n  _createProject();\n\n\n  let p = projectRootPath.slice(cwd.length);\n  if(p[0] === think.sep){\n    p = p.slice(1);\n  }\n\n  console.log();\n  console.log('  enter path:');\n  console.log('  $ cd ' + p);\n  console.log();\n\n  console.log('  install dependencies:');\n  console.log('  $ npm install');\n  console.log();\n\n  console.log('  run the app:');\n  console.log('  $ npm start');\n\n  console.log();\n};\n\n/**\n * create plugin\n * @return {} []\n */\nlet createPlugin = () => {\n  console.log();\n  \n  mkdir(projectRootPath);\n\n  let pluginName = path.basename(projectRootPath).toLowerCase();\n  pluginName = pluginName.replace(/\\_/g, '-');\n  if(pluginName[0] === '-'){\n    pluginName = pluginName.slice(1);\n  }\n  if(pluginName.indexOf('think-') !== 0){\n    pluginName = 'think-' + pluginName;\n  }\n\n  copyFile('plugin/src/index.js', projectRootPath + '/src/index.js');\n  copyFile('plugin/test/index.js', projectRootPath + '/test/index.js', {\n    '<PLUGIN_NAME>': pluginName\n  });\n  copyFile('plugin/.eslintrc', projectRootPath + '/.eslintrc');\n  copyFile('plugin/gitignore', projectRootPath + '/.gitignore');\n  copyFile('plugin/.npmignore', projectRootPath + '/.npmignore');\n  copyFile('plugin/.travis.yml', projectRootPath + '/.travis.yml');\n  copyFile('plugin/package.json', projectRootPath + '/package.json', {\n    '<PLUGIN_NAME>': pluginName\n  });\n  copyFile('plugin/README.md', projectRootPath + '/README.md', {\n    '<PLUGIN_NAME>': pluginName\n  });\n\n  console.log();\n  console.log('  enter path:');\n  console.log('  $ cd ' + projectRootPath);\n  console.log();\n\n  console.log('  install dependencies:');\n  console.log('  $ npm install');\n  console.log();\n\n  console.log('  watch compile:');\n  console.log('  $ npm run watch-compile');\n  console.log();\n\n  console.log('  run test:');\n  console.log('  $ npm run test-cov');\n\n  console.log();\n\n};\n/**\n * display thinkjs version\n * @return {} []\n */\nlet displayVersion = () => {\n  let version = getVersion();\n  let chars = [\n    ' _______ _     _       _        _  _____ ',\n    '|__   __| |   (_)     | |      | |/ ____|',\n    '   | |  | |__  _ _ __ | | __   | | (___  ',\n    '   | |  | \\'_ \\\\| | \\'_ \\\\| |/ /   | |\\\\___ \\\\ ',\n    '   | |  | | | | | | | |   < |__| |____) |',\n    '   |_|  |_| |_|_|_| |_|_|\\\\_\\\\____/|_____/ ',\n    '                                         '                                       \n  ].join('\\n');\n  console.log('\\n v' + version + '\\n');\n  console.log(chars);\n};\n\n\ncommander.usage('[command] <options ...>');\ncommander.option('-v, --version', 'output the version number', () => {\n  displayVersion();\n});\ncommander.option('-V', 'output the version number', () => {\n  displayVersion();\n});\ncommander.option('-e, --es', 'use es for project, used in `new` command');\ncommander.option('--es6', 'use es for project, used in `new` command');\ncommander.option('-t, --ts', 'use TypeScript for project, used in `new` command');\ncommander.option('-T, --test', 'add test dirs when create project, used in `new` command');\ncommander.option('-r, --rest', 'create rest controller, used in `controller` command');\ncommander.option('-M, --mongo', 'create mongo model, used in `model` command');\ncommander.option('-R, --relation', 'create relation model, used in `model` command');\ncommander.option('-m, --mode <mode>', 'project mode type(normal, module), default is module, used in `new` command', mode => {\n  if(modeList.indexOf(mode) === -1){\n    console.log('mode value must one of ' + modeList.join(', '));\n    process.exit();\n  }\n  think.mode = think['mode_' + mode];\n});\n\n//create project\ncommander.command('new <projectPath>').description('create project').action(projectPath => {\n  projectRootPath = path.resolve(projectRootPath, projectPath);\n  commander.es = commander.es || commander.es6;\n  createProject();\n});\n\n//create module\ncommander.command('module <moduleName>').description('add module').action(module => {\n  createModule(module.toLowerCase());\n});\n\n//create controlelr\ncommander.command('controller <controllerName>').description('add controller').action(controller => {\n  createController(controller.toLowerCase());\n});\n\n//create service\ncommander.command('service <serviceName>').description('add service').action(service => {\n  createService(service.toLowerCase());\n});\n\n//create model\ncommander.command('model <modelName>').description('add model').action(model => {\n  createModel(model.toLowerCase());\n});\n\n//create middleware\ncommander.command('middleware <middlewareName>').description('add middleware').action(middleware => {\n  createMiddleware(middleware.toLowerCase());\n});\n\n//create adapter\ncommander.command('adapter <adapterName>').description('add adapter').action(adapter => {\n  createAdapter(adapter.toLowerCase());\n});\n\n//create plugin\ncommander.command('plugin <pluginPath>').description('create ThinkJS plugin').action(pluginPath => {\n  projectRootPath = path.resolve(projectRootPath, pluginPath);\n  \n  createPlugin();\n});\n\ncommander.parse(process.argv);  "]}