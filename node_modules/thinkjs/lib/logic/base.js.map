{"version":3,"sources":["../../src/logic/base.js"],"names":[],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\n/**\n * base logic\n * inherits from base controller\n * @type {Class}\n */\nexport default class extends think.controller.base {\n  /**\n   * get validate method\n   * @return {} []\n   */\n  _getValidateItemMethod(itemData){\n    let list = ['get', 'post', 'file'];\n    for(let i = 0, length = list.length; i < length; i++){\n      let item = list[i];\n      if(itemData[list[i]]){\n        delete itemData[item];\n        return item;\n      }\n    }\n    //for rest request\n    let method = this._isRest && this._method;\n    if(method){\n      method = this.get(method);\n    }\n    if(!method){\n      method = this.http.method.toLowerCase();\n    }\n    if(method === 'put' || method === 'patch'){\n      return 'post';\n    }\n    if(list.indexOf(method) > -1){\n      return method;\n    }\n    return 'post';\n  }\n  /**\n   * parse validate data\n   * {\n   *   name: 'required|int|min:10|max:20',\n   *   title: 'length:10,20|default:welefen|get',\n   *   emai: 'required|email:{}',\n   *   ids: 'required|array|int'\n   * }\n   * @param  {Array}  data []\n   * @return {Array}      []\n   */\n  _parseValidateData(data = {}){\n    let result = {};\n    let allowTypes = ['boolean', 'int', 'float', 'string', 'array', 'object'];\n    for(let name in data){\n\n      let itemData = data[name];\n      if(think.isString(itemData)){\n        itemData = think.validate.parse(itemData);\n      }else{\n        itemData = think.extend({}, itemData);\n      }\n\n      let method = this._getValidateItemMethod(itemData);\n      if(method === 'file'){\n        itemData.object = true;\n      }\n      itemData._method = method;\n      //ignore set itemData.value when aleady has it\n      if(!('value' in itemData)){\n        itemData.value = this[method](name);\n      }\n      \n      let flag = allowTypes.some(item => {\n        return item in itemData;\n      });\n      if(!flag){\n        itemData.string = true;\n      }\n      \n      result[name] = itemData;\n    }\n    return result;\n  }\n  /**\n   * merge clean rules(only value)\n   * @param  {Object} rules []\n   * @return {Object}       []\n   */\n  _mergeCleanRules(rules){\n    let listData = [this.post(), this.get()];\n    let methods = ['post', 'get'];\n    listData.forEach((item, index) => {\n      for(let key in item){\n        if(!rules[key]){\n          rules[key] = {\n            value: item[key],\n            _method: methods[index]\n          };\n        }\n      }\n    });\n    return rules;\n  }\n  /**\n   * validate data\n   * this.validate({\n   *   welefen: 'required|length:4,20|alpha',\n   *   email: 'required|email',\n   *   title: 'required|maxLength:10000'\n   * })\n   * @param  {Object} data      []\n   * @return {}           []\n   */\n  validate(rules) {\n    this._validateInvoked = true;\n    if(think.isEmpty(rules)){\n      return true;\n    }\n    rules = this._parseValidateData(rules);\n    rules = this._mergeCleanRules(rules);\n\n    let methods = {};\n    for(let name in rules){\n      methods[name] = rules[name]._method;\n      delete rules[name]._method;\n    }\n\n    let ret = think.validate(rules, this.locale());\n    if(!think.isEmpty(ret)){\n      this.assign('errors', ret);\n      return false;\n    }\n\n    //set values\n    let values = think.validate.values(rules);\n    for(let name in values){\n      let method = methods[name];\n      let value = values[name];\n      if(value !== '' || (typeof value === 'number' && !isNaN(value))){\n        this[method](name, value);\n      }\n    }\n\n    return true;\n  }\n  /**\n   * get validate errors\n   * @return {Object} []\n   */\n  errors() {\n    return this.assign('errors');\n  }\n  /**\n   * auto validate\n   * @return {} []\n   */\n  __after(){\n    let error = this.config('error');\n    \n    //check request method\n    let allowMethods = this.allowMethods;\n    if(!think.isEmpty(allowMethods)){\n      if(think.isString(allowMethods)){\n        allowMethods = allowMethods.split(',');\n      }\n      let method = this.http.method.toLowerCase();\n      if(allowMethods.indexOf(method) === -1){\n        return this.fail(error.validate_errno, this.locale('METHOD_NOT_ALLOWED')); \n      }\n    }\n\n    //check rules\n    if(think.isEmpty(this.rules) || this._validateInvoked){\n      return;\n    }\n    let flag = this.validate(this.rules);\n    if(!flag){\n      return this.fail(error.validate_errno, this.errors());\n    }\n  }\n}"]}