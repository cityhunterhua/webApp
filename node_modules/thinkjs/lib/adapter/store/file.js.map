{"version":3,"sources":["../../../src/adapter/store/file.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;;;;;AAMA,IAAI,YAAY,EAAhB;;;;;;;;;;;;;;;;;;;;mBAWE,I,iBAAK,M,EAAO;AACV,SAAK,MAAL,GAAc,MAAM,MAAN,CAAa;AACzB,YAAM;AADmB,KAAb,EAEX,MAFW,CAAd;;AAIA,QAAG,CAAC,KAAK,MAAL,CAAY,IAAhB,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,QAAG,CAAC,MAAM,KAAN,CAAY,KAAK,MAAL,CAAY,IAAxB,CAAJ,EAAkC;AAChC,YAAM,KAAN,CAAY,KAAK,MAAL,CAAY,IAAxB;AACD;AACF,G;;;;;;;;mBAMD,W,wBAAY,G,EAAI;AACd,WAAO,KAAK,MAAL,CAAY,IAAZ,GAAmB,eAAK,GAAxB,GAA8B,GAArC;AACD,G;;;;;;;;mBAMK,G;0FAAI,G;UACJ,Q;;;;;AAAA,sB,GAAW,KAAK,WAAL,CAAiB,GAAjB,C;;kBACX,MAAM,MAAN,CAAa,QAAb,C;;;;;+CACK,kBAAQ,OAAR,E;;;;qBAGH,UAAU,QAAV,C;;;+CACC,MAAM,SAAN,CAAgB,aAAG,QAAnB,gBAAiC,QAAjC,EAA2C,EAAC,UAAU,MAAX,EAA3C,C;;;;;;;;;;;;;;;;;;;;;;;mBAOH,G;2FAAI,G,EAAK,O;UACT,Q,EAEA,E,EAEA,O;;;;;AAJA,sB,GAAW,KAAK,WAAL,CAAiB,GAAjB,C;;AACf,oBAAM,KAAN,CAAY,eAAK,OAAL,CAAa,QAAb,CAAZ;AACI,gB,GAAK,MAAM,SAAN,CAAgB,aAAG,SAAnB,e;AAEL,qB,GAAU,GAAG,QAAH,EAAa,OAAb,EAAsB,IAAtB,CAA2B,YAAM;AAC7C,sBAAM,KAAN,CAAY,QAAZ;AACA,uBAAO,UAAU,QAAV,CAAP;AACD,eAHa,C;;AAId,wBAAU,QAAV,IAAsB,OAAtB;gDACO,O;;;;;;;;;;;;;;;;;;;;;;;mBAOT,M,oBAAO,G,EAAI;AACT,QAAI,WAAW,KAAK,WAAL,CAAiB,GAAjB,CAAf;AACA,QAAG,CAAC,MAAM,MAAN,CAAa,QAAb,CAAJ,EAA2B;AACzB,aAAO,kBAAQ,OAAR,EAAP;AACD;AACD,WAAO,MAAM,SAAN,CAAgB,aAAG,MAAnB,gBAA+B,QAA/B,CAAP;AACD,G;;;;;;;mBAKD,I,mBAAM;AACJ,WAAO,kBAAQ,OAAR,CAAgB,MAAM,QAAN,CAAe,KAAK,MAAL,CAAY,IAA3B,CAAhB,CAAP;AACD,G;;;EA5E0B,MAAM,OAAN,CAAc,I","file":"file.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * lock files\n * @type {Object}\n */\nlet lockFiles = {};\n\n/**\n * file store class\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config){\n    this.config = think.extend({\n      path: ''\n    }, config);\n\n    if(!this.config.path){\n      throw new Error('config.path must be set');\n    }\n\n    if(!think.isDir(this.config.path)){\n      think.mkdir(this.config.path);\n    }\n  }\n  /**\n   * get file path\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  getFilePath(key){\n    return this.config.path + path.sep + key;\n  }\n  /**\n   * get data\n   * @param  {String} key []\n   * @return {Promise}    []\n   */\n  async get(key){\n    let filePath = this.getFilePath(key);\n    if(!think.isFile(filePath)){\n      return Promise.resolve();\n    }\n\n    await lockFiles[filePath];\n    return think.promisify(fs.readFile, fs)(filePath, {encoding: 'utf8'});\n  }\n  /**\n   * set file content\n   * @param {String} key     []\n   * @param {String} content []\n   */\n  async set(key, content){\n    let filePath = this.getFilePath(key);\n    think.mkdir(path.dirname(filePath));\n    let fn = think.promisify(fs.writeFile, fs);\n\n    let promise = fn(filePath, content).then(() => {\n      think.chmod(filePath);\n      delete lockFiles[filePath];\n    });\n    lockFiles[filePath] = promise;\n    return promise;\n  }\n  /**\n   * delete file\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n  delete(key){\n    let filepath = this.getFilePath(key);\n    if(!think.isFile(filepath)){\n      return Promise.resolve();\n    }\n    return think.promisify(fs.unlink, fs)(filepath);\n  }\n  /**\n   * get all files\n   * @return {Promise} []\n   */\n  list(){\n    return Promise.resolve(think.getFiles(this.config.path));\n  }\n}"]}