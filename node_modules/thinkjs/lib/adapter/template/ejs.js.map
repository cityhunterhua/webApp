{"version":3,"sources":["../../../src/adapter/template/ejs.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;mBAaQ,G;0FAAI,Y,EAAc,I,EAAM,M;UAExB,O,EAIA,G,EAIA,O;;;;;AARA,qB,GAAU,KAAK,WAAL,CAAiB;AAC7B,0BAAU,YADmB;AAE7B,uBAAO;AAFsB,eAAjB,EAGX,MAHW,C;;qBAIE,MAAM,GAAN,CAAU,KAAV,C;;;AAAZ,iB;;;AAEJ,mBAAK,SAAL,CAAe,OAAf,EAAwB,GAAxB;;;qBAEoB,KAAK,UAAL,CAAgB,YAAhB,C;;;AAAhB,qB;+CACG,IAAI,OAAJ,CAAY,OAAZ,EAAqB,OAArB,EAA8B,IAA9B,C","file":"ejs.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * ejs template\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  async run(templateFile, tVar, config){\n\n    let options = this.parseConfig({\n      filename: templateFile,\n      cache: true\n    }, config);\n    let ejs = await think.npm('ejs');\n\n    this.prerender(options, ejs);\n\n    let content = await this.getContent(templateFile);\n    return ejs.compile(content, options)(tVar);\n  }\n}\n"]}