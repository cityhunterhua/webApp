{"version":3,"sources":["../../../src/adapter/template/jade.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;mBAaQ,G;0FAAI,Y,EAAc,I,EAAM,M;UACxB,O,EAGA,I,EAKE,Q,EAMF,O,EACA,O;;;;;;AAfA,qB,GAAU,KAAK,WAAL,CAAiB;AAC7B,0BAAU;AADmB,eAAjB,EAEX,MAFW,C;;qBAGG,MAAM,GAAN,CAAU,MAAV,C;;;AAAb,kB;;;AAEJ,mBAAK,SAAL,CAAe,OAAf,EAAwB,IAAxB;;mBAEI,QAAQ,a;;;;;AACN,sB,GAAU,WAAW,WAAW,YAAtB,EAAoC,eAAe,UAAnD,C;;mBACV,Q;;;;;+CACK,SAAQ,IAAR,C;;;;qBAIS,KAAK,UAAL,CAAgB,YAAhB,C;;;AAAhB,qB;AACA,qB,GAAU,KAAK,OAAL,CAAa,OAAb,EAAsB,OAAtB,C;;;AAEd,kBAAI,QAAQ,aAAZ,EAA2B;AACzB,2BAAW,WAAW,YAAtB,EAAoC,eAAe,UAAnD,EAA+D,OAA/D;AACD;;+CAEM,QAAQ,IAAR,C","file":"jade.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * jade template\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  async run(templateFile, tVar, config) {\n    let options = this.parseConfig({\n      filename: templateFile\n    }, config);\n    let jade = await think.npm('jade');\n\n    this.prerender(options, jade);\n\n    if (options.cache_compile) {\n      let compile = thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile');\n      if (compile) {\n        return compile(tVar);\n      }\n    }\n\n    let content = await this.getContent(templateFile);\n    let compile = jade.compile(content, options);\n\n    if (options.cache_compile) {\n      thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile', compile);\n    }\n\n    return compile(tVar);\n  }\n}"]}