{"version":3,"sources":["../../../src/adapter/template/base.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;mBAaE,W,wBAAY,W,EAAa,S,EAAU;AACjC,QAAI,SAAS,MAAM,WAAN,CAAkB,MAAM,MAAN,CAAa,EAAb,EAAiB,WAAjB,EAA8B,MAAM,MAAN,CAAa,MAAb,CAA9B,EAAoD,SAApD,CAAlB,CAAb;;AAEA,QAAG,CAAC,MAAM,OAAN,CAAc,OAAO,OAArB,CAAJ,EAAkC;AAChC,YAAM,GAAN,mDAA0D,OAAO,IAAjE,eAAiF,SAAjF;AACA,eAAS,MAAM,MAAN,CAAa,MAAb,EAAqB,OAAO,OAA5B,CAAT;AACD;AACD,WAAO,MAAP;AACD,G;;;;;;;;;mBAOD,S,wBAA+B;AAAA,QAArB,MAAqB,yDAAZ,EAAY;;AAC7B,QAAG,MAAM,UAAN,CAAiB,OAAO,SAAxB,CAAH,EAAsC;AAAA,wCADd,IACc;AADd,YACc;AAAA;;AACpC,aAAO,SAAP,eAAoB,IAApB;AACD;AACF,G;;;;;;;mBAKK,U;0FAAW,I;UACX,I,EACA,K,EACA,S;;;;;;qBAFa,MAAM,SAAN,CAAgB,aAAG,IAAnB,gBAA6B,IAA7B,C;;;AAAb,kB;AACA,mB,GAAQ,KAAK,KAAL,CAAW,OAAX,E;AACR,uB,GAAY,WAAW,WAAW,YAAtB,EAAoC,IAApC,C;;oBACb,aAAa,UAAU,CAAV,KAAgB,K;;;;;+CACvB,UAAU,CAAV,C;;;+CAEF,MAAM,KAAN,eAAwB,IAAxB,EAAgC,YAAM;AAC3C,oBAAI,KAAK,MAAM,SAAN,CAAgB,aAAG,QAAnB,eAAT;AACA,uBAAO,GAAG,IAAH,EAAS,MAAT,CAAP;AACD,eAHM,EAGJ,IAHI,CAGC,mBAAW;;AAEjB,oBAAG,CAAC,OAAJ,EAAY;AACV,yBAAO,OAAP;AACD;AACD,2BAAW,WAAW,YAAtB,EAAoC,IAApC,EAA0C,CAAC,KAAD,EAAQ,OAAR,CAA1C;AACA,uBAAO,OAAP;AACD,eAVM,C;;;;;;;;;;;;;;;;;;;;;;;;mBAkBT,G,gBAAI,Y,EAAa;AACf,WAAO,KAAK,UAAL,CAAgB,YAAhB,CAAP;AACD,G;;;EA1D0B,MAAM,OAAN,CAAc,I","file":"base.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\n\n/**\n * template base class\n * @type {Class}\n */\nexport default class extends think.adapter.base {\n  /**\n   * merge config\n   * @param  {Object} defaultConf []\n   * @param  {Object} extraConf   []\n   * @return {}             []\n   */\n  parseConfig(defaultConf, extraConf){\n    let config = think.parseConfig(think.extend({}, defaultConf, think.config('view'), extraConf));\n    //compatibility with view.options\n    if(!think.isEmpty(config.options)){\n      think.log(`view.options is deprecated, use view.adapter.${config.type} instead`, 'WARNING');\n      config = think.extend(config, config.options);\n    }\n    return config;\n  }\n  /**\n   * pre render\n   * @param  {Object}    config []\n   * @param  {...[type]} args   []\n   * @return {}           []\n   */\n  prerender(config = {}, ...args){\n    if(think.isFunction(config.prerender)){\n      config.prerender(...args);\n    }\n  }\n  /**\n   * get template file content\n   * @return {} []\n   */\n  async getContent(file){\n    let stat = await think.promisify(fs.stat, fs)(file);\n    let mTime = stat.mtime.getTime();\n    let fileCache = thinkCache(thinkCache.VIEW_CONTENT, file);\n    if(fileCache && fileCache[0] >= mTime){\n      return fileCache[1];\n    }\n    return think.await(`template_${file}`, () => {\n      let fn = think.promisify(fs.readFile, fs);\n      return fn(file, 'utf8');\n    }).then(content => {\n      //if content is empty, not cached\n      if(!content){\n        return content;\n      }\n      thinkCache(thinkCache.VIEW_CONTENT, file, [mTime, content]);\n      return content;\n    });\n  }\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {promise}             []\n   */\n  run(templateFile){\n    return this.getContent(templateFile);\n  }\n}\n"]}