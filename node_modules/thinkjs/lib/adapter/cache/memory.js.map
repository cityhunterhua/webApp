{"version":3,"sources":["../../../src/adapter/cache/memory.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAI,YAAY,MAAM,OAAN,CAAc,OAAd,EAAuB,QAAvB,CAAhB;;;;;;;;;;;;;;;;;;;mBAUE,I,iBAAK,O,EAAQ;;AAEX,cAAU,MAAM,WAAN,CAAkB,MAAM,MAAN,CAAa,OAAb,CAAlB,EAAyC,OAAzC,CAAV;;AAEA,SAAK,OAAL,GAAe,QAAQ,OAAvB;;AAEA,SAAK,KAAL,GAAa,IAAI,SAAJ,CAAc;AACzB,YAAM,WAAW;AADQ,KAAd,CAAb;;;AAKA,SAAK,MAAL,GAAc,cAAd;AACA,UAAM,EAAN,CAAS,IAAT;AACD,G;;;;;;;;mBAMD,G,gBAAI,I,EAAK;AAAA;;AACP,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,IAAf,EAAqB,IAArB,CAA0B,gBAAQ;AACvC,UAAG,CAAC,IAAJ,EAAS;AACP;AACD;;AAED,UAAG,KAAK,MAAL,IAAe,KAAK,GAAL,KAAa,KAAK,MAApC,EAA2C;AACzC,eAAO,OAAK,KAAL,CAAW,MAAX,CAAkB,IAAlB,CAAP;AACD;AACD,aAAO,MAAM,KAAN,CAAY,KAAK,IAAjB,CAAP;AACD,KATM,CAAP;AAUD,G;;;;;;;;;;mBAQD,G,gBAAI,I,EAAM,K,EAA8B;AAAA,QAAvB,OAAuB,yDAAb,KAAK,OAAQ;;AACtC,YAAQ,MAAM,KAAN,CAAY,KAAZ,CAAR;AACA,QAAI,OAAO;AACT,cAAQ,UAAU,CAAV,GAAe,KAAK,GAAL,KAAa,UAAU,IAAtC,GAA8C,IAD7C;AAET,sBAFS;AAGT,YAAM;AAHG,KAAX;AAKA,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,IAAf,EAAqB,IAArB,CAAP;AACD,G;;;;;;;;mBAMD,M,oBAAO,I,EAAK;AACV,WAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,IAAlB,CAAP;AACD,G;;;;;;;;mBAMD,E,iBAAI;AACF,QAAI,MAAM,KAAK,GAAL,EAAV;AACA,WAAO,KAAK,KAAL,CAAW,IAAX,GAAkB,IAAlB,CAAuB,gBAAQ;AACpC,WAAI,IAAI,GAAR,IAAe,IAAf,EAAoB;AAClB,YAAI,OAAO,KAAK,GAAL,CAAX;AACA,YAAG,QAAQ,KAAK,MAAb,IAAuB,MAAM,KAAK,MAArC,EAA4C;AAC1C,iBAAO,KAAK,GAAL,CAAP;AACD;AACF;AACF,KAPM,CAAP;AAQD,G;;;EA5E0B,MAAM,OAAN,CAAc,I","file":"memory.js","sourcesContent":["'use strict';\n/**\n * base store\n * @type {Class}\n */\nlet BaseStore = think.adapter('store', 'memory');\n/**\n * memory cache\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n\n    options = think.parseConfig(think.config('cache'), options);\n\n    this.timeout = options.timeout;\n\n    this.store = new BaseStore({\n      type: thinkCache.MEMORY\n    });\n    \n    //set gc type & start gc\n    this.gcType = 'cache_memory';\n    think.gc(this);\n  }\n  /**\n   * get session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.store.get(name).then(data => {\n      if(!data){\n        return;\n      }\n      //data is expire\n      if(data.expire && Date.now() > data.expire){\n        return this.store.delete(name);\n      }\n      return think.clone(data.data);\n    });\n  }\n  /**\n   * set session data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   * @return {Promise} []\n   */\n  set(name, value, timeout = this.timeout){\n    value = think.clone(value);\n    let data = {\n      expire: timeout > 0 ? (Date.now() + timeout * 1000) : null,\n      timeout,\n      data: value\n    };\n    return this.store.set(name, data);\n  }\n  /**\n   * delete session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.store.delete(name);\n  }\n  /**\n   * gc\n   * is internal method\n   * @return {} []\n   */\n  gc(){\n    let now = Date.now();\n    return this.store.list().then(list => {\n      for(let key in list){\n        let item = list[key];\n        if(item && item.expire && now > item.expire){\n          delete list[key];\n        }\n      }\n    });\n  }\n}\n"]}