{"version":3,"sources":["../../../src/adapter/cache/memcache.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAI,iBAAiB,MAAM,OAAN,CAAc,QAAd,EAAwB,UAAxB,CAArB;;;;;;;;;;;;;;;;;;;;mBAWE,I,iBAAK,O,EAAQ;AACX,SAAK,OAAL,GAAe,MAAM,WAAN,CAAkB,MAAM,MAAN,CAAa,OAAb,CAAlB,EAAyC,OAAzC,CAAf;AACA,SAAK,OAAL,GAAe,KAAK,OAAL,CAAa,OAAb,IAAwB,CAAvC;AACA,SAAK,MAAL,GAAc,KAAK,OAAL,CAAa,MAAb,IAAuB,EAArC;AACD,G;;;;;;;;mBAMD,mB,gCAAoB,I,EAAK;AACvB,QAAI,UAAU,MAAM,WAAN,CAAkB,IAAlB,CAAuB,KAAK,OAA5B,EAAqC,MAAM,MAAN,CAAa,UAAb,CAArC,EAA+D;AAC3E,eAAS,IADkE;AAE3E,YAAM;AAFqE,KAA/D,CAAd;AAIA,SAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,KAAK,OAAvC;AACA,SAAK,MAAL,GAAc,QAAQ,MAAR,IAAkB,KAAK,MAArC;AACA,WAAO,eAAe,WAAf,CAA2B,OAA3B,EAAoC,WAAW,QAA/C,EAAyD,CAAC,SAAD,EAAY,MAAZ,CAAzD,CAAP;AACD,G;;;;;;;;mBAMD,G,gBAAI,I,EAAK;AACP,QAAI,WAAW,KAAK,mBAAL,CAAyB,KAAzB,CAAf;AACA,WAAO,SAAS,GAAT,CAAa,KAAK,MAAL,GAAc,IAA3B,EAAiC,IAAjC,CAAsC,iBAAS;AACpD,UAAI,KAAJ,EAAW;AACT,eAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AACD;AACF,KAJM,EAIJ,KAJI,CAIE,YAAM,CAAE,CAJV,CAAP;AAKD,G;;;;;;;;;mBAOD,G,gBAAI,I,EAAM,K,EAA8B;AAAA,QAAvB,OAAuB,yDAAb,KAAK,OAAQ;;AACtC,QAAI,MAAM,QAAN,CAAe,IAAf,CAAJ,EAA0B;AACxB,gBAAU,SAAS,OAAnB;AACA,UAAI,MAAM,oBAAY,IAAZ,EAAkB,CAAlB,CAAV;AACA,cAAQ,KAAK,GAAL,CAAR;AACA,aAAO,GAAP;AACD;AACD,QAAI,WAAW,KAAK,mBAAL,CAAyB,KAAzB,CAAf;AACA,QAAI,OAAO,yBAAe,KAAf,CAAX;AACA,WAAO,SAAS,GAAT,CAAa,KAAK,MAAL,GAAc,IAA3B,EAAiC,IAAjC,EAAuC,OAAvC,EAAgD,KAAhD,CAAsD,YAAM,CAAE,CAA9D,CAAP;AACD,G;;;;;;;;mBAMD,M,oBAAO,I,EAAK;AACV,QAAI,WAAW,KAAK,mBAAL,CAAyB,QAAzB,CAAf;AACA,WAAO,SAAS,MAAT,CAAgB,KAAK,MAAL,GAAc,IAA9B,EAAoC,KAApC,CAA0C,YAAM,CAAE,CAAlD,CAAP;AACD,G;;;EA/D0B,MAAM,OAAN,CAAc,I","file":"memcache.js","sourcesContent":["'use strict';\n\nlet MemcacheSocket = think.adapter('socket', 'memcache');\n\n/**\n * memcache cache\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    this.options = think.parseConfig(think.config('cache'), options);\n    this.timeout = this.options.timeout || 0;\n    this.prefix = this.options.prefix || '';\n  }\n  /**\n   * get memcache instance\n   * @param  {String} command []\n   * @return {}         []\n   */\n  getMemcacheInstance(name){\n    let options = think.parseConfig.call(this.options, think.config('memcache'), {\n      command: name,\n      from: 'cache'\n    });\n    this.timeout = options.timeout || this.timeout;\n    this.prefix = options.prefix || this.prefix;\n    return MemcacheSocket.getInstance(options, thinkCache.MEMCACHE, ['command', 'from']);\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    let instance = this.getMemcacheInstance('get');\n    return instance.get(this.prefix + name).then(value => {\n      if (value) {\n        return JSON.parse(value);\n      }\n    }).catch(() => {});\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.timeout){\n    if (think.isObject(name)) {\n      timeout = value || timeout;\n      let key = Object.keys(name)[0];\n      value = name[key];\n      name = key;\n    }\n    let instance = this.getMemcacheInstance('set');\n    let data = JSON.stringify(value);\n    return instance.set(this.prefix + name, data, timeout).catch(() => {});\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    let instance = this.getMemcacheInstance('delete');\n    return instance.delete(this.prefix + name).catch(() => {});\n  }\n}"]}