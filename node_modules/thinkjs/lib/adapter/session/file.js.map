{"version":3,"sources":["../../../src/adapter/session/file.js"],"names":[],"mappings":"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","file":"file.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\n/**\n * file store\n * @type {Class}\n */\nlet FileStore = think.adapter('store', 'file');\n\n/**\n * file session\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    \n    options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = options.timeout;\n    this.cookie = options.cookie;\n    this.newCookie = options.newCookie;\n    this.path = options.path || path.normalize(os.tmpdir() + path.sep + 'thinkjs');\n    this.path_depth = options.path_depth || 1;\n\n    this.store = new FileStore({\n      path: this.path\n    });\n\n    this.gcType = this.path;\n    think.gc(this);\n\n    this.data = null;\n    this.dataEmpty = false;\n  }\n  /**\n   * get stored file path\n   * @return {String} []\n   */\n  getFilepath(){\n    let name = this.cookie;\n    let dir = name.slice(0, this.path_depth).split('').join(path.sep);\n    return `${dir}${path.sep}${name}.json`;\n  }\n  /**\n   * get init data\n   * @return {} []\n   */\n  async getInitData(){\n    //when session cookie is not exist, return direct\n    if(this.newCookie){\n      return {};\n    }\n    let filepath = this.getFilepath();\n    //ignore error\n    let data = await think.await(`session_${this.cookie}`, () => {\n      return this.store.get(filepath).catch(() => {});\n    });\n    if(!data){\n      return {};\n    }\n    try{\n      data = JSON.parse(data);\n    }catch(e){\n      return {};\n    }\n    if(Date.now() > data.expire){\n      await this.store.delete(filepath);\n    }else{\n      return data.data || {};\n    }\n    return {};\n  }\n  /**\n   * get session data\n   * @return {Promise} []\n   */\n  async getData(){\n    if(this.data){\n      return this.data;\n    }\n    let data = await this.getInitData();\n    if(think.isEmpty(data)){\n      this.dataEmpty = true;\n    }\n    this.data = data;\n    return this.data;\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.getData().then(() => {\n      return name ? this.data[name] : this.data;\n    });\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.timeout){\n    this.timeout = timeout;\n    return this.getData().then(() => {\n      this.data[name] = value;\n    });\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.getData().then(() => {\n      if(name){\n        delete this.data[name];\n      }else{\n        this.data = {};\n      }\n    });\n  }\n  /**\n   * flush data to file\n   * @return {Promise} []\n   */\n  async flush(){\n    let data = await this.getData();\n    //if data not changed and initial data is empty, then ignore it\n    if(this.dataEmpty && think.isEmpty(data)){\n      return;\n    }\n    let saveData = {\n      data: this.data,\n      expire: Date.now() + this.timeout * 1000,\n      timeout: this.timeout\n    };\n    let filepath = this.getFilepath();\n    return this.store.set(filepath, JSON.stringify(saveData));\n  }\n  /**\n   * gc\n   * @return {} []\n   */\n  gc(){\n    let now = Date.now();\n    return this.store.list().then(files => {\n      files.forEach(file => {\n        let filepath = `${this.path}${path.sep}${file}`;\n        let content = fs.readFileSync(filepath, 'utf8');\n        try{\n          let data = JSON.parse(content);\n          if(now > data.expire){\n            fs.unlink(filepath, () => {});\n          }\n        }catch(e){\n          fs.unlink(filepath, () => {});\n        }\n      });\n    });\n  }\n}"]}