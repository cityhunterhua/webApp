{"version":3,"sources":["../../../src/adapter/session/memory.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAI,YAAY,MAAM,OAAN,CAAc,OAAd,EAAuB,QAAvB,CAAhB;;;;;;;;;;;;;;;;;;;;mBAWE,I,iBAAK,O,EAAQ;;AAEX,cAAU,MAAM,WAAN,CAAkB,MAAM,MAAN,CAAa,SAAb,CAAlB,EAA2C,OAA3C,CAAV;;AAEA,SAAK,OAAL,GAAe,QAAQ,OAAvB;;AAEA,SAAK,MAAL,GAAc,QAAQ,MAAtB;;AAEA,SAAK,KAAL,GAAa,IAAI,SAAJ,CAAc;AACzB,YAAM,WAAW;AADQ,KAAd,CAAb;;AAIA,SAAK,MAAL,GAAc,cAAd;AACA,UAAM,EAAN,CAAS,IAAT;AACD,G;;;;;;;;mBAMD,G,gBAAI,I,EAAK;AAAA;;AACP,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,MAApB,EAA4B,IAA5B,CAAiC,gBAAQ;AAC9C,UAAG,CAAC,IAAJ,EAAS;AACP;AACD;AACD,UAAG,KAAK,GAAL,KAAa,KAAK,MAArB,EAA4B;AAC1B,eAAO,OAAK,KAAL,CAAW,MAAX,CAAkB,OAAK,MAAvB,CAAP;AACD;AACD,WAAK,MAAL,GAAc,KAAK,GAAL,KAAa,OAAK,OAAL,GAAe,IAA1C;AACA,UAAI,QAAQ,KAAK,IAAjB;AACA,UAAG,IAAH,EAAQ;AACN,eAAO,MAAM,KAAN,CAAY,MAAM,IAAN,CAAZ,CAAP;AACD;AACD,aAAO,MAAM,KAAN,CAAY,KAAZ,CAAP;AACD,KAbM,CAAP;AAcD,G;;;;;;;;;;mBAQD,G,gBAAI,I,EAAM,K,EAA8B;AAAA;;AAAA,QAAvB,OAAuB,yDAAb,KAAK,OAAQ;;AACtC,YAAQ,MAAM,KAAN,CAAY,KAAZ,CAAR;AACA,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,MAApB,EAA4B,IAA5B,CAAiC,gBAAQ;AAAA;;AAC9C,aAAO,QAAQ,EAAf;AACA,aAAO,MAAM,MAAN,CAAa,EAAb,EAAiB,IAAjB,EAAuB;AAC5B,gBAAQ,KAAK,GAAL,KAAa,UAAU,IADH;AAE5B,wBAF4B;AAG5B,iCACG,IADH,IACU,KADV;AAH4B,OAAvB,CAAP;AAOA,aAAO,OAAK,KAAL,CAAW,GAAX,CAAe,OAAK,MAApB,EAA4B,IAA5B,CAAP;AACD,KAVM,CAAP;AAWD,G;;;;;;;;mBAMD,M,oBAAO,I,EAAK;AAAA;;AACV,WAAO,KAAK,KAAL,CAAW,GAAX,CAAe,KAAK,MAApB,EAA4B,IAA5B,CAAiC,gBAAQ;AAC9C,UAAG,CAAC,IAAJ,EAAS;AACP;AACD;AACD,UAAG,CAAC,IAAJ,EAAS;AACP,eAAO,OAAK,KAAL,CAAW,MAAX,CAAkB,OAAK,MAAvB,CAAP;AACD;AACD,aAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AACD,KARM,CAAP;AASD,G;;;;;;;;mBAMD,E,iBAAI;AACF,QAAI,MAAM,KAAK,GAAL,EAAV;AACA,WAAO,KAAK,KAAL,CAAW,IAAX,GAAkB,IAAlB,CAAuB,gBAAQ;AACpC,WAAI,IAAI,GAAR,IAAe,IAAf,EAAoB;AAClB,YAAI,OAAO,KAAK,GAAL,CAAX;AACA,YAAG,QAAQ,MAAM,KAAK,MAAtB,EAA6B;AAC3B,iBAAO,KAAK,GAAL,CAAP;AACD;AACF;AACF,KAPM,CAAP;AAQD,G;;;EA9F0B,MAAM,OAAN,CAAc,I","file":"memory.js","sourcesContent":["'use strict';\n\n/**\n * base store\n * @type {Class}\n */\nlet BaseStore = think.adapter('store', 'memory');\n\n/**\n * memory session\n */\nexport default class extends think.adapter.base {\n  /**\n   * init \n   * @param  {Object} config []\n   * @return {}         []\n   */\n  init(options){\n\n    options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = options.timeout;\n    //key is session cookie value\n    this.cookie = options.cookie;\n    //store\n    this.store = new BaseStore({\n      type: thinkCache.SESSION\n    });\n    //set gc type & start gc\n    this.gcType = 'session_base';\n    think.gc(this);\n  }\n  /**\n   * get session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.store.get(this.cookie).then(data => {\n      if(!data){\n        return;\n      }\n      if(Date.now() > data.expire){\n        return this.store.delete(this.cookie);\n      }\n      data.expire = Date.now() + this.timeout * 1000;\n      let value = data.data;\n      if(name){\n        return think.clone(value[name]);\n      }\n      return think.clone(value);\n    });\n  }\n  /**\n   * set session data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   * @return {Promise} []\n   */\n  set(name, value, timeout = this.timeout){\n    value = think.clone(value);\n    return this.store.get(this.cookie).then(data => {\n      data = data || {};\n      data = think.extend({}, data, {\n        expire: Date.now() + timeout * 1000,\n        timeout,\n        data: {\n          [name]: value\n        }\n      });\n      return this.store.set(this.cookie, data);\n    });\n  }\n  /**\n   * delete session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.store.get(this.cookie).then(data => {\n      if(!data){\n        return;\n      }\n      if(!name){\n        return this.store.delete(this.cookie);\n      }\n      delete data.data[name];\n    });\n  }\n  /**\n   * gc\n   * is internal method\n   * @return {} []\n   */\n  gc(){\n    let now = Date.now();\n    return this.store.list().then(list => {\n      for(let key in list){\n        let item = list[key];\n        if(item && now > item.expire){\n          delete list[key];\n        }\n      }\n    });\n  }\n}\n"]}