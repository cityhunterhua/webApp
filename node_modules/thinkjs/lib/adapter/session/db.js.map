{"version":3,"sources":["../../../src/adapter/session/db.js"],"names":[],"mappings":"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","file":"db.js","sourcesContent":["'use strict';\n/**\n * db session\n \n  DROP TABLE IF EXISTS `think_session`;\n  CREATE TABLE `think_session` (\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n    `cookie` varchar(255) NOT NULL DEFAULT '',\n    `data` text,\n    `expire` bigint(11) NOT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `cookie` (`cookie`),\n    KEY `expire` (`expire`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n    \n    options = think.parseConfig(think.config('session'), options);\n    this.cookie = options.cookie;\n    this.newCookie = options.newCookie;\n    \n    this.timeout = options.timeout;\n    this.isChanged = false;\n\n    //let dbConfig = think.extend({}, think.config('db'), options);\n    this.model = think.model('session', think.extend({\n      from: 'session'\n    }, think.config('db')));\n\n    this.gcType = 'session_db';\n    think.gc(this);\n  }\n  /**\n   * get session data\n   * @return {Promise} []\n   */\n  async getData(){\n    if(this.data){\n      return this.data;\n    }\n    //when session cookie is not exist, return direct\n    if(this.newCookie){\n      this.data = {};\n      await this.model.add({cookie: this.cookie, expire: Date.now() + this.timeout * 1000});\n      return this.data;\n    }\n    //let data = await this.model.where({cookie: this.cookie}).find();\n    let data = await think.await(`session_${this.cookie}`, () => {\n      return this.model.where({cookie: this.cookie}).find();\n    });\n\n    if(this.data){\n      return this.data;\n    }\n\n    this.data = {};\n    if(think.isEmpty(data)){\n      await this.model.add({cookie: this.cookie, expire: Date.now() + this.timeout * 1000});\n      return this.data;\n    }\n\n    if(Date.now() > data.expire){\n      return this.data;\n    }\n\n    try{\n      this.data = JSON.parse(data.data) || {};\n    }catch(e){}\n    \n    return this.data;\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.getData().then(() => {\n      return name ? this.data[name] : this.data;\n    });\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.timeout){\n    this.timeout = timeout;\n    return this.getData().then(() => {\n      this.isChanged = true;\n      this.data[name] = value;\n    });\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.getData().then(() => {\n      this.isChanged = true;\n      if(name){\n        delete this.data[name];\n      }else{\n        this.data = {};\n      }\n    });\n  }\n  /**\n   * flush data\n   * @return {Promise} []\n   */\n  flush(){\n    let data = {\n      expire: Date.now() + this.timeout * 1000,\n      timeout: this.timeout\n    };\n    return this.getData().then(() => {\n      //if session is empty and not changed, not flush\n      if(!this.isChanged && think.isEmpty(this.data)){\n        return;\n      }\n      //update data when data is changed\n      if(this.isChanged){\n        data.data = JSON.stringify(this.data);\n      }\n      return this.model.where({cookie: this.cookie}).update(data);\n    });\n  }\n  /**\n   * gc\n   * @return {Promise} []\n   */\n  gc(){\n    return this.model.where({expire: {'<': Date.now()}}).delete();\n  }\n}"]}