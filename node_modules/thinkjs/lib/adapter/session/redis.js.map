{"version":3,"sources":["../../../src/adapter/session/redis.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAI,cAAc,MAAM,OAAN,CAAc,QAAd,EAAwB,OAAxB,CAAlB;;;;;;;;;;;;;;;;;;;;mBAWE,I,iBAAK,O,EAAQ;;AAEX,SAAK,OAAL,GAAe,MAAM,WAAN,CAAkB,MAAM,MAAN,CAAa,SAAb,CAAlB,EAA2C,OAA3C,CAAf;;AAEA,SAAK,OAAL,GAAe,KAAK,OAAL,CAAa,OAA5B;AACA,SAAK,MAAL,GAAc,KAAK,OAAL,CAAa,MAA3B;AACD,G;;;;;;;mBAKD,gB,6BAAiB,I,EAAK;AACpB,QAAI,UAAU,MAAM,WAAN,CAAkB,IAAlB,CAAuB,KAAK,OAA5B,EAAqC,MAAM,MAAN,CAAa,OAAb,CAArC,EAA4D;AACxE,eAAS,IAD+D;AAExE,YAAM;AAFkE,KAA5D,CAAd;AAIA,SAAK,OAAL,GAAe,QAAQ,OAAR,IAAmB,KAAK,OAAvC;AACA,WAAO,YAAY,WAAZ,CAAwB,OAAxB,EAAiC,WAAW,KAA5C,EAAmD,CAAC,SAAD,EAAY,MAAZ,CAAnD,CAAP;AACD,G;;;;;;;mBAKK,O;;;;UAMA,Q,EAEA,I;;;;;mBAND,KAAK,I;;;;;+CACC,KAAK,I;;;AAGV,sB,GAAW,KAAK,gBAAL,CAAsB,KAAtB,C;;qBAEE,MAAM,KAAN,cAAuB,KAAK,MAA5B,EAAsC,YAAM;AAC3D,uBAAO,SAAS,GAAT,CAAa,OAAK,MAAlB,CAAP;AACD,eAFgB,C;;;AAAb,kB;;mBAID,KAAK,I;;;;;+CACC,KAAK,I;;;;AAGd,mBAAK,IAAL,GAAY,EAAZ;AACA,kBAAG;AACD,qBAAK,IAAL,GAAY,KAAK,KAAL,CAAW,IAAX,KAAoB,EAAhC;AACD,eAFD,CAEC,OAAM,CAAN,EAAQ,CAAE;;+CAEJ,KAAK,I;;;;;;;;;;;;;;;;;;;;;;;mBAOd,G,gBAAI,I,EAAK;AAAA;;AACP,WAAO,KAAK,OAAL,GAAe,IAAf,CAAoB,YAAM;AAC/B,aAAO,CAAC,IAAD,GAAQ,OAAK,IAAb,GAAoB,OAAK,IAAL,CAAU,IAAV,CAA3B;AACD,KAFM,CAAP;AAGD,G;;;;;;;;;mBAOD,G,gBAAI,I,EAAM,K,EAAO,O,EAAQ;AAAA;;AACvB,QAAG,OAAH,EAAW;AACT,WAAK,OAAL,GAAe,OAAf;AACD;AACD,WAAO,KAAK,OAAL,GAAe,IAAf,CAAoB,YAAM;AAC/B,aAAK,IAAL,CAAU,IAAV,IAAkB,KAAlB;AACD,KAFM,CAAP;AAGD,G;;;;;;;;mBAMD,M,oBAAO,I,EAAK;AAAA;;AACV,WAAO,KAAK,OAAL,GAAe,IAAf,CAAoB,YAAM;AAC/B,UAAG,IAAH,EAAQ;AACN,eAAO,OAAK,IAAL,CAAU,IAAV,CAAP;AACD,OAFD,MAEK;AACH,eAAK,IAAL,GAAY,EAAZ;AACD;AACF,KANM,CAAP;AAOD,G;;;;;;;mBAKD,K,oBAAO;AAAA;;AACL,WAAO,KAAK,OAAL,GAAe,IAAf,CAAoB,YAAM;AAC/B,UAAI,WAAW,OAAK,gBAAL,CAAsB,KAAtB,CAAf;AACA,aAAO,SAAS,GAAT,CAAa,OAAK,MAAlB,EAA0B,yBAAe,OAAK,IAApB,CAA1B,EAAqD,OAAK,OAA1D,CAAP;AACD,KAHM,CAAP;AAID,G;;;EAnG0B,MAAM,OAAN,CAAc,I","file":"redis.js","sourcesContent":["'use strict';\n\nlet RedisSocket = think.adapter('socket', 'redis');\n\n/**\n * redis session\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  init(options){\n\n    this.options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = this.options.timeout;\n    this.cookie = this.options.cookie;\n  }\n  /**\n   * get redis instance\n   * @return {Object} []\n   */\n  getRedisInstance(name){\n    let options = think.parseConfig.call(this.options, think.config('redis'), {\n      command: name,\n      from: 'session'\n    });\n    this.timeout = options.timeout || this.timeout;\n    return RedisSocket.getInstance(options, thinkCache.REDIS, ['command', 'from']);\n  }\n  /**\n   * get session\n   * @return {Promise} []\n   */\n  async getData(){\n    \n    if(this.data){\n      return this.data;\n    }\n\n    let instance = this.getRedisInstance('get');\n\n    let data = await think.await(`session_${this.cookie}`, () => {\n      return instance.get(this.cookie);\n    });\n\n    if(this.data){\n      return this.data;\n    }\n\n    this.data = {};\n    try{\n      this.data = JSON.parse(data) || {};\n    }catch(e){}\n\n    return this.data;\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.getData().then(() => {\n      return !name ? this.data : this.data[name];\n    });\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout){\n    if(timeout){\n      this.timeout = timeout;\n    }\n    return this.getData().then(() => {\n      this.data[name] = value;\n    });\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.getData().then(() => {\n      if(name){\n        delete this.data[name];\n      }else{\n        this.data = {};\n      }\n    });\n  }\n  /**\n   * flush data\n   * @return {Promise} []\n   */\n  flush(){\n    return this.getData().then(() => {\n      let instance = this.getRedisInstance('set');\n      return instance.set(this.cookie, JSON.stringify(this.data), this.timeout);\n    });\n  }\n}"]}