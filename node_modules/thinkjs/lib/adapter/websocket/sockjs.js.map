{"version":3,"sources":["../../../src/adapter/websocket/sockjs.js"],"names":[],"mappings":"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","file":"sockjs.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * websocket adapter for sockjs\n */\nexport default class extends Base {\n  /**\n   * run\n   * @return {} []\n   */\n  async run(){\n    let sockjs = await think.npm('sockjs');\n\n    let options = {\n      log: () => {}\n    };\n    if(this.config.sockjs_url){\n      options.sockjs_url = this.config.sockjs_url;\n    }\n    let sockjsServer = sockjs.createServer(options);\n    this.sockjs = sockjsServer;\n\n    //get message type\n    let messages = think.extend({}, this.config.messages);\n    let open = messages.open;\n    delete messages.open;\n    let close = messages.close;\n    delete messages.close;\n\n    thinkCache(thinkCache.WEBSOCKET, []);\n\n    sockjsServer.on('connection', socket => {\n\n      this.addSocket(socket);\n          \n      //open connection\n      if(open){\n        this.message(open, undefined, socket);\n      }\n\n      socket.on('close', () => {\n        this.removeSocket(socket);\n\n        if(close){\n          this.message(close, undefined, socket);\n        }\n      });\n\n      //msg is {event: event, data: data}\n      socket.on('data', msg => {\n        try{\n          msg = JSON.parse(msg);\n          if(msg.event && messages[msg.event]){\n            this.message(messages[msg.event], msg.data, socket);\n          }\n        }catch(e){}\n      });\n      \n    });\n\n    let path = this.config.path || '/sockjs';\n    sockjsServer.installHandlers(this.server, {prefix: path});\n  }\n  /**\n   * add socket\n   * @param {Object} socket []\n   */\n  addSocket(socket){\n    let sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.push(socket);\n  }\n  /**\n   * remove socket\n   * @param  {Object} socket []\n   * @return {}        []\n   */\n  removeSocket(socket){\n    let sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.some((item, index) => {\n      if(item.id === socket.id){\n        sockets.splice(index, 1);\n        return true;\n      }\n    });\n  }\n  /**\n   * emit data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n  emit(event, data){\n    this.socket.write(JSON.stringify({event: event, data: data}));\n  }\n  /**\n   * broadcast data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n  broadcast(event, data, containSelf){\n    let sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.forEach(socket => {\n      if(!containSelf && socket.id === this.socket.id){\n        return;\n      }\n      socket.write(JSON.stringify({event: event, data: data}));\n    });\n  }\n  /**\n   * deal message\n   * @param  {String} url  []\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  async message(url, data, socket){\n    if(url[0] !== '/'){\n      url = `/${url}`;\n    }\n\n    let http = await think.http({\n      url: url,\n      headers: socket.headers,\n      ip: socket.remoteAddress\n    });\n    \n    http.data = data;\n    http.socket = socket;\n    http.sockjs = this.sockjs;\n\n    http.socketEmit = this.emit;\n    http.socketBroadcast = this.broadcast;\n\n    let instance = new this.app(http);\n    return instance.run();\n  }\n}"]}