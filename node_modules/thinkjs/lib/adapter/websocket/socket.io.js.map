{"version":3,"sources":["../../../src/adapter/websocket/socket.io.js"],"names":[],"mappings":"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","file":"socket.io.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n/**\n * websocket adapter for socket.io\n */\nexport default class extends Base {\n  /**\n   * run\n   * @return {} []\n   */\n  async run(){\n\n    let socketio = await think.npm('socket.io');\n    let io = socketio(this.server);\n    this.io = io;\n\n    //set io adapter, must be a function\n    //http://socket.io/docs/using-multiple-nodes/\n    if(this.config.adp){\n      io.adapter(this.config.adp());\n    }\n\n    //Sets the path v under which engine.io and the static files will be served. Defaults to /socket.io.\n    if(this.config.path){\n      io.path(this.config.path);\n    }\n\n    //Sets the allowed origins v. Defaults to any origins being allowed.\n    let allow_origin = this.config.allow_origin;\n    if(allow_origin){\n      io.origins(this.config.allow_origin);\n    }\n\n    //get message type\n    let messages = think.isArray(this.config.messages) ? this.config.messages : [this.config.messages];\n    messages.forEach((v = {}) => {\n      let sc = v.namespace ? io.of(v.namespace) : io;\n      this.registerSocket(sc, v);\n    });\n  }\n\n  /**\n   * register namespace of socket, and support multi socket connect\n   * eg:\n   * export default {\n    messages:\n        [\n            {\n                namespace:'/payCount',\n                open: 'analysis/erp_pay/open',\n                close: 'analysis/erp_pay/close',\n                day: 'analysis/erp_pay/day',\n                updateFromMq: 'analysis/erp_pay/updateFromMq',\n            }\n        ]\n    };\n   * @param io\n   * @param messages\n     */\n  registerSocket(io, messages){\n    let msgKeys = Object.keys(messages);\n    let open = messages.open;\n    delete messages.open;\n    let close = messages.close;\n    delete messages.close;\n\n    thinkCache(thinkCache.WEBSOCKET, io.sockets.sockets);\n\n    io.on('connection', socket => {\n\n      //open connection\n      if(open){\n        this.message(open, undefined, socket);\n      }\n      //listen disonnection event\n      if(close){\n        socket.on('disconnect', () => {\n          this.message(close, undefined, socket);\n        });\n      }\n\n      //listen list of message type\n      msgKeys.forEach(msgKey => {\n        socket.on(msgKey, msg => {\n          this.message(messages[msgKey], msg, socket);\n        });\n      });\n    });\n  }\n  /**\n   * emit socket data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n  emit(event, data){\n    return this.socket.emit(event, data);\n  }\n  /**\n   * broadcast socket data\n   * @param  {String} event       []\n   * @param  {Mixed} data        []\n   * @param  {Boolean} containSelf []\n   * @return {}             []\n   */\n  broadcast(event, data, containSelf){\n    if(containSelf){\n      this.io.sockets.emit(event, data);\n    }else{\n      this.socket.broadcast.emit(event, data);\n    }\n  }\n  /**\n   * deal message\n   * @param  {String} url  []\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  async message(url, data, socket){\n    let request = socket.request;\n    if(url[0] !== '/'){\n      url = `/${url}`;\n    }\n    request.url = url;\n    let http;\n    //socket.io c++ client发过来的requet没有res\n    if(!request.res){\n        http = await think.http(url);\n    }else{\n        http = await think.http(request, think.extend({}, request.res));\n    }\n    http.data = data;\n    http.socket = socket;\n    http.io = this.io;\n\n    http.socketEmit = this.emit;\n    http.socketBroadcast = this.broadcast;\n\n    let instance = new this.app(http);\n    return instance.run();\n  }\n}\n"]}