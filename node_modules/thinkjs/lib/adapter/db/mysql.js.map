{"version":3,"sources":["../../../src/adapter/db/mysql.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AAEA,IAAI,cAAc,MAAM,OAAN,CAAc,QAAd,EAAwB,OAAxB,CAAlB;;;;;;;;;;;;;;;;;;;;mBAWE,M,mBAAO,G,EAAI;AACT,QAAG,KAAK,OAAR,EAAgB;AACd,aAAO,KAAK,OAAZ;AACD;AACD,QAAI,SAAS,MAAM,MAAN,CAAa;AACxB,WAAK;AADmB,KAAb,EAEV,KAAK,MAFK,CAAb;AAGA,SAAK,OAAL,GAAe,YAAY,WAAZ,CAAwB,MAAxB,EAAgC,WAAW,EAA3C,EAA+C,CAAC,KAAD,CAA/C,CAAf;AACA,WAAO,KAAK,OAAZ;AACD,G;;;;;;;;mBAMK,S;0FAAU,K;UACV,I,EACA,G;;;;;;qBADa,KAAK,KAAL,wBAAgC,KAAK,QAAL,CAAc,KAAd,CAAhC,C;;;AAAb,kB;AACA,iB,GAAM,E;;AACV,mBAAK,OAAL,CAAa,gBAAQ;AACnB,oBAAI,KAAK,KAAT,IAAkB;AAChB,0BAAQ,KAAK,KADG;AAEhB,0BAAQ,KAAK,IAFG;AAGhB,8BAAY,KAAK,IAAL,KAAc,EAHV;;AAKhB,6BAAW,KAAK,GAAL,KAAa,KALR;AAMhB,4BAAU,KAAK,GAAL,KAAa,KANP;AAOhB,oCAAkB,KAAK,KAAL,CAAW,WAAX,OAA6B;AAP/B,iBAAlB;AASD,eAVD;+CAWO,G;;;;;;;;;;;;;;;;;;;;;;;mBAOT,Q,uBAAkB;AAAA,QAAT,GAAS,yDAAH,EAAG;;AAChB,UAAM,IAAI,IAAJ,EAAN;AACA,QAAG,MAAM,OAAN,CAAc,GAAd,CAAH,EAAsB;AACpB,aAAO,EAAP;AACD;AACD,QAAG,MAAM,cAAN,CAAqB,GAArB,CAAH,EAA6B;AAC3B,aAAO,GAAP;AACD;AACD,QAAI,CAAE,oBAAoB,IAApB,CAAyB,GAAzB,CAAN,EAAsC;AACpC,YAAM,MAAM,GAAN,GAAY,GAAlB;AACD;AACD,WAAO,GAAP;AACD,G","file":"mysql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\nlet MysqlSocket = think.adapter('socket', 'mysql');\n/**\n * mysql db\n * @type {Class}\n */\nexport default class extends Base {\n  /**\n   * get mysql socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  socket(sql){\n    if(this._socket){\n      return this._socket;\n    }\n    let config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = MysqlSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  }\n  /**\n   * get table schema\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n  async getSchema(table){\n    let data = await this.query(`SHOW COLUMNS FROM ${this.parseKey(table)}`);\n    let ret = {};\n    data.forEach(item => {\n      ret[item.Field] = {\n        'name': item.Field,\n        'type': item.Type,\n        'required': item.Null === '',\n        //'default': item.Default,\n        'primary': item.Key === 'PRI',\n        'unique': item.Key === 'UNI',\n        'auto_increment': item.Extra.toLowerCase() === 'auto_increment'\n      };\n    });\n    return ret;\n  }\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  parseKey(key = ''){\n    key = key.trim();\n    if(think.isEmpty(key)){\n      return '';\n    }\n    if(think.isNumberString(key)){\n      return key;\n    }\n    if (!(/[,\\'\\\"\\*\\(\\)`.\\s]/.test(key))) {\n      key = '`' + key + '`';\n    }\n    return key;\n  }\n}"]}