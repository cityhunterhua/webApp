{"version":3,"sources":["../../../src/adapter/db/base.js"],"names":[],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\nimport Parse from './_parse.js';\n\n/**\n * db base class\n * @type {Class}\n */\nexport default class extends Parse {\n  /**\n   * init\n   * @return {} []\n   */\n  init(config){\n    super.init(config);\n    this.sql = '';\n    this.lastInsertId = 0;\n    this._socket = null;\n    this.transTimes = 0; //transaction times\n  }\n  /**\n   * get socket instance, override by sub class\n   * @return {Object} [socket instance]\n   */\n  socket(){}\n  /**\n   * insert data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @param  {Boolean} replace []\n   * @return {Promise}         []\n   */\n  add(data, options, replace){\n    let values = [];\n    let fields = [];\n    for(let key in data){\n      let val = data[key];\n      val = this.parseValue(val);\n      if (think.isString(val) || think.isBoolean(val) || think.isNumber(val)) {\n        values.push(val);\n        fields.push(this.parseKey(key));\n      }\n    }\n    let sql = replace ? 'REPLACE' : 'INSERT';\n    sql += ' INTO ' + this.parseTable(options.table) + ' (' + fields.join(',') + ')';\n    sql += ' VALUES (' + values.join(',') + ')';\n    sql += this.parseLock(options.lock) + this.parseComment(options.comment);\n    return this.execute(sql);\n  }\n  /**\n   * insert multi data\n   * @param  {Array} data    [data list]\n   * @param  {Object} options []\n   * @param  {Boolean} replace []\n   * @return {Promise}         []\n   */\n  addMany(data, options, replace){\n    let fields = Object.keys(data[0]).map(item => this.parseKey(item)).join(',');\n    let values = data.map(item => {\n      let value = [];\n      for(let key in item){\n        let val = item[key];\n        val = this.parseValue(val);\n        if (think.isString(val) || think.isBoolean(val) || think.isNumber(val)) {\n          value.push(val);\n        }\n      }\n      return '(' + value.join(',') + ')';\n    }).join(',');\n    let sql = replace ? 'REPLACE' : 'INSERT';\n    sql += ' INTO ' + this.parseTable(options.table) + '(' + fields + ')';\n    sql += ' VALUES ' + values;\n    sql += this.parseLock(options.lock) + this.parseComment(options.comment);\n    return this.execute(sql);\n  }\n  /**\n   * select data\n   * @param  {String} fields  []\n   * @param  {String} table   []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  selectAdd(fields, table, options = {}){\n    if (think.isString(fields)) {\n      fields = fields.split(/\\s*,\\s*/);\n    }\n    fields = fields.map(item => this.parseKey(item));\n    let sql = 'INSERT INTO ' + this.parseTable(table) + ' (' + fields.join(',') + ') ';\n    sql += this.buildSelectSql(options);\n    return this.execute(sql);\n  }\n  /**\n   * delete data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  delete(options){\n    let sql = [\n      'DELETE FROM ',\n      this.parseTable(options.table),\n      this.parseWhere(options.where),\n      this.parseOrder(options.order),\n      this.parseLimit(options.limit),\n      this.parseLock(options.lock),\n      this.parseComment(options.comment)\n    ].join('');\n    return this.execute(sql);\n  }\n  /**\n   * update data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  update(data, options){\n    let sql = [\n      'UPDATE ',\n      this.parseTable(options.table),\n      this.parseSet(data),\n      this.parseWhere(options.where),\n      this.parseOrder(options.order),\n      this.parseLimit(options.limit),\n      this.parseLock(options.lock),\n      this.parseComment(options.comment)\n    ].join('');\n    return this.execute(sql);\n  }\n  /**\n   * select\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  select(options, cache){\n    let sql;\n    if(think.isObject(options)){\n      sql = this.buildSelectSql(options);\n      cache = options.cache || cache;\n    }else{\n      sql = options;\n    }\n    if (!think.isEmpty(cache) && this.config.cache.on) {\n      let key = cache.key || think.md5(sql);\n      return think.cache(key, () => this.query(sql), cache);\n    }\n    return this.query(sql);\n  }\n  /**\n   * escape string\n   * @param  {String} str []\n   * @return {String}     []\n   */\n  escapeString(str){\n    if (!str) {\n      return '';\n    }\n    return str.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, s => {\n      switch(s) {\n        case '\\0': \n          return '\\\\0';\n        case '\\n': \n          return '\\\\n';\n        case '\\r': \n          return '\\\\r';\n        case '\\b': \n          return '\\\\b';\n        case '\\t': \n          return '\\\\t';\n        case '\\x1a': \n          return '\\\\Z';\n        default:   \n          return '\\\\' + s;\n      }\n    });\n  }\n  /**\n   * get last sql\n   * @return {String}       []\n   */\n  getLastSql(){\n    return this.sql;\n  }\n  /**\n   * get last insert id\n   * @return {String} []\n   */\n  getLastInsertId(){\n    return this.lastInsertId;\n  }\n  /**\n   * query string\n   * @param  string str\n   * @return promise\n   */\n  query(sql){\n    this.sql = sql;\n    return think.await(sql, () => {\n      return this.socket(sql).query(sql).then(data => {\n        return this.bufferToString(data);\n      });\n    });\n  }\n  /**\n   * buffer to string\n   * @param  {Array} data []\n   * @return {Array}      []\n   */\n  bufferToString(data){\n    if (!this.config.buffer_tostring || !think.isArray(data)) {\n      return data;\n    }\n    for(let i = 0, length = data.length; i < length; i++){\n      for(let key in data[i]){\n        if(think.isBuffer(data[i][key])){\n          data[i][key] = data[i][key].toString();\n        }\n      }\n    }\n    return data;\n  }\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {}     []\n   */\n  execute(sql){\n    this.sql = sql;\n    return this.socket(sql).execute(sql).then(data => {\n      if (data.insertId) {\n        this.lastInsertId = data.insertId;\n      }\n      return data.affectedRows || 0;\n    });\n  }\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n  startTrans(){\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('START TRANSACTION');\n    }\n    this.transTimes++;\n    return Promise.resolve();\n  }\n  /**\n   * commit\n   * @return {Promise} []\n   */\n  commit(){\n    if (this.transTimes > 0) {\n      this.transTimes = 0;\n      return this.execute('COMMIT');\n    }\n    return Promise.resolve();\n  }\n  /**\n   * rollback\n   * @return {Promise} []\n   */\n  rollback(){\n    if (this.transTimes > 0) {\n      this.transTimes = 0;\n      return this.execute('ROLLBACK');\n    }\n    return Promise.resolve();\n  }\n  /**\n   * close connect\n   * @return {} []\n   */\n  close(){\n    if (this._socket) {\n      this._socket.close();\n      this._socket = null;\n    }\n  }\n}"]}