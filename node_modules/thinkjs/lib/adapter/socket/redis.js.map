{"version":3,"sources":["../../../src/adapter/socket/redis.js"],"names":[],"mappings":"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","file":"redis.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * Redis socket class\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n\n    this.config = think.extend({\n      port: 6379,\n      host: '127.0.0.1',\n      password: ''\n    }, config);\n  }\n  /**\n   * connect redis\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if (this.connection) {\n      return this.connection;\n    }\n    let redis = await think.npm('redis');\n    let config = this.config;\n    let str = `redis://${config.host}:${config.port}`;\n    return think.await(str, () => {\n\n      let deferred = think.defer();\n      let connection = redis.createClient(config.port, config.host, config);\n      if (config.password) {\n        connection.auth(config.password, () => {});\n      }\n      connection.on('connect', () => {\n        this.connection = connection;\n        this.logConnect(str, 'redis');\n        deferred.resolve(connection);\n      });\n      connection.on('error', err => {\n        this.close();\n        this.logConnect(str, 'redis');\n        deferred.reject(err);\n      });\n      let err = new Error(str);\n      return think.error(deferred.promise, err);\n    });\n  }\n  /**\n   * add event\n   * @param  {String}   event    []\n   * @param  {Function} callback []\n   * @return {}            []\n   */\n  on(event, callback){\n    return this.getConnection().then(connection => {\n      connection.on(event, callback);\n    });\n  }\n  /**\n   * wrap\n   * @param  {String}    name []\n   * @param  {Array} data []\n   * @return {Promise}         []\n   */\n  async wrap(name, ...data){\n    await this.getConnection();\n    let fn = think.promisify(this.connection[name], this.connection);\n    return think.error(fn(...data));\n  }\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  get(name){\n    return this.wrap('get', name);\n  }\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {String} value   []\n   * @param {Number} timeout []\n   */\n  set(name, value, timeout = this.config.timeout){\n    let setP = [this.wrap('set', name, value)];\n    if (timeout) {\n      setP.push(this.expire(name, timeout));\n    }\n    return Promise.all(setP);\n  }\n  /**\n   * set data expire\n   * @param  {String} name    []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n  expire(name, timeout){\n    return this.wrap('expire', name, timeout);\n  }\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n  delete(name){\n    return this.wrap('del', name);\n  }\n  /**\n   * close socket connection\n   * @return {} []\n   */\n  close(){\n    if(this.connection){\n      this.connection.end();\n      this.connection = null;\n    }\n  }\n}"]}