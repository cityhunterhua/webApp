{"version":3,"sources":["../../../src/adapter/socket/sqlite.js"],"names":[],"mappings":"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","file":"sqlite.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\nimport path from 'path';\n\n/**\n * sqlite socket\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n\n    if(config.path === true){\n      config.path = ':memory:';\n    }else{\n      config.path = config.path || think.RUNTIME_PATH + path.sep + 'sqlite';\n      think.mkdir(config.path);\n      config.path += `${path.sep}${config.database}.sqlite`;\n    }\n    this.config = config;\n  }\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let sqlite = await think.npm('sqlite3');\n    if(this.config.verbose){\n      sqlite = sqlite.verbose();\n    }\n    return think.await(this.config.path, () => {\n      let deferred = think.defer();\n      let db = new sqlite.Database(this.config.path, err => {\n        this.logConnect(`sqlite://${this.config.path}`, 'sqlite');\n        \n        if(err){\n          deferred.reject(err);\n        }else {\n          this.connection = db;\n          deferred.resolve(db);\n        }\n      });\n      //set timeout\n      if(this.config.timeout){\n        db.configure('busyTimeout', this.config.timeout * 1000);\n      }\n      let err = new Error(`sqlite://${this.config.path}`);\n      return think.error(deferred.promise, err);\n    });\n  }\n  /**\n   * query sql\n   * @param  {String} sql []\n   * @return {Promise}     []\n   */\n  async execute(sql){\n    let connection = await this.getConnection();\n    let deferred = think.defer();\n    let startTime = Date.now();\n    let logSql = this.config.log_sql;\n    //can not use arrow functions in here\n    connection.run(sql, function(err) {\n      if (logSql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      if(err){\n        deferred.reject(err);\n      }else{\n        deferred.resolve({\n          insertId: this.lastID,\n          affectedRows: this.changes\n        });\n      }\n    });\n    return think.error(deferred.promise);\n  }\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {Promise}     []\n   */\n  async query(sql){\n    let connection = await this.getConnection();\n    let startTime = Date.now();\n    let fn = think.promisify(connection.all, connection);\n    let promise = fn(sql).then(data => {\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return data;\n    }).catch(err => {\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return Promise.reject(err);\n    });\n    return think.error(promise);\n  }\n}"]}