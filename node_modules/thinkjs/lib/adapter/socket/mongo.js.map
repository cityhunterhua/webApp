{"version":3,"sources":["../../../src/adapter/socket/mongo.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;mBAWE,I,iBAAK,M,EAAO;AACV,oBAAM,IAAN,YAAW,MAAX;;AAEA,SAAK,MAAL,GAAc,MAAM,MAAN,CAAa,EAAb,EAAiB;AAC7B,YAAM;AADuB,KAAjB,EAEX,MAFW,CAAd;AAGA,SAAK,MAAL,CAAY,IAAZ,GAAmB,KAAK,MAAL,CAAY,IAAZ,IAAoB,KAAvC;AACD,G;;;;;;;mBAKK,a;;;;UAIA,K,EACA,M,EACA,I,EASA,O,EAMA,O,EASA,G;;;;;mBA7BD,KAAK,U;;;;;+CACC,KAAK,U;;;;qBAEI,MAAM,GAAN,CAAU,SAAV,C;;;AAAd,mB;AACA,oB,GAAS,KAAK,M;AACd,kB,GAAO,E;;;AAEX,mBAAK,KAAL,GAAa,KAAb;;AAEA,kBAAG,KAAK,MAAL,CAAY,IAAf,EAAoB;AAClB,uBAAU,OAAO,IAAjB,SAAyB,OAAO,QAAhC;AACD;;;AAGG,qB,GAAU,E;;AACd,kBAAG,OAAO,OAAV,EAAkB;AAChB,0BAAU,MAAM,sBAAY,SAAZ,CAAsB,OAAO,OAA7B,CAAhB;AACD;;;AAGG,qB,GAAU,E;;AACd,kBAAG,MAAM,OAAN,CAAc,OAAO,IAArB,CAAH,EAA8B;AAC5B,0BAAU,OAAO,IAAP,CAAY,GAAZ,CAAgB,UAAC,IAAD,EAAO,CAAP,EAAa;AACrC,yBAAO,OAAO,GAAP,IAAc,OAAO,IAAP,CAAY,CAAZ,KAAkB,OAAO,IAAP,CAAY,CAAZ,CAAhC,CAAP;AACD,iBAFS,EAEP,IAFO,CAEF,GAFE,CAAV;AAGD,eAJD,MAIK;AACH,0BAAU,OAAO,IAAP,GAAc,GAAd,GAAoB,OAAO,IAArC;AACD;;AAEG,iB,kBAAmB,I,GAAO,O,SAAW,OAAO,Q,GAAW,O;+CAEpD,MAAM,KAAN,CAAY,GAAZ,EAAiB,YAAM;AAC5B,oBAAI,KAAK,MAAM,SAAN,CAAgB,MAAM,WAAN,CAAkB,OAAlC,EAA2C,MAAM,WAAjD,CAAT;AACA,oBAAI,UAAU,GAAG,GAAH,EAAQ,OAAK,MAAb,EAAqB,IAArB,CAA0B,sBAAc;AACpD,yBAAK,UAAL,CAAgB,GAAhB,EAAqB,SAArB;;AAEA,sBAAG,OAAO,SAAV,EAAoB;AAClB,0BAAM,MAAN,CAAa,QAAb,CAAsB,OAAO,SAA7B;AACD;AACD,yBAAK,UAAL,GAAkB,UAAlB;AACA,yBAAO,UAAP;AACD,iBARa,EAQX,KARW,CAQL,eAAO;AACd,yBAAK,UAAL,CAAgB,GAAhB,EAAqB,SAArB;AACA,yBAAO,kBAAQ,MAAR,CAAe,GAAf,CAAP;AACD,iBAXa,CAAd;AAYA,oBAAI,MAAM,IAAI,KAAJ,CAAU,GAAV,CAAV;AACA,uBAAO,MAAM,KAAN,CAAY,OAAZ,EAAqB,GAArB,CAAP;AACD,eAhBM,C","file":"mongo.js","sourcesContent":["'use strict';\n\nimport querystring from 'querystring';\nimport Base from './base.js';\n\n/**\n * mongodb socket\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config){\n    super.init(config);\n\n    this.config = think.extend({}, {\n      host: '127.0.0.1'\n    }, config);\n    this.config.port = this.config.port || 27017;\n  }\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let mongo = await think.npm('mongodb');\n    let config = this.config;\n    let auth = '';\n\n    this.mongo = mongo;\n    //connect with auth\n    if(this.config.user){\n      auth = `${config.user}:${config.password}@`;\n    }\n    // connection options\n    // http://mongodb.github.io/node-mongodb-native/2.0/tutorials/urls/\n    let options = '';\n    if(config.options){\n      options = '?' + querystring.stringify(config.options);\n    }\n\n    //many hosts\n    let hostStr = '';\n    if(think.isArray(config.host)){\n      hostStr = config.host.map((item, i) => {\n        return item + ':' + (config.port[i] || config.port[0]);\n      }).join(',');\n    }else{\n      hostStr = config.host + ':' + config.port;\n    }\n\n    let str = `mongodb://${auth}${hostStr}/${config.database}${options}`;\n\n    return think.await(str, () => {\n      let fn = think.promisify(mongo.MongoClient.connect, mongo.MongoClient);\n      let promise = fn(str, this.config).then(connection => {\n        this.logConnect(str, 'mongodb');\n        //set logger level\n        if(config.log_level){\n          mongo.Logger.setLevel(config.log_level);\n        }\n        this.connection = connection;\n        return connection;\n      }).catch(err => {\n        this.logConnect(str, 'mongodb');\n        return Promise.reject(err);\n      });\n      let err = new Error(str);\n      return think.error(promise, err);\n    });\n  }\n}"]}