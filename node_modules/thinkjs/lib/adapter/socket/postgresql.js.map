{"version":3,"sources":["../../../src/adapter/socket/postgresql.js"],"names":[],"mappings":"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","file":"postgresql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * postgres socket class\n * @return {} []\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(config){\n    super.init(config);\n\n    config.port = config.port || 5432;\n    //config.password = config.pwd;\n    //delete config.pwd;\n\n    this.config = config;\n  }\n  /**\n   * get pg\n   * @return {} []\n   */\n  async getPG(){\n    if(this.pg){\n      return this.pg;\n    }\n    let pg = await think.npm('pg');\n    //set poolSize\n    if(this.config.poolSize){\n      pg.defaults.poolSize = this.config.poolSize;\n    }\n    //set poolIdleTimeout, change default `30 seconds` to 8 hours\n    pg.defaults.poolIdleTimeout = this.config.poolIdleTimeout * 1000 || 8 * 60 * 60 * 1000;\n\n    //when has error, close connection\n    pg.on('error', () => {\n      this.close();\n    });\n    pg.on('end', () => {\n      this.close();\n    });\n    pg.on('close', () => {\n      this.close();\n    });\n    this.pg = pg;\n    return pg;\n  }\n  /**\n   * get connection\n   * @return {} []\n   */\n  async getConnection(){\n    if(this.connection){\n      return this.connection;\n    }\n    let pg = await this.getPG();\n    let config = this.config;\n    let connectionStr = `postgres://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`;\n\n    return think.await(connectionStr, () => {\n      let deferred = think.defer();\n      pg.connect(this.config, (err, client, done) => {\n        this.logConnect(connectionStr, 'postgre');\n        if(err){\n          deferred.reject(err);\n        }else{\n          this.connection = client;\n          this.release = done;\n          deferred.resolve(client);\n        }\n      });\n      return deferred.promise;\n    });\n  }\n  /**\n   * query\n   * @return {Promise} []\n   */\n  async query(sql){\n    let connection = await this.getConnection();\n    let startTime = Date.now();\n    let fn = think.promisify(connection.query, connection);\n    let promise = fn(sql).then(data => {\n      this.release();\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return data;\n    }).catch(err => {\n      this.release();\n\n      //when socket is closed, try it\n      if(err.code === 'EPIPE'){\n        this.close();\n        return this.query(sql);\n      }\n\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return Promise.reject(err);\n    });\n    return think.error(promise);\n  }\n  /**\n   * execute sql\n   * @param  {Array} args []\n   * @return {Promise}         []\n   */\n  execute(...args){\n    return this.query(...args);\n  }\n  /**\n   * close connection\n   * @return {} []\n   */\n  close(){\n    if(this.connection){\n      this.connection.end();\n      this.connection = null;\n    }\n  }\n}"]}