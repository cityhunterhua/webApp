{"version":3,"sources":["../../src/controller/rest.js"],"names":[],"mappings":"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","file":"rest.js","sourcesContent":["'use strict';\n\nimport path from 'path';\n\n/**\n * REST Base Controller\n * @return {} []\n */\nexport default class extends think.controller.base {\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http){\n    super.init(http);\n    \n    this._isRest = true;\n    this._method = '';\n\n    this.resource = this.getResource();\n    this.id = this.getId();\n    this.modelInstance = this.model(this.resource);\n  }\n  /**\n   * get resource\n   * @return {String} [resource name]\n   */\n  getResource(){\n    let filename = this.__filename || __filename;\n    let last = filename.lastIndexOf(path.sep);\n    return filename.substr(last + 1, filename.length - last - 4);\n  }\n  /**\n   * get resource id\n   * @return {String} []\n   */\n  getId(){\n    let id = this.get('id');\n    if(id && think.isString(id) || think.isNumber(id)){\n      return id;\n    }\n    let last = this.http.pathname.split('/').slice(-1)[0];\n    if(last !== this.resource){\n      return last;\n    }\n    return '';\n  }\n  /**\n   * get resource\n   * @return {Promise} []\n   */\n  async getAction(){\n    let data;\n    if (this.id) {\n      let pk = await this.modelInstance.getPk();\n      data = await this.modelInstance.where({[pk]: this.id}).find();\n      return this.success(data);\n    }\n    data = await this.modelInstance.select();\n    return this.success(data);\n  }\n  /**\n   * put resource\n   * @return {Promise} []\n   */\n  async postAction(){\n    let pk = await this.modelInstance.getPk();\n    let data = this.post();\n    delete data[pk];\n    if(think.isEmpty(data)){\n      return this.fail('data is empty');\n    }\n    let insertId = await this.modelInstance.add(data);\n    return this.success({id: insertId});\n  }\n  /**\n   * delete resource\n   * @return {Promise} []\n   */\n  async deleteAction(){\n    if (!this.id) {\n      return this.fail('params error');\n    }\n    let pk = await this.modelInstance.getPk();\n    let rows = await this.modelInstance.where({[pk]: this.id}).delete();\n    return this.success({affectedRows: rows});\n  }\n  /**\n   * update resource\n   * @return {Promise} []\n   */\n  async putAction(){\n    if (!this.id) {\n      return this.fail('params error');\n    }\n    let pk = await this.modelInstance.getPk();\n    let data = this.post();\n    delete data[pk];\n    if (think.isEmpty(data)) {\n      return this.fail('data is empty');\n    }\n    let rows = await this.modelInstance.where({[pk]: this.id}).update(data);\n    return this.success({affectedRows: rows});\n  }\n  /**\n   * call\n   * @return {Promise} []\n   */\n  __call(){\n    return this.fail(think.locale('ACTION_INVALID', this.http.action, this.http.url));\n  }\n}"]}