{"version":3,"sources":["../../src/controller/base.js"],"names":[],"mappings":"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","file":"base.js","sourcesContent":["'use strict';\n\nimport path from 'path';\n/**\n * base controller class\n * all controllers will inherits this class\n */\nexport default class extends think.http.base {\n  /**\n   * init\n   * @return {void} []\n   */\n  init(http){\n    this.http = http;\n    this._baseAssigned = false;\n  }\n  /**\n   * get client ip\n   * @return {String} []\n   */\n  ip(){\n    return this.http.ip();\n  }\n  /**\n   * init view instance\n   * @return {Object} []\n   */\n  view(){\n    return this.http.view();\n  }\n  /**\n   * get http method\n   * @return {String} []\n   */\n  method(){\n    return this.http.method.toLowerCase();\n  }\n  /**\n   * check http method\n   * @param  {String}  method [http method]\n   * @return {Boolean}        []\n   */\n  isMethod(method){\n    return this.http.method === method.toUpperCase();\n  }\n  /**\n   * check http method is get\n   * @return {Boolean} []\n   */\n  isGet(){\n    return this.http.isGet();\n  }\n  /**\n   * check http method is post\n   * @return {Boolean} []\n   */\n  isPost(){\n    return this.http.isPost();\n  }\n  /**\n   * check is ajax request\n   * @param  {String}  method [http method]\n   * @return {Boolean}        []\n   */\n  isAjax(method) {\n    return this.http.isAjax(method);\n  }\n  /**\n   * check is websocket request\n   * @return {Boolean} []\n   */\n  isWebSocket(){\n    return !!this.http.socket;\n  }\n  /**\n   * check is command line invoke\n   * @return {Boolean} []\n   */\n  isCli(){\n    return this.http.isCli();\n  }\n  /**\n   * check is jsonp\n   * @param  {String}  name [callback name]\n   * @return {Boolean}      []\n   */\n  isJsonp(name){\n    return this.http.isJsonp(name);\n  }\n  /**\n   * get get params\n   * @param  {String} name [query name]\n   * @return {String}      []\n   */\n  get(name, value){\n    return this.http.get(name, value);\n  }\n  /**\n   * get post params\n   * @param  {String} name [query name]\n   * @return {String}      []\n   */\n  post(name, value) {\n    return this.http.post(name, value);\n  }\n  /**\n   * get post or get params\n   * @param  {String} name []\n   * @return {String}      []\n   */\n  param(name) {\n    return this.http.param(name);\n  }\n  /**\n   * get upload files\n   * @param  {String} name []\n   * @return {Object}      []\n   */\n  file(name, value) {\n    return this.http.file(name, value);\n  }\n  /**\n   * get or set header\n   * @param  {String} name  [header name]\n   * @param  {String} value [header value]\n   * @return {}       []\n   */\n  header(name, value) {\n    return this.http.header(name, value);\n  }\n  /**\n   * get user agent\n   * @return {String} []\n   */\n  userAgent(){\n    return this.http.userAgent();\n  }\n  /**\n   * get page referer\n   * @param  {String} host [only get referer host]\n   * @return {String}      []\n   */\n  referrer(onlyHost){\n    return this.http.referrer(onlyHost);\n  }\n  /**\n   * get page referer\n   * @param  {String} host [only get referer host]\n   * @return {String}      []\n   */\n  referer(onlyHost){\n    return this.http.referrer(onlyHost);\n  }\n  /**\n   * get or set cookie\n   * @param  {String} name    [cookie name]\n   * @param  {String} value   [cookie value]\n   * @param  {Object} options [cookie options]\n   * @return {}         []\n   */\n  cookie(name, value, options) {\n    return this.http.cookie(name, value, options);\n  }\n  /**\n   * get or set session\n   * @param  {String} name  [session name]\n   * @param  {mixed} value [session value]\n   * @return {Promise}       []\n   */\n  session(name, value) {\n    return this.http.session(name, value);\n  }\n  /**\n   * get language\n   * @param  {Boolean} useCookie [get from cookie set]\n   * @return {String}           []\n   */\n  lang(lang, asViewPath){\n    return this.http.lang(lang, asViewPath);\n  }\n  /**\n   * get locale value\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  locale(key, ...data){\n    return this.http.locale(key, ...data);\n  }\n  /**\n   * redirect\n   * @param  {String} url  [redirect url]\n   * @param  {Number} code [301 or 302]\n   * @return {promise}      [pedding promise]\n   */\n  redirect(url, code) {\n    this.http.redirect(url, code);\n    return think.prevent();\n  }\n  /**\n   * assign value to template\n   * @param  {String} name  [template name]\n   * @param  {mixed} value []\n   * @return {}       []\n   */\n  assign(name, value) {\n    this._baseAssign();\n    return this.view().assign(name, value);\n  }\n  /**\n   * base assign\n   * @return {} []\n   */\n  _baseAssign(){\n    if(this._baseAssigned){\n      return;\n    }\n    this._baseAssigned = true;\n    this.view().assign({\n      controller: this,\n      http: this.http,\n      config: this.http._config,\n      _: this.locale.bind(this)\n    });\n  }\n  /**\n   * fetch template content\n   * @param  {String} templateFile [template filepath]\n   * @return {promise}              []\n   */\n  fetch(templateFile, data, config) {\n    this._baseAssign();\n    return this.view().fetch(templateFile, data, config);\n  }\n  /**\n   * display template\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n  display(templateFile, charset, contentType) {\n    this._baseAssign();\n    return this.view().display(templateFile, charset, contentType);\n  }\n  /**\n   * alias of display\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n  render(templateFile, charset, contentType){\n    return this.display(templateFile, charset, contentType);\n  }\n  /**\n   * output with jsonp\n   * @param  {Object} data [output data]\n   * @return {}      []\n   */\n  jsonp(data) {\n    this.http.jsonp(data);\n    return think.prevent();\n  }\n  /**\n   * output with json\n   * @param  {Object} data [output data]\n   * @return {Promise}      []\n   */\n  json(data){\n    this.http.json(data);\n    return think.prevent();\n  }\n  /**\n   * set http status code\n   * @param  {Number} status [status code]\n   * @return {}        []\n   */\n  status(status = 404) {\n    this.http.status(status);\n    return this;\n  }\n  /**\n   * deny request\n   * @param  {Number} status [status code]\n   * @return {[type]}        []\n   */\n  deny(status = 403){\n    this.status(status);\n    this.http.end();\n    return think.prevent();\n  }\n  /**\n   * set cache-control and expires header\n   * @param  {Number} time []\n   * @return {}      []\n   */\n  expires(time){\n    this.http.expires(time);\n    return this;\n  }\n  /**\n   * write content\n   * @param  {mixed} obj      []\n   * @param  {String} encoding [content encoding]\n   * @return {}          []\n   */\n  write(obj, encoding) {\n    return this.http.write(obj, encoding);\n  }\n  /**\n   * end output\n   * @param  {Object} obj      []\n   * @param  {String} encoding [content encoding]\n   * @return {}          []\n   */\n  end(obj, encoding) {\n    this.http.end(obj, encoding);\n    return think.prevent();\n  }\n  /**\n   * send content\n   * @param  {Mixed} obj      []\n   * @param  {String} encoding []\n   * @return {Promise}          []\n   */\n  send(obj, encoding){\n    return this.end(obj, encoding);\n  }\n  /**\n   * get or set content type\n   * @param  {String} ext [content type]\n   * @return {}     []\n   */\n  type(ext, encoding){\n    return this.http.type(ext, encoding);\n  }\n  /**\n   * download file\n   * @param  {String} file        [filepath]\n   * @param  {String} contentType [content type]\n   * @param  {String} filename    [download filename]\n   * @return {Promise}             []\n   */\n  download(filepath, contentType, filename) {\n    if (think.isString(contentType) && contentType.indexOf('.') > -1) {\n      filename = contentType;\n      contentType = '';\n    }\n    if (!contentType || contentType.indexOf('/') === -1) {\n      contentType = require('mime').lookup(contentType || filepath);\n    }\n    this.type(contentType, false);\n\n    this.header('Content-Disposition', 'attachment; filename=\"' + (filename || path.basename(filepath)) + '\"');\n    return think.middleware('output_resource', this.http, filepath);\n  }\n  /**\n   * output with success errno & errmsg\n   * @param  {Object} data    [output data]\n   * @param  {String} message [errmsg]\n   * @return {Promise}         [pedding promise]\n   */\n  success(data, message){\n    this.http.success(data, message);\n    return think.prevent();\n  }\n  /**\n   * output with fail errno & errmsg\n   * @param  {Number} errno  [error number]\n   * @param  {String} errmsg [error message]\n   * @param  {Object} data   [output data]\n   * @return {Promise}        [pedding promise]\n   */\n  fail(errno, errmsg, data){\n    this.http.fail(errno, errmsg, data);\n    return think.prevent();\n  }\n  /**\n   * alias for fail\n   * @param  {} args []\n   * @return {Promise}         []\n   */\n  error(...args){\n    return this.fail(...args);\n  }\n  /**\n   * send exec time\n   * @param  {String} name [header name]\n   * @return {}      []\n   */\n  sendTime(name){\n    return this.http.sendTime(name);\n  }\n  /**\n   * emit socket data\n   * @param  {String} event []\n   * @param  {Miex} data  []\n   * @return {}       []\n   */\n  emit(event, data){\n    if(!this.http.socket){\n      throw new Error('emit method can only used in websocket request');\n    }\n    return this.http.socketEmit(event, data);\n  }\n  /**\n   * broadcast socket data\n   * @param  {String} event       []\n   * @param  {Mixed} data        []\n   * @param  {Boolean} containSelf []\n   * @return {}             []\n   */\n  broadcast(event, data, containSelf){\n    if(!this.http.socket){\n      throw new Error('broadcast method can only used in websocket request');\n    }\n    return this.http.socketBroadcast(event, data, containSelf);\n  }\n}"]}