{"version":3,"sources":["../../src/core/http_base.js"],"names":[],"mappings":"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","file":"http_base.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\n/**\n * Base Class\n * @param  {Object} http\n * @return {Class}\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http = {}){\n    this.http = http;\n  }\n  /**\n   * get or set config\n   * @param  {string} name  [config name]\n   * @param  {mixed} value [config value]\n   * @return {mixed}       []\n   */\n  config(name, value){\n    let module = this.parseModuleFromPath();\n    if(module){\n      return think.config(name, value, module);\n    }\n    return think.config(name, value, this.http._config);\n  }\n  /**\n   * change module/controller/action when invoked action\n   * @param  {Object} controller []\n   * @param  {String} action     []\n   * @return {Promise}            []\n   */\n  async _transMCAAction(controller, action){\n    //change module/controller/action when invoke another action\n    //make this.display() correct when invoked without any paramters\n    let http = this.http;\n    let source = {\n      module: http.module,\n      controller: http.controller,\n      action: http.action\n    };\n    //parse module from pathname\n    http.module = think.config('default_module');\n    if(think.mode === think.mode_module){\n      http.module = controller.__filename.split(think.sep).reverse()[2];\n    }\n\n    http.controller = this.basename(controller.__filename);\n    http.action = action;\n    if (action !== '__call') {\n      action = think.camelCase(action) + 'Action';\n    }\n    let err;\n    let result = await controller.invoke(action, controller).catch(e => {\n      err = e;\n    });\n    think.extend(http, source);\n    return err ? Promise.reject(err) : result;\n  }\n  /**\n   * invoke action\n   * @param  {Object} controller [controller instance]\n   * @param  {String} action     [action name]\n   * @param  {Mixed} data       [action params]\n   * @return {}            []\n   */\n  action(controller, action, transMCA = true){\n    if (think.isString(controller)) {\n      controller = this.controller(controller);\n    }\n    if(!transMCA){\n      if (action !== '__call') {\n        action = think.camelCase(action) + 'Action';\n      }\n      return controller.invoke(action, controller);\n    }\n    return this._transMCAAction(controller, action);\n  }\n  /**\n   * get or set cache\n   * @param  {String} name    [cache name]\n   * @param  {mixed} value   [cache value]\n   * @param  {Object} options [cache options]\n   * @return {}         []\n   */\n  cache(name, value, options){\n    if(think.isString(options)){\n      options = {type: options};\n    }\n    options = think.extend({}, this.config('cache'), options);\n    return think.cache(name, value, options);\n  }\n  /**\n   * invoke hook\n   * @param  {String} event [event name]\n   * @return {Promise}       []\n   */\n  hook(event, data){\n    return think.hook.exec(event, this.http, data);\n  }\n  /**\n   * get module\n   * @param  {String} module []\n   * @return {String}        []\n   */\n  _getModule(module){\n    if(module){\n      if(!think.isString(module)){\n        throw new Error('module argument must be string');\n      }\n      if(think.module.indexOf(module) === -1){\n        throw new Error('module `' + module + '` not exist');\n      }\n    }else{\n      module = this.parseModuleFromPath() || this.http.module;\n    }\n    return module;\n  }\n  /**\n   * get model\n   * @param  {String} name    [model name]\n   * @param  {Object} options [model options]\n   * @return {Object}         [model instance]\n   */\n  model(name = 'base', options, module){\n    if(think.isString(options)){\n      options = {type: options};\n    }\n    module = this._getModule(module);\n    options = think.extend({}, think.config('db', undefined, module), options);\n    return think.model(name, options, module);\n  }\n  /**\n   * get controller\n   * this.controller('home/controller/test')\n   * @param  {String} name [controller name]\n   * @return {Object}      []\n   */\n  controller(name, module){\n    module = this._getModule(module);\n    let Cls = think.lookClass(name, 'controller', module);\n    return new Cls(this.http);\n  }\n  /**\n   * get service\n   * @param  {String} name [service name]\n   * @return {Object}      []\n   */\n  service(name, module){\n    module = this._getModule(module);\n    return think.service(name, this.http, module);\n  }\n}"]}