{"version":3,"sources":["../../src/core/think_config.js"],"names":[],"mappings":"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","file":"think_config.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\n\n\n/**\n * get item config\n * @param  {} configPath []\n * @param  {} item       []\n * @return {}            []\n */\nlet _getItemConfig = (configPath, item) => {\n  let fileFilters = ['config', 'route', 'hook'];\n  let dirFilters = ['env', 'sys'];\n  if(think.isDir(`${configPath}/${item}`)){\n    if(dirFilters.indexOf(item) === -1){\n      return {\n        [item]: _getConfig(`${configPath}/${item}`)\n      };\n    }\n    return;\n  }\n  item = item.slice(0, -3);\n  if(item[0] === '_' || fileFilters.indexOf(item) > -1){\n    return;\n  }\n  let conf = think.safeRequire(`${configPath}/${item}.js`);\n  if(conf){\n    return {[item]: conf};\n  }\n};\n\n/**\n * get module config\n * @param  {String} module []\n * @return {Object}        []\n */\nlet _getConfig = configPath => {\n  let config = {};\n  if(!think.isDir(configPath)){\n    return config;\n  }\n  fs.readdirSync(configPath).forEach(item => {\n    let data = _getItemConfig(configPath, item);\n    config = think.extend(config, data);\n  });\n  return config;\n};\n\n/**\n * transform config\n * @param  {Object} config []\n * @return {Object}        []\n */\nlet _transformConfig = (config, transforms) => {\n  for(let key in transforms){\n    if (!(key in config)) {\n      continue;\n    }\n    let value = transforms[key];\n    if (think.isFunction(value)) {\n      config[key] = value(config[key], config);\n    }else {\n      config[key] = _transformConfig(config[key], value);\n    }\n  }\n  return config;\n};\n\nlet _getModuleConfig = (module = think.dirname.common) => {\n\n  //get module config from cache\n  let moduleConfig = thinkData.config;\n  if (moduleConfig[module]) {\n    return moduleConfig[module];\n  }\n\n  let rootPath;\n  //get sys config\n  if (module === true) {\n    rootPath = `${think.THINK_LIB_PATH}/config`;\n  }else{\n    rootPath = think.getPath(module, think.dirname.config);\n  }\n\n  //config.js\n  let config = think.safeRequire(`${rootPath}/config.js`);\n  let envConfig = {}, extraConfig = _getConfig(rootPath);\n\n  envConfig = think.safeRequire(`${rootPath}/env/${think.env}.js`);\n  envConfig = think.extend(envConfig, _getConfig(`${rootPath}/env/${think.env}`));\n\n  //merge all configs\n  config = think.extend({}, config, extraConfig, envConfig);\n  //merge sys, common configs to module\n  if(module !== true){\n    if(module === think.dirname.common){\n      config = think.extend({}, _getModuleConfig(true), config);\n    }else{\n      config = think.extend({}, _getModuleConfig(), config);\n    }\n  }\n  //transform config\n  let transforms = think.safeRequire(`${think.THINK_LIB_PATH}/config/sys/transform.js`);\n  config = _transformConfig(config, transforms);\n\n  if(module !== true){\n    thinkData.config[module] = config;\n  }\n\n  return config;\n};\n\n\n/**\n * get or set config\n * @return {mixed} []\n */\n//if set common config, must sync to module config\nlet _setConfig = (name, value, flag, data) => {\n  let configs = [];\n  if(flag){\n    configs = think.module.map(item => _getModuleConfig(item));\n  }\n  [data, ...configs].forEach(itemData => {\n    if(think.isObject(name)){\n      think.extend(itemData, name);\n    }\n    else if(think.isString(name)){\n      //name = name.toLowerCase();\n      if (name.indexOf('.') === -1) {\n        itemData[name] = value;\n      }else{\n        let names = name.split('.');\n        itemData[names[0]] = itemData[names[0]] || {};\n        itemData[names[0]][names[1]] = value;\n      }\n    }\n\n  });\n};\n\nlet Config = (name, value, data) => {\n  let flag = !data;\n\n  //convert data to undefined when is null (in http._config)\n  if(data === null) {\n    data = undefined;\n  }\n  //get data from module config\n  if(!think.isObject(data)){\n    data = _getModuleConfig(data);\n  }\n  // get all config\n  if (name === undefined) {\n    return data;\n  }\n  // merge config\n  if (think.isObject(name) || value !== undefined) {\n    return _setConfig(name, value, flag, data);\n  }\n  //get config\n  if (name.indexOf('.') === -1) {\n    return data[name];\n  }\n  name = name.split('.');\n  value = data[name[0]] || {};\n  return value[name[1]];\n};\n\nexport default Config;"]}