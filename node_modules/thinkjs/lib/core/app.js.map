{"version":3,"sources":["../../src/core/app.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["'use strict';\n\nimport cluster from 'cluster';\nimport domain from 'domain';\nimport os from 'os';\nimport http from 'http';\n\nexport default class extends think.http.base {\n  /**\n   * invoke logic\n   * @return {} []\n   */\n  invokeLogic(){\n    if(!think.config('logic_on')){\n      return;\n    }\n\n    return this.hook('logic_before').then(() => {\n      return this.execLogic();\n    }).catch(err => {\n      //ignore prevent reject promise\n      //make logic_after hook can be invoked\n      if(!think.isPrevent(err)){\n        return Promise.reject(err);\n      }\n    }).then(() => {\n      return this.hook('logic_after');\n    }).then(() => {\n      //http is end\n      if (this.http._isEnd) {\n        return think.prevent();\n      }\n    });\n  }\n  /**\n   * exec logic\n   * @return {Promise} []\n   */\n  execLogic(){\n    let name = `${this.http.module}/${think.dirname.logic}/${this.http.controller}`;\n    let cls = think.require(name, true);\n    if (!cls) {\n      return Promise.resolve();\n    }\n    let instance = new cls(this.http);\n    let action = think.camelCase(this.http.action);\n    if (instance[`${action}Action`]) {\n      return this.action(instance, action, false);\n    }\n    //call action\n    if (instance.__call) {\n      return this.action(instance, '__call', false);\n    }\n    //only has before method\n    if(instance.__before){\n      return think.co(instance.__before(instance));\n    }\n    return Promise.resolve();\n  }\n  /**\n   * invoke controller\n   * @return {} []\n   */\n  invokeController(controller){\n    return this.hook('controller_before').then(() => {\n      return this.execController(controller);\n    }).catch(err => {\n      //ignore prevent reject promise\n      //make controller_after & response_end hook can be invoked\n      if(!think.isPrevent(err)){\n        return Promise.reject(err);\n      }\n    }).then(() => {\n      return this.hook('controller_after');\n    });\n  }\n  /**\n   * get controller instance\n   * @return {} []\n   */\n  getControllerInstance(){\n    let http = this.http;\n    let name = `${http.module}/${think.dirname.controller}/${http.controller}`;\n    let Controller = think.require(name, true);\n    if (!Controller) {\n      return;\n    }\n    let instance = new Controller(http);\n    //rewrite action when controller is rest\n    if(instance._isRest){\n      let method = instance._method;\n      //get method from GET params\n      if(method){\n        method = instance.get(method).toLowerCase();\n      }\n      if(!method){\n        method = this.http.method.toLowerCase();\n      }\n      this.http.action = method;\n    }\n    return instance;\n  }\n  /**\n   * exec controller\n   * @return {Promise} []\n   */\n  execController(controller){\n    if (controller) {\n      return this.execAction(controller);\n    }\n    let http = this.http;\n    http.error = new Error(think.locale('CONTROLLER_NOT_FOUND', http.controller, http.url));\n    return think.statusAction(404, http);\n  }\n  /**\n   * exec action\n   * @param  {Object} controller [controller instance]\n   * @param  {Boolean} call       [is call controller]\n   * @return {Promise}            []\n   */\n  execAction(controller){\n    let http = this.http;\n    let action = think.camelCase(http.action);\n    let actionWithSuffix = `${action}Action`;\n    //action is exist\n    if(controller[actionWithSuffix]){\n      return this.action(controller, action, false);\n    }\n    //call action\n    if(controller.__call){\n      return this.action(controller, '__call', false);\n    }\n    http.error = new Error(think.locale('ACTION_NOT_FOUND', actionWithSuffix, http.url));\n    return think.statusAction(404, http);\n  }\n\n  /**\n   * exec \n   * @return {Promise} []\n   */\n  async exec(){\n    await this.hook('resource');\n    await this.hook('route_parse');\n\n    //set module config, can not set config in request\n    this.http._config = thinkData.config[this.http.module];\n    //console.log(eval('%HasFastProperties(this.http._config)'));\n\n    //babel compile error\n    if(think.compileError){\n      this.http.error = think.compileError;\n      return think.statusAction(500, this.http);\n    }\n    //must get controller before invoke logic\n    let controller = this.getControllerInstance();\n\n    await this.invokeLogic();\n    await this.invokeController(controller);\n    await this.hook('response_end');\n  }\n  /**\n   * exec error\n   * @param  {Error} err []\n   * @return {}     []\n   */\n  execError(err){\n    let http = this.http;\n    http.error = err;\n    return think.statusAction(500, http, true).catch(() => {});\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    http.header('X-Powered-By', `thinkjs-${think.version}`);\n    \n    if(think.config('domain_on')){\n      let instance = domain.create();\n      instance.on('error', err => {\n        this.execError(err);\n      });\n      instance.run(() => {\n        this.exec().catch(err => {\n          this.execError(err);\n        });\n      });\n    }else{\n      this.exec().catch(err => {\n        this.execError(err);\n      });\n    }\n  }\n  /**\n   * create server\n   * @return {} []\n   */\n  static createServer(){\n    let handle = think.config('create_server');\n    let host = think.config('host');\n    let port = think.port || think.config('port'); \n    //createServer callback\n    let callback = (req, res) => {\n      think.http(req, res).then(http => {\n        new this(http).run();\n      });\n    };\n    let server;\n    //define createServer in application\n    if (handle) {\n      server = handle(callback, port, host, this);\n    }else{\n      //create server\n      server = http.createServer(callback);\n      server.listen(port, host);\n    }\n    think.server = server;\n    //start websocket\n    let websocket = think.parseConfig(think.config('websocket'));\n    if(websocket.on){\n      let Cls = think.adapter('websocket', websocket.type);\n      let instance = new Cls(server, websocket, this);\n      instance.run();\n    }\n  }\n  /**\n   * log\n   * @return {} []\n   */\n  static log(){\n    let host = think.config('host');\n    let port = think.port || think.config('port'); \n    let websocketStatus = think.config('websocket.on') ? 'open' : 'closed';\n    let clusterStatus = think.config('cluster_on') ? 'open' : 'closed';\n\n    let url = `http://${(host || '127.0.0.1')}:${port}/`;\n    think.log(colors => `Server running at ${colors.green(url)}`, 'THINK');\n    think.log(colors => `ThinkJS Version: ${colors.magenta(think.version)}`, 'THINK');\n    think.log(colors => `Cluster Status: ${colors.magenta(clusterStatus)}`, 'THINK');\n    think.log(colors => `WebSocket Status: ${colors.magenta(websocketStatus)}`, 'THINK');\n    think.log(colors => `File Auto Compile: ${colors.magenta(!!think.autoCompile)}`, 'THINK');\n    think.log(colors => `File Auto Reload: ${colors.magenta(think.config('auto_reload'))}`, 'THINK');\n    think.log(colors => `App Enviroment: ${colors.magenta(think.env)}\\n`, 'THINK');\n  }\n  /**\n   * cli mode\n   * @return {} []\n   */\n  static async cli(){\n    let http = await think.http(think.cli);\n    return new this(http).run();\n  }\n  /**\n   * http mode\n   * @return {} []\n   */\n  static http(){\n    let nums = think.config('cluster_on');\n    if (!nums) {\n      this.createServer();\n      return this.log();\n    }\n    if (nums === true) {\n      nums = os.cpus().length;\n    }\n    if (cluster.isMaster) {\n      for (let i = 0; i < nums; i++) {\n        cluster.fork();\n      }\n      cluster.on('exit', worker => {\n        think.log(new Error(think.locale('WORKER_DIED', worker.process.pid)), 'THINK');\n        process.nextTick(() => cluster.fork());\n      });\n      this.log();\n    }else {\n      this.createServer();\n    }\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  static run(){\n    if (think.cli) {\n      return this.cli();\n    }\n    return this.http();\n  }\n}\n"]}