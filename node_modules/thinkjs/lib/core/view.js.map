{"version":3,"sources":["../../src/core/view.js"],"names":[],"mappings":"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","file":"view.js","sourcesContent":["'use strict';\n\nimport path from 'path';\n\n/**\n * view class\n * @return {} []\n */\nexport default class extends think.http.base {\n  /**\n   * init method\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http){\n    super.init(http);\n    this.tVar = {};\n  }\n  /**\n   * assign\n   * @param  {String} name  []\n   * @param  {mixed} value []\n   * @return {}       []\n   */\n  assign(name, value){\n    if (name === undefined) {\n      return this.tVar;\n    }else if (value === undefined) {\n      if (think.isString(name)) {\n        return this.tVar[name];\n      }else{\n        for(let key in name){\n          this.tVar[key] = name[key];\n        }\n      }\n    }else{\n      this.tVar[name] = value;\n    }\n  }\n  /**\n   * output template file\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n  async display(templateFile, charset, contentType, config){\n    if(think.isObject(charset)){\n      config = charset;\n      charset = '';\n    }else if(think.isObject(contentType)){\n      config = contentType;\n      contentType = '';\n    }\n    try{\n      await this.hook('view_before');\n      let content = await this.fetch(templateFile, undefined, config);\n      await this.render(content, charset, contentType);\n      await this.hook('view_after', content);\n    }catch(err){\n      this.http.error = err;\n      await think.statusAction(500, this.http, true);\n    }\n    return think.prevent();\n  }\n  /**\n   * render template content\n   * @param  {String} content     [template content]\n   * @param  {String} charset     [charset]\n   * @param  {String} contentType [contentType]\n   * @return {}             []\n   */\n  render(content = '', charset = this.http.config('encoding'), contentType = this.http.config('view.content_type')){\n    this.http.type(contentType, charset);\n    return this.http.end(content, charset);\n  }\n  /**\n   * check template filepath exist\n   * @param  {String} templateFile [template filepath]\n   * @param  {Boolean} inView       []\n   * @return {Promise}              []\n   */\n  checkTemplateExist(templateFile){\n    let cacheData = thinkData.template;\n    if (templateFile in cacheData) {\n      return true;\n    }\n    if (think.isFile(templateFile)) {\n      //add template file to cache\n      cacheData[templateFile] = true;\n      return true;\n    }\n    return false;\n  }\n  /**\n   * fetch template file content\n   * @param  {String} templateFile [template file]\n   * @return {Promise}             []\n   */\n  async fetch(templateFile, data, config){\n    let tVar = data && think.isObject(data) ? data : this.tVar;\n    config = think.extend({\n      templateFile: templateFile\n    }, this.config('view'), config);\n\n    if (!templateFile || !path.isAbsolute(templateFile)) {\n      templateFile = await this.hook('view_template', config);\n    }\n\n    if(!this.checkTemplateExist(templateFile)){\n      let err = new Error(think.locale('TEMPLATE_NOT_EXIST', templateFile));\n      return think.reject(err);\n    }\n    \n    let promises = Object.keys(tVar).map((key) => {\n      if (!think.isPromise(tVar[key])) {\n        return;\n      }\n      return tVar[key].then((data) => {\n        tVar[key] = data;\n      });\n    });\n    await Promise.all(promises);\n\n    const data4ViewParse = {\n      'var': tVar,\n      'file': templateFile,\n      'config': config\n    };\n    let content = await this.hook('view_parse', data4ViewParse);\n    if (data4ViewParse === content) {\n      content = '';\n    }\n\n    return this.hook('view_filter', content);\n  }\n}"]}