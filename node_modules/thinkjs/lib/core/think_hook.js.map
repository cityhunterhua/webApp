{"version":3,"sources":["../../src/core/think_hook.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAQA,IAAI,OAAO,SAAP,IAAO,GAAa;AAAA,oCAAT,IAAS;AAAT,QAAS;AAAA;;AAAA,MACjB,IADiB,GACG,IADH;AAAA,MACX,IADW,GACG,IADH;AAAA,MACL,IADK,GACG,IADH;;;AAGtB,MAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,UAAU,IAAV,CAAe,IAAf,KAAwB,EAA/B;AACD;;AAED,MAAG,SAAS,IAAZ,EAAiB;AACf,cAAU,IAAV,CAAe,IAAf,IAAuB,EAAvB;AACA;AACD;;;AAGD,MAAG,MAAM,OAAN,CAAc,IAAd,KAAuB,CAAC,MAAM,MAAN,CAAa,IAAb,CAA3B,EAA8C;AAC5C,WAAO,KAAK,GAAL,CAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,CAAP;AACD;;AAED,SAAO,KAAK,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAP;AACD,CAlBD;;;;;;AAwBA,KAAK,GAAL,GAAW,UAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAuB;;AAEhC,MAAG,MAAM,UAAN,CAAiB,KAAjB,CAAH,EAA2B;AACzB,QAAI,QAAQ,gBAAgB,MAAM,IAAN,EAA5B;AACA,UAAM,UAAN,CAAiB,KAAjB,EAAwB,KAAxB;AACA,YAAQ,CAAC,KAAD,CAAR;AACD,GAJD,MAKK,IAAG,CAAC,MAAM,OAAN,CAAc,KAAd,CAAJ,EAAyB;AAC5B,YAAQ,CAAC,KAAD,CAAR;AACD,GAFI,MAGD;AACF,QAAI,QAAQ,MAAM,CAAN,CAAZ;AACA,QAAG,UAAU,QAAV,IAAsB,UAAU,SAAnC,EAA6C;AAC3C,aAAO,MAAM,KAAN,EAAP;AACD;AACF;AACD,MAAI,WAAW,UAAU,IAAV,CAAe,IAAf,KAAwB,EAAvC;AACA,MAAG,SAAS,QAAZ,EAAqB;AACnB,eAAW,SAAS,MAAT,CAAgB,KAAhB,CAAX;AACD,GAFD,MAEM,IAAG,SAAS,SAAZ,EAAsB;AAC1B,eAAW,MAAM,MAAN,CAAa,QAAb,CAAX;AACD,GAFK,MAED;AACH,eAAW,KAAX;AACD;AACD,YAAU,IAAV,CAAe,IAAf,IAAuB,QAAvB;AACD,CAzBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,IAAI,sBAAsB,SAAtB,mBAAsB,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,IAApB,EAA6B;AACrD,MAAI,OAAO,KAAK,KAAL,CAAX;AACA,MAAG,CAAC,IAAJ,EAAS;AACP,WAAO,IAAP;AACD;AACD,SAAO,MAAM,UAAN,CAAiB,IAAjB,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,CAA6C,kBAAU;AAC5D,QAAG,WAAW,IAAd,EAAmB;AACjB,aAAO,IAAP;AACD,KAFD,MAEM,IAAG,WAAW,SAAd,EAAwB;AAC5B,aAAO,MAAP;AACD;AACD,WAAO,oBAAoB,IAApB,EAA0B,QAAQ,CAAlC,EAAqC,IAArC,EAA2C,IAA3C,CAAP;AACD,GAPM,CAAP;AAQD,CAbD;;AAeA,KAAK,IAAL,GAAY,UAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAsB;;AAEhC,MAAI,OAAO,UAAU,IAAV,CAAe,IAAf,CAAX;AACA,MAAI,CAAC,IAAD,IAAS,KAAK,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,WAAO,kBAAQ,OAAR,CAAgB,IAAhB,CAAP;AACD;AACD,SAAO,oBAAoB,IAApB,EAA0B,CAA1B,EAA6B,IAA7B,EAAmC,IAAnC,CAAP;AACD,CAPD;;kBASe,I","file":"think_hook.js","sourcesContent":["'use strict';\n\n\n/**\n * regitster or exec hook\n * @param  {String} name []\n * @return {}      []\n */\nlet Hook = (...args) => {\n  let [name, http, data] = args;\n  //get hook data\n  if (args.length === 1) {\n    return thinkData.hook[name] || [];\n  }\n  //remove hook\n  if(http === null){\n    thinkData.hook[name] = [];\n    return;\n  }\n  // set hook data\n  // think.hook('test', ['middleware1', 'middleware2'])\n  if(think.isArray(http) || !think.isHttp(http)){\n    return Hook.set(name, http, data);\n  }\n  //exec hook\n  return Hook.exec(name, http, data);\n};\n\n/**\n * set hook\n * @return {} []\n */\nHook.set = (name, hooks, flag) => {\n  //think.hook.set('test', function or class)\n  if(think.isFunction(hooks)){\n    let mname = 'middleware_' + think.uuid();\n    think.middleware(mname, hooks);\n    hooks = [mname];\n  }\n  else if(!think.isArray(hooks)){\n    hooks = [hooks];\n  }\n  else{\n    let first = hooks[0];\n    if(first === 'append' || first === 'prepend'){\n      flag = hooks.shift();\n    }\n  }\n  let oriHooks = thinkData.hook[name] || [];\n  if(flag === 'append'){\n    oriHooks = oriHooks.concat(hooks);\n  }else if(flag === 'prepend'){\n    oriHooks = hooks.concat(oriHooks);\n  }else{\n    oriHooks = hooks;\n  }\n  thinkData.hook[name] = oriHooks;\n};\n\n/**\n * exec hook\n * @param  {String} name [hook name]\n * @param  {Object} http []\n * @param  {Mixed} data []\n * @return {Promise}      []\n */\n// think.hook.exec = async (name, http, data) => {\n//   //exec hook \n//   let list = thinkData.hook[name];\n//   if (!list || list.length === 0) {\n//     return Promise.resolve(data);\n//   }\n\n//   let length = list.length;\n//   for(let i = 0; i < length; i++){\n//     let result = await think.middleware.exec(list[i], http, data);\n//     //prevent next middlewares invoked in hook\n//     if(result === null){\n//       break;\n//     }else if (result !== undefined) {\n//       data = result;\n//     }\n//   }\n//   return data;\n// };\n\nlet _execItemMiddleware = (list, index, http, data) => {\n  let item = list[index];\n  if(!item){\n    return data;\n  }\n  return think.middleware.exec(item, http, data).then(result => {\n    if(result === null){\n      return data;\n    }else if(result !== undefined){\n      data = result;\n    }\n    return _execItemMiddleware(list, index + 1, http, data);\n  });\n};\n\nHook.exec = (name, http, data) => {\n  //exec hook \n  let list = thinkData.hook[name];\n  if (!list || list.length === 0) {\n    return Promise.resolve(data);\n  }\n  return _execItemMiddleware(list, 0, http, data);\n};\n\nexport default Hook;"]}