{"version":3,"sources":["../../src/core/think_validate.js"],"names":[],"mappings":"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","file":"think_validate.js","sourcesContent":["'use strict';\n\nimport Validator from '../util/validator.js';\n\n/**\n * validate data\n * {\n *   name: {\n *     value: 'test',\n *     required: true,\n *     length: [4, 20],\n *     email: true\n *   },\n *   pwd: {\n *     value: '12345678',\n *     required: true,\n *     length: [6, 20]\n *   }\n *   confirm_pwd: {\n *     value: '12345678',\n *     required: true,\n *     equals: 'pwd'\n *   }\n * }\n * @param  {String | Object}   name     []\n * @param  {Function} callback []\n * @return {}            []\n */\n\n//get error message\nlet _getValidateErrorMsg = (type, name, value, args, msgs) => {\n  let key = `validate_${type}`;\n  let keyWithName = `${key}_${name}`;\n  let msg = msgs[keyWithName];\n  if(!msg && think.locale(keyWithName) !== keyWithName){\n    msg = think.locale(keyWithName);\n  }\n  msg = msg || msgs[key];\n  if(!msg && think.locale(key) !== key){\n    msg = think.locale(key);\n  }\n  msg = msg || think.locale('PARAMS_NOT_VALID');\n  return msg.replace('{name}', name).replace('{value}', value).replace('{args}', args.join(','));\n};\n\nlet _getValidateRuleFnAndArgs = (type, args, rules) => {\n  let fn = Validator[type];\n  if (!think.isFunction(fn)) {\n    throw new Error(think.locale('CONFIG_NOT_FUNCTION', `${type} type`));\n  }\n  if(think.isBoolean(args)){\n    args = [];\n  }else if(!think.isArray(args)){\n    args = [args];\n  }\n  let parseArgs = Validator[`_${type}`];\n  //parse args\n  if(think.isFunction(parseArgs)){\n    args = parseArgs(args, rules);\n  }\n  return {fn, args};\n};\n\n/**\n * get all rule values, for default function to get value\n * @param  {Object} rules []\n * @return {Object}       []\n */\nlet _getRuleValues = rules => {\n  let ret = {};\n  for(let name in rules){\n    ret[name] = rules[name].value;\n  }\n  return ret;\n};\n\n/**\n * to boolean\n * @param  {Mixed} value []\n * @return {Boolean}       []\n */\nlet _toBoolean = value => {\n  return ['yes', 'on', '1', 'true', true].indexOf(value) > -1;\n};\n\n/**\n * parse value\n * @param  {Mixed} value []\n * @param  {Object} item  []\n * @return {Mixed}       []\n */\nlet _parseValue = (value, item) => {\n  if(item.int || item.type === 'int'){\n    return parseInt(value);\n  }else if(item.float || item.type === 'float'){\n    return parseFloat(value);\n  }else if(item.boolean || item.type === 'boolean'){\n    return _toBoolean(value);\n  }\n  return value;\n};\n/**\n * get item value\n * @param  {Object} item   []\n * @param  {Object} values []\n * @return {Mixed}        []\n */\nlet _getItemValue = (item, values, parse) => {\n  //get item value\n  //avoid default is undefined, but check type is string\n  let itemValue = item.value;\n  //trim value\n  if(item.trim && itemValue && itemValue.trim){\n    itemValue = itemValue.trim();\n  }\n  let _default = item.default;\n  if(!itemValue && !think.isTrueEmpty(_default)){\n    itemValue = item.default;\n  }\n  if(think.isFunction(itemValue)){\n    itemValue = itemValue.call(values);\n  }\n\n  //make data to array when type is array\n  if(item.value && item.array && !think.isArray(item.value)){\n    if(think.isString(itemValue)){\n      try{\n        itemValue = JSON.parse(itemValue);\n      }catch(e){\n        itemValue = itemValue.split(/\\s*,\\s*/);\n      }\n    }else{\n      itemValue = [itemValue];\n    }\n  }\n  //make data to object when type is object\n  else if(item.value && item.object && think.isString(itemValue)){\n    try{\n      itemValue = JSON.parse(itemValue);\n    }catch(e){}\n  }\n  else if(item.boolean){\n    itemValue = _toBoolean(itemValue);\n  }\n\n  //parse value\n  if(parse){\n    if(item.array){\n      itemValue = itemValue.map(it => {\n        return _parseValue(it, item);\n      });\n    }else{\n      itemValue = _parseValue(itemValue, item);\n    }\n  }\n\n  return itemValue;\n};\n\n\nlet Validate = (name, callback) => {\n  // register validate callback\n  if (think.isString(name)) {\n    // think.validate('test', function(){})\n    if (think.isFunction(callback)) {\n      Validator[name] = callback;\n      return;\n    }\n    // get validator callback\n    return Validator[name];\n  }\n  return Validate.exec(name, callback);\n};\n\n/**\n * exec validate\n * @param  {Object} rules []\n * @param  {Object} msgs  []\n * @return {Object}       []\n */\nValidate.exec = (rules, msgs = {}) => {\n  let ret = {};\n  let values = _getRuleValues(rules);\n\n  for(let name in rules){\n    let item = rules[name];\n    let itemValue = _getItemValue(item, values);\n    for(let vtype in item){\n      if(vtype === 'value' || vtype === 'default' || vtype === 'trim'){\n        continue;\n      }\n      //if has array rule, then foreach check value for every rule\n      if(item.array && vtype !== 'array' && think.isArray(itemValue)){\n        let flag = itemValue.some(ivalue => {\n          let {fn, args} = _getValidateRuleFnAndArgs(vtype, item[vtype], rules);\n          let result = fn(ivalue, ...args);\n          if(!result){\n            let msg = _getValidateErrorMsg(vtype, name, ivalue, args, msgs);\n            ret[name] = msg;\n            return true;\n          }\n        });\n        if(flag){\n          break;\n        }\n      }else{\n        let {fn, args} = _getValidateRuleFnAndArgs(vtype, item[vtype], rules);\n        let result = fn(itemValue, ...args);\n        if(!result){\n          let msg = _getValidateErrorMsg(vtype, name, itemValue, args, msgs);\n          ret[name] = msg;\n          break;\n        }\n      }\n    }\n  }\n  return ret;\n};\n\n/**\n * get new values for rules\n * @param  {Object} rules []\n * @return {Object}       []\n */\nValidate.values = rules => {\n  let ret = {};\n  let values = _getRuleValues(rules);\n  for(let name in rules){\n    let itemValue = _getItemValue(rules[name], values, true);\n    ret[name] = itemValue;\n  }\n  return ret;\n};\n\n/**\n * parse string rule to object\n * @param  {String} rule []\n * @return {Object}      []\n */\nValidate.parse = rule => {\n  let rules = rule.split('|');\n  let ret = {};\n  rules.forEach(item => {\n    item = item.trim();\n    if(!item){\n      return;\n    }\n    let pos = item.indexOf(':');\n    if(pos > -1){\n      let name = item.substr(0, pos);\n      let args = item.substr(pos + 1).trim();\n      if(args[0] === '{' || args[0] === '['){\n        let value = (new Function('', `return ${args}`))();\n        args = name === 'default' ? value : [value];\n      }else if(name !== 'default'){\n        args = args.split(/\\s*,\\s*/);\n      }\n      ret[name] = args;\n    }else{\n      ret[item] = true;\n    }\n  });\n  return ret;\n};\n\nexport default Validate;"]}