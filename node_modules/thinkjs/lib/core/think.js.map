{"version":3,"sources":["../../src/core/think.js"],"names":[],"mappings":"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","file":"think.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport util from 'util';\nimport crypto from 'crypto';\nimport querystring from 'querystring';\nimport child_process from 'child_process';\nimport cluster from 'cluster';\n\nimport thinkit from 'thinkit';\nimport co from 'co';\nimport colors from 'colors/safe';\n\nimport base from './base.js';\nimport httpBase from './http_base.js';\nimport Cookie from '../util/cookie.js';\nimport Http from './http.js';\nimport Await from '../util/await.js';\nimport Validate from './think_validate.js';\nimport Middleware from './think_middleware.js';\nimport Hook from './think_hook.js';\nimport Route from './think_route.js';\nimport Config from './think_config.js';\nimport Adatper from './think_adapter.js';\n\nimport './think_cache.js';\nimport './think_data.js';\n\n\ncolors.enabled = true;\n\n\n/**\n * global think variable\n * @type {Object}\n */\nglobal.think = Object.create(thinkit);\n/**\n * path seperator\n * @type {String}\n */\nthink.sep = path.sep;\n/**\n * server start time\n * @type {Number}\n */\nthink.startTime = Date.now();\n/**\n * app dir name, can be set in init\n * @type {Object}\n */\nthink.dirname = {\n  config: 'config',\n  controller: 'controller',\n  model: 'model',\n  adapter: 'adapter',\n  logic: 'logic',\n  service: 'service',\n  view: 'view',\n  middleware: 'middleware',\n  runtime: 'runtime',\n  common: 'common',\n  bootstrap: 'bootstrap',\n  locale: 'locale'\n};\n/**\n * env\n * development | testing | production\n * @type {String}\n */\nthink.env = 'development';\n/**\n * server port\n * @type {Number}\n */\nthink.port = 0;\n/**\n * is command line\n * @type {String}\n */\nthink.cli = '';\n/**\n * get locale\n * @type {String}\n */\nthink.lang = (process.env.LANG || '').split('.')[0].replace('_', '-');\n/**\n * is master\n * @type {Boolean}\n */\nthink.isMaster = cluster.isMaster;\n/**\n * app mode\n * 0x0001: mini\n * 0x0002: normal\n * 0x0004: module\n * @type {Boolean}\n */\nthink.mode = 0x0001;\n//normal mode\nthink.mode_normal = 0x0002;\n//module mode\nthink.mode_module = 0x0004;\n/**\n * thinkjs module lib path\n * @type {String}\n */\nthink.THINK_LIB_PATH = path.normalize(`${__dirname}/..`);\n/**\n * thinkjs module root path\n * @type {String}\n */\nthink.THINK_PATH = path.dirname(think.THINK_LIB_PATH);\n/**\n * thinkjs version\n * @param  {) []\n * @return {}         []\n */\nthink.version = (() => {\n  let packageFile = `${think.THINK_PATH}/package.json`;\n  let {version} = JSON.parse(fs.readFileSync(packageFile, 'utf-8'));\n  return version;\n})();\n/**\n * module list\n * @type {Array}\n */\nthink.module = [];\n/**\n * base class\n * @type {Class}\n */\nthink.base = base;\n/**\n * reject promise\n * @param  {[type]} err []\n * @return {[type]}     []\n */\nthink.reject = (err) => {\n  //delay to show error\n  setTimeout(() => {\n    think.log(err);\n  }, 500);\n  return Promise.reject(err);\n};\n\n/**\n * check object is http object\n * @param  {Mixed}  obj []\n * @return {Boolean}      []\n */\nthink.isHttp = obj => {\n  return !!(obj && think.isObject(obj.req) && think.isObject(obj.res));\n};\n\n/**\n * validate \n * @type {Function}\n */\nthink.validate = Validate;\n\n/**\n * middleware\n * @type {Function}\n */\nthink.middleware = Middleware;\n\n/**\n * hook\n * @type {Function}\n */\nthink.hook = Hook;\n\n/**\n * route\n * @type {Function}\n */\nthink.route = Route;\n\n/**\n * config\n * @type {Function}\n */\nthink.config = Config;\n/**\n * get module config\n * @param  {String} module []\n * @return {Object}        []\n */\nthink.getModuleConfig = module => {\n  return think.config(undefined, undefined, module);\n};\n/**\n * adapter\n * @type {Function}\n */\nthink.adapter = Adatper;\n\n/**\n * alias co module to think.co\n * @type {Object}\n */\nthink.co = obj => {\n  //optimize invoke co package\n  if(obj && typeof obj.next === 'function'){\n    return co(obj);\n  }\n  return Promise.resolve(obj);\n};\nthink.co.wrap = co.wrap;\n\n/**\n * create class\n * @param {Object} methods [methods and props]\n */\nlet Class = think.Class;\nthink.Class = (type, clean) => {\n  // create class\n  // think.Class({})\n  // think.Class({}, true)\n  if (think.isObject(type)) {\n    return clean === true ? Class(type) : Class(think.base, type);\n  }\n  // create class with superClass\n  // think.Class(function(){}, {})\n  else if (think.isFunction(type)) {\n    return Class(type, clean);\n  }\n\n  //create type class\n  return (superClass, methods) => {\n    // think.controller();\n    // think.controller({})\n    if (think.isObject(superClass) || !superClass) {\n      methods = superClass;\n      superClass = type + '_base';\n    }\n    // think.controller('superClass', {})\n    else if (think.isString(superClass)) {\n      superClass = think.lookClass(superClass, type);\n    }\n    if (think.isString(superClass)) {\n      superClass = think.require(superClass, true);\n      // get class\n      // think.controller('rest')\n      if (!methods) {\n        return superClass;\n      }\n    }\n    return Class(superClass, methods);\n  };\n};\n\n\n/**\n * look up class\n * @param  {String} type   [class type, model, controller, service]\n * @param  {String} module [module name]\n * @return {String}        []\n */\nlet _getClass = (name, type, module, base) => {\n  let clsPath, cls;\n  // find from current module\n  if (module) {\n    clsPath = `${module}/${type}/${name}`;\n    cls = think.require(clsPath, true);\n    if (cls) {\n      return cls;\n    }\n  }\n  // find from common module\n  module = think.mode !== think.mode_module ? think.config('default_module') : think.dirname.common;\n  let list = [\n    `${module}/${type}/${name}`,\n    `${type}_${name}`,\n    base || `${type}_base`\n  ];\n  for(let i = 0, length = list.length; i < length; i++){\n    cls = think.require(list[i], true);\n    if(cls){\n      return cls;\n    }\n  }\n};\n\nthink.lookClass = (name, type, module, base) => {\n  let names = name.split('/');\n  let length = names.length;\n  if(length === 1){\n    return _getClass(name, type, module, base);\n  }\n  if(length === 2 && (think.module.indexOf(names[0]) > -1 || !module)){\n    return think.require(`${names[0]}/${type}/${names[1]}`);\n  }\n  if(length === 3 && (name.indexOf(`/${type}/`) > -1 || !type || !module)){\n    return think.require(name);\n  }\n  return think.require(`${module}/${type}/${name}`);\n};\n/**\n * get common module path\n * think.getPath(undefined, think.dirname.controller)\n * think.getPath(home, think.dirname.model)\n * @return {String} []\n */\nthink.getPath = (module, type = think.dirname.controller, prefix = '') => {\n  let mod = '';\n  if(think.mode === think.mode_module){\n    mod = (module || think.dirname.common) + think.sep;\n  }\n  return `${think.APP_PATH}${prefix}${think.sep}${mod}${type}`;\n};\n\n\n/**\n * require module\n * @param  {String} name []\n * @return {mixed}      []\n */\nlet _loadRequire = (name, filepath) => {\n  let obj = think.safeRequire(filepath);\n  if (think.isFunction(obj)) {\n    obj.prototype.__filename = filepath;\n  }\n  if(obj){\n    thinkData.export[name] = obj;\n  }\n  return obj;\n};\nthink.require = (name, flag) => {\n  if (!think.isString(name)) {\n    return name;\n  }\n  // adapter or middle by register\n  let Cls = thinkData.export[name];\n  if (Cls) {\n    return Cls;\n  }\n\n  let filepath = thinkData.alias[name];\n  if (filepath) {\n    return _loadRequire(name, path.normalize(filepath));\n  }\n  // only check in alias\n  if (flag) {\n    return null;\n  }\n  filepath = require.resolve(name);\n  return _loadRequire(name, filepath);\n};\n\n\n/**\n * safe require\n * @param  {String} file []\n * @return {mixed}      []\n */\nlet _interopSafeRequire = file => {\n  let obj = require(file);\n  if(obj && obj.__esModule && obj.default){\n    return obj.default;\n  }\n  return obj;\n};\n\nthink.safeRequire = file => {\n  // absolute file path is not exist\n  if (path.isAbsolute(file)) {\n    //no need optimize, only invoked before service start\n    if(!think.isFile(file)){\n      return null;\n    }\n    //when file is exist, require direct\n    return _interopSafeRequire(file);\n  }\n  try{\n    return _interopSafeRequire(file);\n  }catch(err){\n    think.log(err);\n  }\n  return null;\n};\n\n/**\n * merge & parse config, support adapter & parser\n * @param  {} configs []\n * @return {}            []\n */\nthink.parseConfig = function(...configs) {\n  let onlyMerge = false;\n  if(configs[0] === true){\n    onlyMerge = true;\n    configs = configs.slice(1);\n  }\n  configs = configs.map(config => {\n    config = think.extend({}, config);\n    //check adapter config exist\n    if(config.type && config.adapter){\n      let adapterConfig = config.adapter[config.type];\n      config = think.extend(config, adapterConfig);\n      delete config.adapter;\n    }\n    return config;\n  });\n  \n  let config = think.extend({}, ...configs);\n\n  //check parser method\n  if(!think.isFunction(config.parser) || onlyMerge){\n    return config;\n  }\n  \n  let ret = config.parser(config, this !== think ? this : {});\n  delete config.parser;\n  return think.extend(config, ret);\n};\n\n/**\n * prevent next process\n * @return {Promise} []\n */\nlet preventMessage = 'PREVENT_NEXT_PROCESS';\nthink.prevent = () => {\n  let err = new Error(preventMessage);\n  return Promise.reject(err);\n};\n/**\n * check is prevent error\n * @param  {Error}  err [error message]\n * @return {Boolean}     []\n */\nthink.isPrevent = err => {\n  return think.isError(err) && err.message === preventMessage;\n};\n/**\n * log\n * @TODO\n * @return {} []\n */\nthink.log = (msg, type, showTime) => {\n\n  //when type or showTime is boolean\n  //only show log when value is true\n  if(type === false || showTime === false){\n    return;\n  }else if(type === true){\n    type = '';\n  }else if(showTime === true){\n    showTime = '';\n  }\n\n\n  let dateTime = colors.gray(`[${think.datetime()}] `);\n  if(showTime === null){\n    dateTime = '';\n  }\n\n  let preError = thinkCache(thinkCache.COLLECTION, 'prev_error');\n  if (think.isError(msg)) {\n    if(think.isPrevent(msg) || msg === preError){\n      return;\n    }\n    thinkCache(thinkCache.COLLECTION, 'prev_error', msg);\n    console.error(dateTime + colors.red('[Error] ') + msg.stack);\n    return;\n  }else if(think.isFunction(msg)){\n    msg = msg(colors);\n  }else if(think.isObject(msg) || think.isArray(msg)){\n    msg = JSON.stringify(msg);\n  }\n  // if(msg.length > 300){\n  //   msg = msg.substr(0, 300) + '...';\n  // }\n  if(think.isNumber(showTime)){\n    let time = Date.now() - showTime;\n    msg += ' ' + colors.green(`${time}ms`);\n  }\n  if(type){\n    if(type === 'WARNING'){\n      console.warn(dateTime + colors.yellow(`[Warning] `) + msg);\n    }\n    else if(type === 'EXIT'){\n      console.error(colors.red('[Error] ' + msg));\n      console.log();\n      process.exit();\n    }\n    else{\n      console.log(dateTime + colors.cyan(`[${type}] `) + msg);\n    }\n  }else{\n    console.log(dateTime + msg); \n  }\n};\n\n\n/**\n * load alias\n * @param  {String} type  []\n * @param  {Array} paths []\n * @return {Object}       []\n */\nthink.alias = (type, paths, slash) => {\n  if(!type){\n    return thinkData.alias;\n  }\n  //regist alias\n  if (!think.isArray(paths)) {\n    paths = [paths];\n  }\n  paths.forEach(path => {\n    let files = think.getFiles(path);\n    files.forEach(file => {\n      if(file.slice(-3) !== '.js' || file[0] === '_'){\n        return;\n      }\n      let name = file.slice(0, -3).replace(/\\\\/g, '/');//replace \\\\ to / on windows\n      name = type + (slash ? '/' : '_') + name;\n      thinkData.alias[name] = `${path}${think.sep}${file}`;\n    });\n  });\n};\n\n\n/**\n * regist gc\n * @param  {Object} instance [class instance]\n * @return {}          []\n */\nthink.gc = instance => {\n  let type = instance.gcType;\n  let timers = thinkCache(thinkCache.TIMER);\n  let gc = think.config('gc');\n  if (!gc.on || type in timers) {\n    return;\n  }\n  let timer = setInterval(() => {\n    if(gc.filter()){\n      return instance.gc && instance.gc(Date.now());\n    }\n  }, gc.interval * 1000);\n  thinkCache(thinkCache.TIMER, type, timer);\n};\n\n/**\n * get http object\n * @param  {Object} req [http request]\n * @param  {Object} res [http response]\n * @return {Object}     [http object]\n */\nthink._http = (data = {}) => {\n  if (think.isString(data)) {\n    if (data[0] === '{') {\n      data = JSON.parse(data);\n    }else if (/^\\w+\\=/.test(data)) {\n      data = querystring.parse(data);\n    }else{\n      data = {url: data};\n    }\n  }\n  let url = data.url || '';\n  if (url.indexOf('/') !== 0) {\n    url = '/' + url;\n  }\n  let req = {\n    httpVersion: '1.1',\n    method: (data.method || 'GET').toUpperCase(),\n    url: url,\n    headers: think.extend({\n      host: data.host || '127.0.0.1'\n    }, data.headers),\n    connection: {\n      remoteAddress: data.ip || '127.0.0.1'\n    }\n  };\n  let empty = () => {};\n  let res = {\n    statusCode: 200,\n    setTimeout: empty,\n    end: data.end || data.close || empty,\n    write: data.write || data.send || empty,\n    setHeader: empty\n  };\n  return {\n    req: req,\n    res: res\n  };\n};\n/**\n * get http object\n * @param  {Object} req []\n * @param  {Object} res []\n * @return {Promise}     []\n */\nthink.http = async (req, res) => {\n  let execFlag = res === true;\n  //for cli request\n  if (res === undefined || res === true) {\n    ({req, res} = think._http(req));\n  }\n  let instance = new Http(req, res);\n  let http = await instance.run();\n  if(!execFlag){\n    return http;\n  }\n  //flag to cli request, make isCli detect true\n  http._cli = true; \n  let App = think.require('app');\n  let appInstance = new App(http);\n  return appInstance.run();\n};\n/**\n * base class for has http property\n * @type {Class}\n */\nthink.http.base = httpBase;\n\n/**\n * get uuid\n * @param  {Number} length [uid length]\n * @return {String}        []\n */\nthink.uuid = (length = 32) => {\n  // length = length || 32;\n  let str = crypto.randomBytes(Math.ceil(length * 0.75)).toString('base64').slice(0, length);\n  return str.replace(/[\\+\\/]/g, '_');\n};\n\n/**\n * start session\n * @param  {Object} http []\n * @return {}      []\n */\nthink.session = http => {\n  //if session is init, return\n  if (http._session) {\n    return http._session;\n  }\n\n  let sessionOptions = think.config('session');\n  let {name, secret} = sessionOptions;\n  let cookie = http.cookie(name);\n  \n  //validate cookie sign\n  if (cookie && secret) {\n    cookie = Cookie.unsign(cookie, secret);\n    //set cookie to http._cookie\n    if (cookie) {\n      http._cookie[name] = cookie;\n    }\n  }\n\n  let sessionCookie = cookie;\n  let newCookie = false;\n  //generate session cookie when cookie is not set\n  if (!cookie) {\n    let options = sessionOptions.cookie || {};\n    cookie = think.uuid(options.length || 32);\n    sessionCookie = cookie;\n    //sign cookie\n    if (secret) {\n      cookie = Cookie.sign(cookie, secret);\n    }\n    http._cookie[name] = sessionCookie;\n    http.cookie(name, cookie, options);\n    newCookie = true;\n  }\n\n  let type = sessionOptions.type || 'memory';\n  if (type === 'memory') {\n    if (think.config('cluster_on')) {\n      type = 'file';\n      think.log('in cluster mode, session can\\'t use memory for storage, convert to File');\n    }\n  }\n  \n  let conf = think.parseConfig(sessionOptions, {\n    cookie: sessionCookie,\n    newCookie: newCookie\n  });\n  let cls = think.adapter('session', type);\n  let session = new cls(conf);\n  http._session = session;\n\n  //save session data after request end\n  //http.once('afterEnd', () => session.flush && session.flush());\n  return session;\n};\n\n\n/**\n * create controller sub class\n * @type {Function}\n */\nthink.controller = (superClass, methods, module) => {\n  let isConfig = think.isHttp(methods) || module;\n  // get controller instance\n  if (think.isString(superClass) && isConfig) {\n    let Cls = think.lookClass(superClass, 'controller', module);\n    return new Cls(methods);\n  }\n  let controller = thinkCache(thinkCache.COLLECTION, 'controller');\n  if(!controller){\n    controller = think.Class('controller');\n    thinkCache(thinkCache.COLLECTION, 'controller', controller);\n  }\n  //create sub controller class\n  return controller(superClass, methods);\n};\n\n\n/**\n * create logic class\n * @type {Function}\n */\nthink.logic = (superClass, methods, module) => {\n  let isConfig = think.isHttp(methods) || module;\n  //get logic instance\n  if (think.isString(superClass) && isConfig) {\n    let Cls = think.lookClass(superClass, 'logic', module);\n    return new Cls(methods);\n  }\n  let logic = thinkCache(thinkCache.COLLECTION, 'logic');\n  if(!logic){\n    logic = think.Class('logic');\n    thinkCache(thinkCache.COLLECTION, 'logic', logic);\n  }\n  //create sub logic class\n  return logic(superClass, methods);\n};\n\n\n/**\n * create model sub class\n * @type {Function}\n */\nthink.model = (superClass, methods, module) => {\n  let isConfig = !!module;\n  if (!isConfig && methods) {\n    //check is db configs\n    if ('type' in methods) {\n      isConfig = true;\n    }\n  }\n  //get model instance\n  if (think.isString(superClass) && isConfig) {\n    methods = think.extend({}, think.config('db'), methods);\n    let base = methods.type === 'mongo' ? 'model_mongo' : '';\n    let cls = think.lookClass(superClass, 'model', module, base);\n    return new cls(superClass, methods);\n  }\n  let model = thinkCache(thinkCache.COLLECTION, 'model');\n  if(!model){\n    model = think.Class('model');\n    thinkCache(thinkCache.COLLECTION, 'model', model);\n  }\n  //create model\n  return model(superClass, methods);\n};\n\n/**\n * create service sub class\n * @type {Function}\n */\nthink.service = (superClass, methods, module) => {\n  //get service instance\n  if (think.isString(superClass)) {\n    return think.lookClass(superClass, 'service', module || methods);\n  }\n  let service = thinkCache(thinkCache.COLLECTION, 'service');\n  if(!service){\n    service = think.Class('service');\n    thinkCache(thinkCache.COLLECTION, 'service', service);\n  }\n  //create sub service class\n  return service(superClass, methods);\n};\n/**\n * get or set cache\n * @param  {String} type  [cache type]\n * @param  {String} name  [cache name]\n * @param  {Mixed} value [cache value]\n * @return {}       []\n */\nthink.cache = async (name, value, options) => {\n  options = think.extend({}, think.config('cache'), options);\n  let Cls = think.adapter('cache', options.type || 'memory');\n  let instance = new Cls(options);\n  // get cache\n  if(value === undefined){\n    return instance.get(name);\n  } \n  //delete cache\n  else if(value === null){\n    return instance.delete(name);\n  } \n  //get cache waiting for function\n  else if(think.isFunction(value)){\n    let data = await instance.get(name);\n    if(data !== undefined){\n      return data;\n    }\n    data = await think.co(value(name));\n    //data = await think.co.wrap(value)(name);\n    await instance.set(name, data);\n    return data;\n  }\n  //set cache\n  return instance.set(name, value);\n};\n\n\n/**\n * get locale message\n * can not use arrow function!\n * @param  {String} key  []\n * @param  {String} lang []\n * @return {String}      []\n */\nthink.locale = function(key, ...data) {\n  let lang, locales, defaultLang;\n  if(this === think){\n    defaultLang = think.config('locale.default');\n    lang = think.lang || defaultLang;\n    locales = think.config('locale');\n  }else{\n    defaultLang = this.config('locale.default');\n    lang = this.lang();\n    locales = this.config(think.dirname.locale);\n  }\n  let langLocale = locales[lang] || {};\n  let defaultLangLocale = locales[defaultLang] || {};\n  if(!key){\n    return think.isEmpty(langLocale) ? defaultLangLocale : langLocale;\n  }\n  let enLocale = locales.en || {};\n  let value = langLocale[key] || defaultLangLocale[key] || enLocale[key] || key;\n  if(!think.isString(value)){\n    return value;\n  }\n  return util.format(value, ...data);\n};\n\n\n\n\n/**\n * await \n * @param  {String}   key      []\n * @param  {Function} callback []\n * @return {Promise}            []\n */\nlet _awaitInstance = new Await();\nthink.await = (key, callback) => {\n  return _awaitInstance.run(key, callback);\n};\n\n\n/**\n * install node package\n * @param  {String} pkg [package name]\n * @return {Promise}     []\n */\nlet _dynamicInstall = pkg => {\n  let pkgWithVersion = pkg;\n  //get package version\n  if(pkgWithVersion.indexOf('@') === -1){\n    let version = think.config('package')[pkg];\n    if(version){\n      pkgWithVersion += '@' + version;\n    }\n  }else{\n    pkg = pkgWithVersion.split('@')[0];\n  }\n  let cmd = `npm install ${pkgWithVersion} --save`;\n  return think.await(cmd, () => {\n    let deferred = think.defer();\n    think.log(`install package ${pkgWithVersion} start`, 'NPM');\n    child_process.exec(cmd, {\n      cwd: think.ROOT_PATH\n    }, err => {\n      if(err){\n        think.log(new Error(`install package ${pkgWithVersion} error`));\n        deferred.reject(err);\n      }else{\n        think.log(`install package ${pkgWithVersion} finish`, 'NPM');\n        deferred.resolve(think.require(pkg));\n      }\n    });\n    return deferred.promise;\n  });\n};\n\nthink.npm = (pkg) => {\n  try{\n    return Promise.resolve(_interopSafeRequire(pkg));\n  } catch(e){\n    return _dynamicInstall(pkg);\n  }\n};\n/**\n * get error\n * @param  {Error} err   []\n * @param  {String} addon []\n * @return {Error}       []\n */\nthink.error = (err, addon = '') => {\n  if(think.isPromise(err)){\n    return err.catch(err => {\n      return think.reject(think.error(err, addon));\n    });\n  }\n  if(think.isError(err)){\n    let message = err.message;\n    let errors = thinkData.error;\n    let key, value, reg = /^[A-Z\\_]$/;\n    for(key in errors){\n      let pos = message.indexOf(key);\n      if(pos > -1){\n        let prev = pos === 0 ? '' : message[pos - 1];\n        let next = message[pos + key.length];\n        if(!reg.test(prev) && !reg.test(next)){\n          value = errors[key];\n          break;\n        }\n      }\n    }\n    if(value){\n      let siteMessage = `http://www.thinkjs.org/doc/error_message.html#${key.toLowerCase()}`;\n      if(think.isError(addon)){\n        addon.message = `${value}, ${addon.message}. ${siteMessage}`;\n        return addon;\n      }else{\n        addon = addon ? `, ${addon}` : '';\n        let msg = `${value}${addon}. ${siteMessage}`;\n        err.message = msg;\n        return err;\n      }\n    }\n    return err;\n  }\n  return new Error(err);\n};\n/**\n * exec status action\n * @param  {Number} status []\n * @param  {Object} http   []\n * @return {}        []\n */\nthink.statusAction = async (status, http, log) => {\n  status = status || 500;\n  if(think.isPrevent(http.error)){\n    return;\n  }\n  //set error flag, avoid infinite loop\n  if(http._error){\n    think.log(http.error);\n    await http.status(status).end();\n    return think.prevent();\n  }\n  http._error = true;\n\n  //@TODO move log error to error controller\n  if(log && think.config('log_error') !== false){\n    think.log(http.error);\n  }\n\n  let name = `${think.config('default_module')}/${think.dirname.controller}/error`;\n  if(think.mode === think.mode_module){\n    name = `${think.dirname.common}/${think.dirname.controller}/error`;\n  }\n\n  let cls = think.require(name, true);\n  \n  //error controller not found\n  if(!cls){\n    http.error = new Error(think.locale('CONTROLLER_NOT_FOUND', name, http.url));\n    return think.statusAction(status, http, log);\n  }\n  \n  //set http status\n  //http.status(status);\n\n  let instance = new cls(http);\n  await instance.invoke(`_${status}Action`, instance);\n  \n  return think.prevent();\n};\n\n/**\n * waterfall\n * @param  {Array}   dataList []\n * @param  {Function} callback []\n * @return {Promise}            []\n */\nthink.waterfall = async (dataList, callback) => {\n  let itemFn = think.isFunction(dataList[0]);\n  let data;\n  for(let i = 0, length = dataList.length; i < length; i++){\n    let ret = itemFn ? dataList[i](callback, data) : callback(dataList[i], data);\n    data = await think.co(ret);\n    if(data === null){\n      return data;\n    }\n  }\n  return data;\n};\n\n/**\n * parallel limit exec\n * @param  {String}   key      []\n * @param  {Mixed}   data     []\n * @param  {Function} callback []\n * @return {}            []\n */\nthink.parallelLimit = (key, data, callback, options = {}) => {\n\n  if(!think.isString(key) || think.isFunction(data)){\n    options = callback || {};\n    callback = data;\n    data = key;\n    key = '';\n  }\n  if(!think.isFunction(callback)){\n    options = callback || {};\n    callback = undefined;\n  }\n  if(think.isNumber(options)){\n    options = {limit: options};\n  }\n  \n  let flag = !think.isArray(data) || options.array;\n  if(!flag){\n    key = '';\n  }\n\n  //get parallel limit class\n  let Limit = thinkCache(thinkCache.COLLECTION, 'limit');\n  if (!Limit) {\n    Limit = think.require('parallel_limit');\n    thinkCache(thinkCache.COLLECTION, 'limit', Limit);\n  }\n\n  let instance;\n  if(key){\n    instance = thinkCache(thinkCache.LIMIT, key);\n    if(!instance){\n      instance = new Limit(options.limit, callback);\n      thinkCache(thinkCache.LIMIT, key, instance);\n    }\n  }else{\n    instance = new Limit(options.limit, callback);\n  }\n\n  if(flag){\n    return instance.add(data);\n  }\n  return instance.addMany(data, options.ignoreError);\n};"]}