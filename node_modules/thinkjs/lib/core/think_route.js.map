{"version":3,"sources":["../../src/core/think_route.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAI,mBAAmB,SAAnB,gBAAmB,KAAM;AAC3B,SAAO,MAAM,EAAN,CAAS,IAAT,EAAe,IAAf,CAAoB,YAAgB;AAAA,QAAf,KAAe,yDAAP,EAAO;;AACzC,cAAU,KAAV,GAAkB,KAAlB;AACA,WAAO,KAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOA,IAAI,kBAAkB,SAAlB,eAAkB,SAAU;AAC9B,OAAI,IAAI,MAAR,IAAkB,MAAlB,EAAyB;AACvB,QAAI,WAAW,MAAM,OAAN,CAAc,MAAd,EAAsB,MAAM,OAAN,CAAc,MAApC,IAA8C,WAA7D;AACA,QAAI,eAAe,MAAM,WAAN,CAAkB,QAAlB,CAAnB;AACA,WAAO,MAAP,EAAe,QAAf,GAA0B,gBAAgB,EAA1C;AACD;AACD,YAAU,KAAV,GAAkB,MAAlB;AACA,SAAO,MAAP;AACD,CARD;;;;;;AAcA,IAAI,YAAY,SAAZ,SAAY,GAAM;AACpB,MAAI,OAAO,MAAM,OAAN,CAAc,SAAd,EAAyB,MAAM,OAAN,CAAc,MAAvC,IAAiD,WAA5D;AACA,MAAI,SAAS,MAAM,WAAN,CAAkB,IAAlB,KAA2B,EAAxC;;;AAGA,MAAI,MAAM,UAAN,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B,WAAO,iBAAiB,MAAjB,CAAP;AACD;;AAED,MAAG,MAAM,QAAN,CAAe,MAAf,KAA0B,MAAM,IAAN,KAAe,MAAM,WAAlD,EAA8D;AAC5D,WAAO,gBAAgB,MAAhB,CAAP;AACD;AACD,YAAU,KAAV,GAAkB,MAAlB;AACA,SAAO,MAAP;AACD,CAdD;;AAgBA,IAAI,QAAQ,SAAR,KAAQ,SAAU;;AAEpB,MAAG,WAAW,IAAd,EAAmB;AACjB,cAAU,KAAV,GAAkB,IAAlB;AACA;AACD;;AAED,MAAI,MAAM,OAAN,CAAc,MAAd,KAAyB,MAAM,QAAN,CAAe,MAAf,CAA7B,EAAqD;AACnD,cAAU,KAAV,GAAkB,MAAlB;AACA;AACD;;AAED,MAAI,UAAU,KAAd,EAAqB;AACnB,WAAO,UAAU,KAAjB;AACD;AACD,SAAO,WAAP;AACD,CAhBD;;kBAkBe,K","file":"think_route.js","sourcesContent":["'use strict';\n\n/**\n * load route\n * route detail config\n *\n * module.exports = {\n *   admin: {\n *     reg: /^admin/, //module reg\n *     children: [\n *       /^admin\\/reg/, 'admin/index/reg'\n *     ]\n *   },\n *   home: {\n *     children: [\n *       \n *     ]\n *   }\n * }\n * \n * @return {} []\n */\nlet _getDynamicRoute = fn => {\n  return think.co(fn()).then((route = []) => {\n    thinkData.route = route;\n    return route;\n  });\n};\n\nlet _getModuleRoute = config => {\n  for(let module in config){\n    let filepath = think.getPath(module, think.dirname.config) + '/route.js';\n    let moduleConfig = think.safeRequire(filepath);\n    config[module].children = moduleConfig || [];\n  }\n  thinkData.route = config;\n  return config;\n};\n/**\n * get route\n * @param  {} key []\n * @return {}     []\n */\nlet _getRoute = () => {\n  let file = think.getPath(undefined, think.dirname.config) + '/route.js';\n  let config = think.safeRequire(file) || [];\n\n  //route config is funciton, may be is dynamic save in db\n  if (think.isFunction(config)) {\n    return _getDynamicRoute(config);\n  }\n  //get module route config\n  if(think.isObject(config) && think.mode === think.mode_module){\n    return _getModuleRoute(config);\n  }\n  thinkData.route = config;\n  return config;\n};\n\nlet Route = routes => {\n  //remove route\n  if(routes === null){\n    thinkData.route = null;\n    return;\n  }\n  //set route\n  if (think.isArray(routes) || think.isObject(routes)) {\n    thinkData.route = routes;\n    return;\n  }\n  //get route\n  if (thinkData.route) {\n    return thinkData.route;\n  }\n  return _getRoute();\n};\n\nexport default Route;"]}