{"version":3,"sources":["../../src/core/think_middleware.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAQA,IAAI,aAAa,SAAb,UAAa,GAAa;AAAA,oCAAT,IAAS;AAAT,QAAS;AAAA;;AAAA,MACvB,UADuB,GACM,IADN;AAAA,MACX,OADW,GACM,IADN;AAAA,MACF,IADE,GACM,IADN;;AAE5B,MAAI,SAAS,KAAK,MAAlB;;;;AAIA,MAAI,MAAM,QAAN,CAAe,UAAf,KAA8B,MAAM,UAAN,CAAiB,OAAjB,CAAlC,EAA6D;AAC3D,cAAU,UAAV,CAAqB,UAArB,IAAmC,OAAnC;AACA;AACD;;;AAGD,MAAI,UAAU,CAAV,IAAe,MAAM,MAAN,CAAa,OAAb,CAAnB,EAA0C;AACxC,WAAO,WAAW,IAAX,CAAgB,UAAhB,EAA4B,OAA5B,EAAqC,IAArC,CAAP;AACD;;;AAGD,MAAI,WAAW,CAAX,IAAgB,MAAM,QAAN,CAAe,UAAf,CAApB,EAAgD;AAC9C,WAAO,WAAW,GAAX,CAAe,UAAf,CAAP;AACD;AACD,SAAO,WAAW,MAAX,CAAkB,UAAlB,EAA8B,OAA9B,CAAP;AACD,CArBD;;;;;;;;AA6BA,WAAW,MAAX,GAAoB,UAAC,UAAD,EAAa,OAAb,EAAyB;AAC3C,MAAI,aAAa,WAAW,WAAW,UAAtB,EAAkC,YAAlC,CAAjB;AACA,MAAI,CAAC,UAAL,EAAiB;AACf,iBAAa,MAAM,KAAN,CAAY,YAAZ,CAAb;AACA,eAAW,WAAW,UAAtB,EAAkC,YAAlC,EAAgD,UAAhD;AACD;;AAED,SAAO,WAAW,UAAX,EAAuB,OAAvB,CAAP;AACD,CARD;;;;;;;AAeA,WAAW,GAAX,GAAiB,gBAAQ;AACvB,MAAI,YAAY,UAAU,UAAV,CAAqB,IAArB,CAAhB;AACA,MAAG,SAAH,EAAa;AACX,WAAO,SAAP;AACD;AACD,MAAI,MAAM,MAAM,OAAN,CAAc,gBAAgB,IAA9B,EAAoC,IAApC,CAAV;AACA,MAAI,GAAJ,EAAS;AACP,WAAO,GAAP;AACD;AACD,QAAM,IAAI,KAAJ,CAAU,MAAM,MAAN,CAAa,sBAAb,EAAqC,IAArC,CAAV,CAAN;AACD,CAVD;;;;;;;;;AAmBA,WAAW,IAAX,GAAkB,UAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAsB;AACtC,MAAI,MAAM,QAAN,CAAe,IAAf,CAAJ,EAA0B;AACxB,QAAI,KAAK,UAAU,UAAV,CAAqB,IAArB,CAAT;;AAEA,QAAI,EAAJ,EAAQ;;AAEN,UAAG,GAAG,SAAH,CAAa,GAAhB,EAAoB;AAClB,YAAI,WAAW,IAAI,EAAJ,CAAO,IAAP,CAAf;AACA,eAAO,MAAM,EAAN,CAAS,SAAS,GAAT,CAAa,IAAb,CAAT,CAAP;AACD,OAHD,MAGK;AACH,eAAO,MAAM,EAAN,CAAS,GAAG,IAAH,EAAS,IAAT,CAAT,CAAP;AACD;AACF,KARD,MAQK;AACH,UAAI,MAAM,MAAM,OAAN,CAAc,gBAAgB,IAA9B,EAAoC,IAApC,CAAV;AACA,UAAG,GAAH,EAAO;AACL,YAAI,YAAW,IAAI,GAAJ,CAAQ,IAAR,CAAf;AACA,eAAO,MAAM,EAAN,CAAS,UAAS,GAAT,CAAa,IAAb,CAAT,CAAP;AACD;AACD,UAAI,MAAM,IAAI,KAAJ,CAAU,MAAM,MAAN,CAAa,sBAAb,EAAqC,IAArC,CAAV,CAAV;AACA,aAAO,kBAAQ,MAAR,CAAe,GAAf,CAAP;AACD;AACF;AACD,SAAO,MAAM,EAAN,CAAS,KAAK,IAAL,EAAW,IAAX,CAAT,CAAP;AACD,CAvBD;;kBAyBe,U","file":"think_middleware.js","sourcesContent":["'use strict';\n\n/**\n * create or exec middleware\n * @param  {Function} superClass []\n * @param  {Object} methods      []\n * @return {mixed}            []\n */\nlet Middleware = (...args) => {\n  let [superClass, methods, data] = args;\n  let length = args.length;\n\n  // register functional or class middleware\n  // think.middleware('parsePayLoad', function(){})\n  if (think.isString(superClass) && think.isFunction(methods)) {\n    thinkData.middleware[superClass] = methods;\n    return;\n  }\n  // exec middleware\n  // think.middleware('parsePayLoad', http, data)\n  if (length >= 2 && think.isHttp(methods)) {\n    return Middleware.exec(superClass, methods, data);\n  }\n  // get middleware\n  // think.middleware('parsePayLoad')\n  if (length === 1 && think.isString(superClass)) {\n    return Middleware.get(superClass);\n  }\n  return Middleware.create(superClass, methods);\n};\n\n/**\n * create middleware\n * @param  {Class} superClass []\n * @param  {Object} methods    []\n * @return {Class}            []\n */\nMiddleware.create = (superClass, methods) => {\n  let middleware = thinkCache(thinkCache.COLLECTION, 'middleware');\n  if (!middleware) {\n    middleware = think.Class('middleware');\n    thinkCache(thinkCache.COLLECTION, 'middleware', middleware);\n  }\n  // create middleware\n  return middleware(superClass, methods);\n};\n\n/**\n * get middleware\n * @param  {String} name []\n * @return {Class}      []\n */\nMiddleware.get = name => {\n  let middlware = thinkData.middleware[name];\n  if(middlware){\n    return middlware;\n  }\n  let cls = think.require('middleware_' + name, true);\n  if (cls) {\n    return cls;\n  }\n  throw new Error(think.locale('MIDDLEWARE_NOT_FOUND', name));\n};\n\n/**\n * exec middleware\n * @param  {String} name []\n * @param  {Object} http []\n * @param  {Mixed} data []\n * @return {Promise}      []\n */\nMiddleware.exec = (name, http, data) => {\n  if (think.isString(name)) {\n    let fn = thinkData.middleware[name];\n    // name is in middleware cache\n    if (fn) {\n      //class middleware must have run method\n      if(fn.prototype.run){\n        let instance = new fn(http);\n        return think.co(instance.run(data));\n      }else{\n        return think.co(fn(http, data));\n      }\n    }else{\n      let Cls = think.require('middleware_' + name, true);\n      if(Cls){\n        let instance = new Cls(http);\n        return think.co(instance.run(data));\n      }\n      let err = new Error(think.locale('MIDDLEWARE_NOT_FOUND', name));\n      return Promise.reject(err);\n    }\n  }\n  return think.co(name(http, data));\n};\n\nexport default Middleware;"]}