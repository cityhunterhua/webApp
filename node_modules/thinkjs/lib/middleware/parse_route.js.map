{"version":3,"sources":["../../src/middleware/parse_route.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA6BE,G,kBAAK;AACH,SAAK,aAAL;;AAEA,QAAI,CAAC,KAAK,MAAL,CAAY,UAAZ,CAAL,EAA8B;AAC5B,aAAO,KAAK,aAAL,EAAP;AACD;;AAED,QAAI,QAAQ,MAAM,KAAN,EAAZ;AACA,QAAG,MAAM,OAAN,CAAc,KAAd,CAAH,EAAwB;AACtB,aAAO,KAAK,aAAL,EAAP;AACD;AACD,WAAO,KAAK,KAAL,CAAW,KAAX,CAAP;AACD,G;;;;;;;;mBAMD,K,kBAAM,K,EAAM;AACV,QAAG,MAAM,OAAN,CAAc,KAAd,CAAH,EAAwB;AACtB,aAAO,KAAK,UAAL,CAAgB,KAAhB,CAAP;AACD;AACD,SAAI,IAAI,MAAR,IAAkB,KAAlB,EAAwB;AACtB,UAAI,MAAM,MAAM,MAAN,EAAc,GAAxB;AACA,UAAG,CAAC,GAAD,IAAQ,IAAI,IAAJ,CAAS,KAAK,IAAL,CAAU,QAAnB,CAAX,EAAwC;AACtC,aAAK,MAAL,GAAc,MAAd;AACA,eAAO,KAAK,UAAL,CAAgB,MAAM,MAAN,EAAc,QAA9B,CAAP;AACD;AACF;AACD,WAAO,KAAK,aAAL,EAAP;AACD,G;;;;;;;;mBAMD,U,uBAAW,K,EAAM;AACf,QAAI,SAAS,MAAM,MAAnB;AACA,QAAI,WAAW,KAAK,IAAL,CAAU,QAAzB;AACA,QAAI,WAAW,CAAX,IAAgB,CAAC,QAArB,EAA+B;AAC7B,aAAO,KAAK,aAAL,EAAP;AACD;AACD,QAAI,cAAJ;QAAW,aAAX;QAAiB,cAAjB;QAAwB,aAAxB;AACA,SAAI,IAAI,IAAI,CAAZ,EAAe,IAAI,MAAnB,EAA2B,GAA3B,EAA+B;AAC7B,aAAO,MAAM,CAAN,CAAP;AACA,cAAQ,KAAK,QAAL,CAAc,KAAK,CAAL,CAAd,CAAR;AACA,UAAI,CAAC,KAAL,EAAY;AACV;AACD;AACD,aAAO,KAAK,CAAL,CAAP;;AAEA,UAAI,MAAM,QAAN,CAAe,IAAf,CAAJ,EAA0B;AACxB,gBAAQ,SAAS,KAAT,CAAe,IAAf,CAAR;AACA,YAAI,KAAJ,EAAW;AACT,iBAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,KAA5B,CAAP;AACD;AACF;;AALD,WAOK,IAAI,KAAK,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AACjC,iBAAO,KAAK,UAAL,CAAgB,KAAhB,CAAP;AACD;AACF;AACD,WAAO,KAAK,aAAL,EAAP;AACD,G;;;;;;;mBAKD,a,4BAAe;AACb,QAAI,WAAW,KAAK,IAAL,CAAU,QAAzB;AACA,QAAG,aAAa,GAAhB,EAAoB;AAClB,WAAK,IAAL,CAAU,QAAV,GAAqB,EAArB;AACA;AACD;AACD,QAAI,SAAS,CAAT,MAAgB,GAApB,EAAyB;AACvB,iBAAW,SAAS,KAAT,CAAe,CAAf,CAAX;AACD;AACD,QAAI,SAAS,KAAT,CAAe,CAAC,CAAhB,MAAuB,GAA3B,EAAgC;AAC9B,iBAAW,SAAS,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACD;AACD,SAAK,IAAL,CAAU,QAAV,GAAqB,QAArB;AACD,G;;;;;;;mBAKD,W,0BAAa;AACX,QAAI,gBAAgB,MAAM,MAAN,CAAa,gBAAb,CAApB;AACA,QAAG,MAAM,IAAN,KAAe,MAAM,WAAxB,EAAoC;AAClC,aAAO,aAAP;AACD;AACD,QAAI,OAAO,KAAK,IAAhB;AACA,QAAI,WAAW,KAAK,QAApB;AACA,QAAI,MAAM,SAAS,OAAT,CAAiB,GAAjB,CAAV;AACA,QAAI,MAAM,QAAQ,CAAC,CAAT,GAAa,QAAb,GAAwB,SAAS,MAAT,CAAgB,CAAhB,EAAmB,GAAnB,CAAlC;AACA,QAAG,KAAK,MAAR,EAAe;AACb,UAAG,KAAK,MAAL,KAAgB,GAAnB,EAAuB;AACrB,aAAK,QAAL,GAAgB,SAAS,MAAT,CAAgB,IAAI,MAAJ,GAAa,CAA7B,CAAhB;AACD,OAFD,MAEM;AACJ,cAAM,KAAK,MAAX;AACD;AACF,KAND,MAMM,IAAI,OAAO,QAAQ,MAAM,OAAN,CAAc,MAA7B,IAAuC,MAAM,MAAN,CAAa,OAAb,CAAqB,GAArB,IAA4B,CAAC,CAAxE,EAA2E;AAC/E,WAAK,QAAL,GAAgB,SAAS,MAAT,CAAgB,IAAI,MAAJ,GAAa,CAA7B,CAAhB;AACD,KAFK,MAED;AACH,YAAM,EAAN;AACD;AACD,WAAO,KAAK,SAAL,CAAe,GAAf,CAAP;AACD,G;;;;;;;mBAKD,e,4BAAgB,M,EAAO;AACrB,QAAI,iBAAiB,UAAU,aAAV,CAAwB,MAAxB,CAArB;AACA,QAAI,OAAO,KAAK,IAAhB;AACA,QAAI,WAAW,KAAK,QAApB;AACA,QAAG,CAAC,QAAJ,EAAa;AACX,aAAO,EAAP;AACD;AACD,QAAI,MAAM,SAAS,OAAT,CAAiB,GAAjB,CAAV;;AAEA,QAAG,MAAM,CAAC,CAAP,IAAY,cAAf,EAA8B;AAC5B,WAAI,IAAI,IAAI,CAAR,EAAW,SAAS,eAAe,MAAnC,EAA2C,IAA/C,EAAqD,IAAI,MAAzD,EAAiE,GAAjE,EAAqE;AACnE,eAAO,eAAe,CAAf,CAAP;AACA,YAAG,aAAa,IAAb,IAAqB,SAAS,OAAT,CAAiB,OAAO,GAAxB,MAAiC,CAAzD,EAA2D;AACzD,eAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,MAAd,CAAqB,KAAK,MAAL,GAAc,CAAnC,CAAhB;AACA,iBAAO,IAAP;AACD;AACF;AACF;AACD,QAAI,aAAa,QAAQ,CAAC,CAAT,GAAa,QAAb,GAAwB,SAAS,MAAT,CAAgB,CAAhB,EAAmB,GAAnB,CAAzC;AACA,SAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,MAAd,CAAqB,WAAW,MAAX,GAAoB,CAAzC,CAAhB;AACA,WAAO,UAAP;AACD,G;;;;;;;mBAKD,a,4BAAe;AACb,QAAI,OAAO,KAAK,IAAhB;AACA,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAK,IAAL,CAAU,MAAV,GAAmB,KAAK,SAAL,EAAnB;AACA,WAAK,IAAL,CAAU,UAAV,GAAuB,KAAK,aAAL,EAAvB;AACA,WAAK,IAAL,CAAU,MAAV,GAAmB,KAAK,SAAL,EAAnB;AACA;AACD;AACD,QAAI,SAAS,KAAK,WAAL,EAAb;AACA,QAAI,aAAa,KAAK,eAAL,CAAqB,MAArB,CAAjB;AACA,QAAI,QAAQ,KAAK,QAAL,CAAc,KAAd,CAAoB,GAApB,CAAZ;AACA,QAAI,SAAS,MAAM,KAAN,EAAb;;AAEA,SAAK,YAAL,CAAkB,KAAlB;;AAEA,SAAK,IAAL,CAAU,MAAV,GAAmB,MAAnB,C;AACA,SAAK,IAAL,CAAU,UAAV,GAAuB,KAAK,aAAL,CAAmB,UAAnB,CAAvB;AACA,SAAK,IAAL,CAAU,MAAV,GAAmB,KAAK,SAAL,CAAe,MAAf,CAAnB;;AAEA,QAAI,CAAC,KAAK,IAAL,CAAU,UAAf,EAA2B;AACzB,WAAK,IAAL,CAAU,KAAV,GAAkB,IAAI,KAAJ,CAAU,MAAM,MAAN,CAAa,oBAAb,EAAmC,UAAnC,EAA+C,KAAK,IAAL,CAAU,GAAzD,CAAV,CAAlB;AACA,aAAO,MAAM,YAAN,CAAmB,GAAnB,EAAwB,IAAxB,CAAP;AACD;AACD,QAAI,CAAC,KAAK,IAAL,CAAU,MAAf,EAAuB;AACrB,WAAK,IAAL,CAAU,KAAV,GAAkB,IAAI,KAAJ,CAAU,MAAM,MAAN,CAAa,gBAAb,EAA+B,MAA/B,EAAuC,KAAK,IAAL,CAAU,GAAjD,CAAV,CAAlB;AACA,aAAO,MAAM,YAAN,CAAmB,GAAnB,EAAwB,IAAxB,CAAP;AACD;AACF,G;;;;;;;;mBAMD,Y,yBAAa,K,EAAM;AACjB,QAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACD;AACD,QAAI,CAAC,MAAM,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,UAAI,MAAM,CAAN,MAAa,GAAjB,EAAsB;AACpB,gBAAQ,MAAM,KAAN,CAAY,CAAZ,CAAR;AACD;AACD,cAAQ,MAAM,KAAN,CAAY,GAAZ,CAAR;AACD;AACD,SAAI,IAAI,IAAI,CAAR,EAAW,IAAX,EAAiB,SAAS,KAAK,IAAL,CAAU,MAAM,MAAhB,IAA0B,CAAxD,EAA2D,IAAI,MAA/D,EAAuE,GAAvE,EAA2E;AACzE,aAAO,MAAM,IAAI,CAAV,CAAP;AACA,UAAG,IAAH,EAAQ;AACN,aAAK,IAAL,CAAU,IAAV,CAAe,IAAf,IAAuB,mBAAmB,MAAM,IAAI,CAAJ,GAAQ,CAAd,KAAoB,EAAvC,CAAvB;AACD;AACF;AACF,G;;;;;;;;mBAMD,a,0BAAc,I,EAAK;AACjB,QAAI,WAAW,KAAK,IAAL,CAAU,QAAV,CAAmB,KAAnB,CAAyB,GAAzB,CAAf;AACA,WAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACA,QAAI,IAAI,CAAR;QAAW,SAAS,KAAK,MAAzB;QAAiC,UAAU,SAAS,MAApD;QAA4D,aAA5D;QAAkE,cAAlE;;AAEA,QAAI,SAAS,OAAb,EAAsB;AACpB,aAAO,KAAP;AACD;AACD,QAAI,QAAQ,EAAZ;AACA,WAAM,IAAI,MAAV,EAAkB,GAAlB,EAAsB;AACpB,aAAO,KAAK,CAAL,CAAP;AACA,cAAQ,SAAS,CAAT,CAAR;AACA,UAAI,KAAK,OAAL,CAAa,GAAb,MAAsB,CAA1B,EAA6B;AAC3B,cAAM,KAAK,KAAL,CAAW,CAAX,CAAN,IAAuB,KAAvB;AACD,OAFD,MAEK;AACH,YAAI,MAAM,WAAN,OAAwB,KAAK,WAAL,EAA5B,EAAgD;AAC9C,iBAAO,KAAP;AACD;AACF;AACF;;AAED,SAAI,IAAI,GAAR,IAAe,KAAf,EAAqB;AACnB,WAAK,IAAL,CAAU,IAAV,CAAe,GAAf,IAAsB,MAAM,GAAN,CAAtB;AACD;AACD,QAAI,UAAU,MAAd,EAAsB;AACpB,WAAK,YAAL,CAAkB,SAAS,KAAT,CAAe,MAAf,CAAlB;AACD;AACD,WAAO,IAAP;AACD,G;;;;;;;;;mBAOD,Q,qBAAS,K,EAAM;AACb,QAAI,MAAM,QAAN,CAAe,KAAf,CAAJ,EAA2B;AACzB,aAAO,KAAP;AACD;AACD,SAAI,IAAI,MAAR,IAAkB,KAAlB,EAAwB;AACtB,UAAI,OAAO,WAAP,GAAqB,OAArB,CAA6B,KAAK,IAAL,CAAU,MAAvC,IAAiD,CAAC,CAAtD,EAAyD;AACvD,eAAO,MAAM,MAAN,CAAP;AACD;AACF;AACD,WAAO,EAAP;AACD,G;;;;;;;;mBAMD,U,uBAAW,K,EAAM;AACf,QAAI,MAAM,OAAN,CAAc,GAAd,IAAqB,CAAC,CAA1B,EAA6B;AAC3B,UAAI,UAAU,cAAI,KAAJ,CAAU,KAAV,EAAiB,IAAjB,CAAd;AACA,UAAI,QAAQ,QAAQ,KAApB;AACA,WAAI,IAAI,GAAR,IAAe,KAAf,EAAqB;AACnB,YAAI,MAAM,GAAN,KAAc,EAAE,OAAO,KAAK,IAAL,CAAU,IAAnB,CAAlB,EAA4C;AAC1C,eAAK,IAAL,CAAU,IAAV,CAAe,GAAf,IAAsB,MAAM,GAAN,CAAtB;AACD;AACF;AACD,cAAQ,QAAQ,QAAhB;AACD;AACD,QAAI,MAAM,CAAN,MAAa,GAAjB,EAAsB;AACpB,cAAQ,MAAM,KAAN,CAAY,CAAZ,CAAR;AACD;AACD,SAAK,IAAL,CAAU,QAAV,GAAqB,KAArB;AACA,WAAO,KAAK,aAAL,EAAP;AACD,G;;;;;;;;;mBAOD,e,4BAAgB,O,EAAS,K,EAAM;;;AAG7B,YAAQ,MAAM,OAAN,CAAc,SAAd,EAAyB,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAW,QAAQ,CAAR,KAAc,EAAzB;AAAA,KAAzB,CAAR;AACA,QAAI,WAAW,KAAK,IAAL,CAAU,QAAV,CAAmB,KAAnB,CAAyB,QAAQ,CAAR,EAAW,MAApC,CAAf;AACA,SAAK,YAAL,CAAkB,QAAlB;AACA,SAAK,UAAL,CAAgB,KAAhB;AACD,G;;;;;;;;mBAMD,c,2BAAe,K,EAAM;;AAEnB,QAAG,MAAM,OAAN,CAAc,GAAd,IAAqB,CAAC,CAAzB,EAA2B;AACzB;AACD;AACD,QAAI,QAAQ,MAAM,WAAN,EAAZ;AACA,QAAG,UAAU,KAAb,EAAmB;AACjB,YAAM,GAAN,CAAU,kBAAU;AAClB,eAAO,OAAO,MAAP,CAAc,WAAd,UAAmC,MAAM,MAAN,CAAa,mBAAb,EAAkC,KAAlC,CAA1C;AACD,OAFD;AAGD;AACF,G;;;;;;;;mBAMA,S,sBAAU,M,EAAO;AAChB,QAAI,CAAC,MAAD,IAAW,MAAM,IAAN,KAAe,MAAM,WAApC,EAAiD;AAC/C,aAAO,MAAM,MAAN,CAAa,gBAAb,CAAP;AACD;AACD,SAAK,cAAL,CAAoB,MAApB;AACA,WAAO,OAAO,WAAP,EAAP;AACD,G;;;;;;;;mBAMD,a,0BAAc,U,EAAW;AACvB,QAAI,CAAC,UAAL,EAAiB;AACf,aAAO,MAAM,MAAN,CAAa,oBAAb,CAAP;AACD;;AAED,QAAI,YAAY,IAAZ,CAAiB,UAAjB,CAAJ,EAAkC;AAChC,WAAK,cAAL,CAAoB,UAApB;AACA,aAAO,WAAW,WAAX,EAAP;AACD;AACD,WAAO,EAAP;AACD,G;;;;;;;;mBAMD,S,sBAAU,M,EAAO;AACf,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,MAAM,MAAN,CAAa,gBAAb,CAAP;AACD;;;AAGD,QAAI,YAAY,IAAZ,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B,WAAK,cAAL,CAAoB,MAApB;AACA,aAAO,OAAO,WAAP,EAAP;AACD;AACD,WAAO,EAAP;AACD,G;;;EArV0B,MAAM,UAAN,CAAiB,I","file":"parse_route.js","sourcesContent":["'use strict';\n\nimport url from 'url';\n\n/**\n * route array rules:\n * [\n *   [/^user\\/(\\d+)/, 'home/user/detail?id=:1'],\n *   [/^usr\\/(\\d+)/, {\n *     get: 'home/user/detail?id=:1',\n *     post: 'home/user/delete?id=:1'\n *   }],\n *   ...\n * ]\n *\n * route object rules:\n * {\n *   admin: {\n *     reg: /^admin/,\n *     children: [\n *       \n *     ]\n *   }\n * }\n */\n\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    this.cleanPathname();\n\n    if (!this.config('route_on')) {\n      return this.parsePathname();\n    }\n\n    let rules = think.route();\n    if(think.isEmpty(rules)){\n      return this.parsePathname();\n    }\n    return this.parse(rules);\n  }\n  /**\n   * parse routes\n   * @param  {Array} routes [routes]\n   * @return {}        []\n   */\n  parse(rules){\n    if(think.isArray(rules)){\n      return this.parseRules(rules);\n    }\n    for(let module in rules){\n      let reg = rules[module].reg;\n      if(!reg || reg.test(this.http.pathname)){\n        this.module = module;\n        return this.parseRules(rules[module].children);\n      }\n    }\n    return this.parsePathname();\n  }\n  /**\n   * parse array rules\n   * @param  {Array} rules []\n   * @return {}       []\n   */\n  parseRules(rules){\n    let length = rules.length;\n    let pathname = this.http.pathname;\n    if (length === 0 || !pathname) {\n      return this.parsePathname();\n    }\n    let match, item, route, rule;\n    for(let i = 0; i < length; i++){\n      item = rules[i];\n      route = this.getRoute(item[1]);\n      if (!route) {\n        continue;\n      }\n      rule = item[0];\n      //regexp route\n      if (think.isRegExp(rule)) {\n        match = pathname.match(rule);\n        if (match) {\n          return this.parseRegExpRule(match, route);\n        }\n      }\n      //is string route\n      else if (this.checkUrlMatch(rule)) {\n        return this.parseRoute(route);\n      }\n    }\n    return this.parsePathname();\n  }\n  /**\n   * remove / start | end of pathname\n   * @return {} []\n   */\n  cleanPathname(){\n    let pathname = this.http.pathname;\n    if(pathname === '/'){\n      this.http.pathname = '';\n      return;\n    }\n    if (pathname[0] === '/') {\n      pathname = pathname.slice(1);\n    }\n    if (pathname.slice(-1) === '/') {\n      pathname = pathname.slice(0, -1);\n    }\n    this.http.pathname = pathname;\n  }\n  /**\n   * get module from pathname\n   * @return {String} []\n   */\n  parseModule(){\n    let defaultModule = think.config('default_module');\n    if(think.mode === think.mode_normal){\n      return defaultModule;\n    }\n    let http = this.http;\n    let pathname = http.pathname;\n    let pos = pathname.indexOf('/');\n    let mod = pos === -1 ? pathname : pathname.substr(0, pos);\n    if(this.module){\n      if(this.module === mod){\n        http.pathname = pathname.substr(mod.length + 1);\n      }else {\n        mod = this.module;\n      }\n    }else if (mod && mod !== think.dirname.common && think.module.indexOf(mod) > -1) {\n      http.pathname = pathname.substr(mod.length + 1);\n    }else{\n      mod = '';\n    }\n    return this.getModule(mod);\n  }\n  /**\n   * get controller from pathname\n   * @return {} []\n   */\n  parseController(module){\n    let subControllers = thinkData.subController[module];\n    let http = this.http;\n    let pathname = http.pathname;\n    if(!pathname){\n      return '';\n    }\n    let pos = pathname.indexOf('/');\n    //search sub controller\n    if(pos > -1 && subControllers){\n      for(let i = 0, length = subControllers.length, item; i < length; i++){\n        item = subControllers[i];\n        if(pathname === item || pathname.indexOf(item + '/') === 0){\n          http.pathname = http.pathname.substr(item.length + 1);\n          return item;\n        }\n      } \n    }\n    let controller = pos === -1 ? pathname : pathname.substr(0, pos);\n    http.pathname = http.pathname.substr(controller.length + 1);\n    return controller;\n  }\n  /**\n   * parse pathname\n   * @return {} []\n   */\n  parsePathname(){\n    let http = this.http;\n    if (!http.pathname) {\n      this.http.module = this.getModule();\n      this.http.controller = this.getController();\n      this.http.action = this.getAction();\n      return;\n    }\n    let module = this.parseModule();\n    let controller = this.parseController(module);\n    let paths = http.pathname.split('/');\n    let action = paths.shift();\n\n    this.parseExtPath(paths);\n\n    this.http.module = module; //module not need check\n    this.http.controller = this.getController(controller);\n    this.http.action = this.getAction(action);\n\n    if (!this.http.controller) {\n      this.http.error = new Error(think.locale('CONTROLLER_INVALID', controller, this.http.url));\n      return think.statusAction(400, http);\n    }\n    if (!this.http.action) {\n      this.http.error = new Error(think.locale('ACTION_INVALID', action, this.http.url));\n      return think.statusAction(400, http);\n    }\n  }\n  /**\n   * parse extra path\n   * @param  {Array} paths [extra path]\n   * @return {}       []\n   */\n  parseExtPath(paths){\n    if (paths.length === 0) {\n      return;\n    }\n    if (!think.isArray(paths)) {\n      if (paths[0] === '/') {\n        paths = paths.slice(1);\n      }\n      paths = paths.split('/');\n    }\n    for(let i = 0, name, length = Math.ceil(paths.length) / 2; i < length; i++){\n      name = paths[i * 2];\n      if(name){\n        this.http._get[name] = decodeURIComponent(paths[i * 2 + 1] || '');\n      }\n    }\n  }\n  /**\n   * check url is match\n   * @param  {String} rule [url rule]\n   * @return {Boolean}      []\n   */\n  checkUrlMatch(rule){\n    let pathname = this.http.pathname.split('/');\n    rule = rule.split('/');\n    let i = 0, length = rule.length, plength = pathname.length, item, pitem;\n    //if rule lenth is more than pathname, it will be false\n    if (length > plength) {\n      return false;\n    }\n    let match = {};\n    for(; i < length; i++){\n      item = rule[i];\n      pitem = pathname[i];\n      if (item.indexOf(':') === 0) {\n        match[item.slice(1)] = pitem;\n      }else{\n        if (pitem.toLowerCase() !== item.toLowerCase()) {\n          return false;\n        }\n      }\n    }\n    //append match data to this.http._get\n    for(let key in match){\n      this.http._get[key] = match[key];\n    }\n    if (plength > length) {\n      this.parseExtPath(pathname.slice(length));\n    }\n    return true;\n  }\n  /**\n   * get route\n   * @param  {Object} route   []\n   * @param  {Array} matches []\n   * @return {[type]}         []\n   */\n  getRoute(route){\n    if (think.isString(route)) {\n      return route;\n    }\n    for(let method in route){\n      if (method.toUpperCase().indexOf(this.http.method) > -1) {\n        return route[method];\n      }\n    }\n    return '';\n  }\n  /**\n   * parse route string\n   * @param  {String} route []\n   * @return {}       []\n   */\n  parseRoute(route){\n    if (route.indexOf('?') > -1) {\n      let urlInfo = url.parse(route, true);\n      let query = urlInfo.query;\n      for(let key in query){\n        if (query[key] || !(key in this.http._get)) {\n          this.http._get[key] = query[key];\n        }\n      }\n      route = urlInfo.pathname;\n    }\n    if (route[0] === '/') {\n      route = route.slice(1);\n    }\n    this.http.pathname = route;\n    return this.parsePathname();\n  }\n  /**\n   * parse regexp rule\n   * @param  {Array} matches  [route matches]\n   * @param  {String | Object} route    [route]\n   * @return {Boolean}          []\n   */\n  parseRegExpRule(matches, route){\n    //replace :1, :2 in route\n    //such as: group/detail?date=:1&groupId=:2&page=:3\n    route = route.replace(/:(\\d+)/g, (a, b) => (matches[b] || ''));\n    let pathname = this.http.pathname.slice(matches[0].length);\n    this.parseExtPath(pathname);\n    this.parseRoute(route);\n  }\n  /**\n   * check value is lowerCase\n   * @param  {String} value []\n   * @return {}       []\n   */\n  checkLowerCase(value){\n    // if value has - chars, not check, for REST API\n    if(value.indexOf('-') > -1){\n      return;\n    }\n    let lower = value.toLowerCase();\n    if(value !== lower){\n      think.log(colors => {\n        return colors.yellow('[WARNING]') + ` ` + think.locale('URL_HAS_UPPERCASE', value);\n      });\n    }\n  }\n  /**\n   * get module name\n   * @param  {String} module []\n   * @return {String}        []\n   */\n   getModule(module){\n    if (!module || think.mode === think.mode_normal) {\n      return think.config('default_module');\n    }\n    this.checkLowerCase(module);\n    return module.toLowerCase();\n  }\n  /**\n   * get controller name\n   * @param  {String} controller []\n   * @return {String}            []\n   */\n  getController(controller){\n    if (!controller) {\n      return think.config('default_controller');\n    }\n    //has / in controller\n    if (/^[\\w\\/]+$/.test(controller)) {\n      this.checkLowerCase(controller);\n      return controller.toLowerCase();\n    }\n    return '';\n  }\n  /**\n   * get action\n   * @param  {String} action [action name]\n   * @return {String}        []\n   */\n  getAction(action){\n    if (!action) {\n      return think.config('default_action');\n    }\n    // action name support `-` char, for REST API\n    // /api/system/3b6c279c-bd61-f093-c543-56f9ab4300b7\n    if (/^[\\w\\-]+$/.test(action)) {\n      this.checkLowerCase(action);\n      return action.toLowerCase();\n    }\n    return '';\n  }\n}"]}