{"version":3,"sources":["../../src/middleware/parse_form_payload.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;AAGA,IAAM,iBAAiB,qEAAvB;;;;;;;;;;;;;;;;;;;;mBAWE,G,kBAAK;AACH,QAAI,OAAO,KAAK,IAAhB;AACA,QAAG,CAAC,KAAK,GAAL,CAAS,QAAb,EAAsB;AACpB;AACD;;;;AAID,QAAI,CAAC,eAAe,IAAf,CAAoB,KAAK,OAAL,CAAa,cAAb,CAApB,CAAL,EAAwD;AACtD;AACD;;;AAGD,QAAI,YAAY,MAAM,MAAN,CAAa,uBAAb,CAAhB;AACA,QAAG,CAAC,SAAJ,EAAc;AACZ,kBAAY,aAAG,MAAH,KAAc,MAAM,GAApB,GAA0B,SAA1B,GAAsC,MAAM,GAA5C,GAAkD,QAA9D;AACD;AACD,UAAM,KAAN,CAAY,SAAZ;;AAEA,WAAO,KAAK,WAAL,CAAiB,SAAjB,CAAP;AACD,G;;;;;;;mBAKD,W,wBAAY,S,EAAU;AACpB,QAAI,OAAO,KAAK,IAAhB;AACA,QAAI,WAAW,MAAM,KAAN,EAAf;AACA,QAAI,aAAa,MAAM,MAAN,CAAa,MAAb,CAAjB;AACA,QAAI,OAAO,IAAI,qBAAW,IAAf,CAAoB;AAC7B,qBAAe,WAAW,eADG;AAE7B,iBAAW,WAAW,UAFO;AAG7B,oBAAc,WAAW,aAHI;AAI7B,iBAAW;AAJkB,KAApB,CAAX;;AAOA,QAAI,QAAQ,KAAK,KAAjB;AACA,SAAK,EAAL,CAAQ,MAAR,EAAgB,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC/B,UAAI,QAAQ,KAAZ,EAAmB;AACjB,YAAI,CAAC,MAAM,OAAN,CAAc,MAAM,IAAN,CAAd,CAAL,EAAiC;AAC/B,gBAAM,IAAN,IAAc,CAAC,MAAM,IAAN,CAAD,CAAd;AACD;AACD,cAAM,IAAN,EAAY,IAAZ,CAAiB,KAAjB;AACD,OALD,MAKK;AACH,cAAM,IAAN,IAAc,KAAd;AACD;AACF,KATD;AAUA,SAAK,EAAL,CAAQ,OAAR,EAAiB,UAAC,IAAD,EAAO,KAAP,EAAiB;AAChC,WAAK,KAAL,CAAW,IAAX,IAAmB,KAAnB;AACD,KAFD;AAGA,SAAK,EAAL,CAAQ,OAAR,EAAiB,YAAM;AACrB,eAAS,OAAT,CAAiB,IAAjB;AACD,KAFD;AAGA,SAAK,EAAL,CAAQ,OAAR,EAAiB,eAAO;AACtB,WAAK,GAAL,CAAS,MAAT;AACA,WAAK,GAAL,CAAS,UAAT,GAAsB,GAAtB;AACA,WAAK,GAAL;;AAEA,UAAG,KAAK,MAAL,CAAY,gBAAZ,CAAH,EAAiC;AAC/B,cAAM,GAAN,CAAU,GAAV;AACD;AACF,KARD;AASA,SAAK,KAAL,CAAW,KAAK,GAAhB;AACA,WAAO,SAAS,OAAhB;AACD,G;;;EArE0B,MAAM,UAAN,CAAiB,I","file":"parse_form_payload.js","sourcesContent":["'use strict';\n\nimport os from 'os';\nimport multiparty from 'multiparty';\n\n\nconst MULTIPARTY_REG = /^multipart\\/(form-data|related);\\s*boundary=(?:\"([^\"]+)\"|([^;]+))$/i;\n\n/**\n * parse form payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    if(!http.req.readable){\n      return;\n    }\n\n    //file upload by form or FormData\n    //can not use http.type method\n    if (!MULTIPARTY_REG.test(http.headers['content-type'])) {\n      return;\n    }\n\n    //make upload file path\n    let uploadDir = think.config('post.file_upload_path');\n    if(!uploadDir){\n      uploadDir = os.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getFormData(uploadDir);\n  }\n  /**\n   * get form data\n   * @return {Promise} []\n   */\n  getFormData(uploadDir){\n    let http = this.http;\n    let deferred = think.defer();\n    let postConfig = think.config('post');\n    let form = new multiparty.Form({\n      maxFieldsSize: postConfig.max_fields_size,\n      maxFields: postConfig.max_fields,\n      maxFilesSize: postConfig.max_file_size,\n      uploadDir: uploadDir\n    });\n    //support for file with multiple=\"multiple\"\n    let files = http._file;\n    form.on('file', (name, value) => {\n      if (name in files) {\n        if (!think.isArray(files[name])) {\n          files[name] = [files[name]];\n        }\n        files[name].push(value);\n      }else{\n        files[name] = value;\n      }\n    });\n    form.on('field', (name, value) => {\n      http._post[name] = value;\n    });\n    form.on('close', () => {\n      deferred.resolve(null);\n    });\n    form.on('error', err => {\n      http.req.resume();\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if(http.config('post.log_error')){\n        think.log(err);\n      }\n    });\n    form.parse(http.req);\n    return deferred.promise;\n  }\n}"]}