{"version":3,"sources":["../../src/middleware/parse_single_file_payload.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;mBAWE,G,kBAAK;AACH,QAAI,OAAO,KAAK,IAAhB;;AAEA,QAAG,CAAC,KAAK,GAAL,CAAS,QAAb,EAAsB;AACpB;AACD;;AAED,QAAI,OAAO,KAAK,MAAL,CAAY,MAAZ,CAAX;AACA,QAAI,WAAW,KAAK,MAAL,CAAY,KAAK,kBAAjB,CAAf;AACA,QAAG,CAAC,QAAJ,EAAa;AACX;AACD;;AAED,QAAI,YAAY,KAAK,gBAArB;AACA,QAAG,CAAC,SAAJ,EAAc;AACZ,kBAAY,aAAG,MAAH,KAAc,MAAM,GAApB,GAA0B,SAA1B,GAAsC,MAAM,GAA5C,GAAkD,QAA9D;AACD;AACD,UAAM,KAAN,CAAY,SAAZ;;AAEA,WAAO,KAAK,aAAL,CAAmB,SAAnB,EAA8B,QAA9B,CAAP;AACD,G;;;;;;;;;mBAOD,a,0BAAc,S,EAAW,Q,EAAS;AAChC,QAAI,WAAW,MAAM,KAAN,EAAf;AACA,QAAI,OAAO,KAAK,IAAhB;AACA,QAAI,OAAO,MAAM,IAAN,CAAW,EAAX,CAAX;AACA,QAAI,WAAW,YAAY,MAAM,GAAlB,GAAwB,IAAxB,GAA+B,eAAK,OAAL,CAAa,QAAb,EAAuB,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CAA9C;AACA,QAAI,SAAS,aAAG,iBAAH,CAAqB,QAArB,CAAb;AACA,SAAK,GAAL,CAAS,IAAT,CAAc,MAAd;AACA,WAAO,EAAP,CAAU,OAAV,EAAmB,eAAO;AACxB,WAAK,GAAL,CAAS,UAAT,GAAsB,GAAtB;AACA,WAAK,GAAL;;AAEA,UAAG,KAAK,MAAL,CAAY,gBAAZ,CAAH,EAAiC;AAC/B,cAAM,GAAN,CAAU,GAAV;AACD;AACF,KAPD;AAQA,WAAO,EAAP,CAAU,OAAV,EAAmB,YAAM;AACvB,WAAK,KAAL,CAAW,IAAX,GAAkB;AAChB,mBAAW,MADK;AAEhB,0BAAkB,QAFF;AAGhB,cAAM,QAHU;AAIhB,cAAM,aAAG,QAAH,CAAY,QAAZ,EAAsB;AAJZ,OAAlB;AAMA,eAAS,OAAT,CAAiB,IAAjB;AACD,KARD;AASA,WAAO,SAAS,OAAhB;AACD,G;;;EAzD0B,MAAM,UAAN,CAAiB,I","file":"parse_single_file_payload.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\n/**\n * parse single file payload, uploaded with ajax\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n\n    if(!http.req.readable){\n      return;\n    }\n\n    let post = this.config('post');\n    let filename = http.header(post.single_file_header);\n    if(!filename){\n      return;\n    }\n    \n    let uploadDir = post.file_upload_path;\n    if(!uploadDir){\n      uploadDir = os.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getUploadFile(uploadDir, filename);\n  }\n  /**\n   * get upload file\n   * @param  {String} uploadDir []\n   * @param  {String} filename  []\n   * @return {Promise}           []\n   */\n  getUploadFile(uploadDir, filename){\n    let deferred = think.defer();\n    let http = this.http;\n    let name = think.uuid(20);\n    let filepath = uploadDir + think.sep + name + path.extname(filename).slice(0, 5);\n    let stream = fs.createWriteStream(filepath);\n    http.req.pipe(stream);\n    stream.on('error', err => {\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if(http.config('post.log_error')){\n        think.log(err);\n      }\n    });\n    stream.on('close', () => {\n      http._file.file = {\n        fieldName: 'file',\n        originalFilename: filename,\n        path: filepath,\n        size: fs.statSync(filepath).size\n      };\n      deferred.resolve(null);\n    });\n    return deferred.promise;\n  }\n}"]}