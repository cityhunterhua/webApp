{"version":3,"sources":["../../src/middleware/parse_querystring_payload.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;mBAWE,G,kBAAK;AACH,QAAI,OAAO,KAAK,IAAhB;;AAEA,QAAI,CAAC,KAAK,GAAL,CAAS,QAAd,EAAwB;AACtB;AACD;;AAED,QAAI,cAAc,KAAK,IAAL,EAAlB;AACA,QAAG,eAAe,YAAY,OAAZ,CAAoB,mCAApB,MAA6D,CAAC,CAAhF,EAAkF;AAChF;AACD;;AAED,WAAO,KAAK,UAAL,GAAkB,IAAlB,CAAuB,mBAAW;AACvC,WAAK,KAAL,GAAa,MAAM,MAAN,CAAa,KAAK,KAAlB,EAAyB,sBAAY,KAAZ,CAAkB,OAAlB,CAAzB,CAAb;AACA,aAAO,IAAP;AACD,KAHM,CAAP;AAID,G;;;EArB0B,MAAM,UAAN,CAAiB,I","file":"parse_querystring_payload.js","sourcesContent":["'use strict';\n\nimport querystring from 'querystring';\n\n/**\n * parse json payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    \n    if (!http.req.readable) {\n      return;\n    }\n\n    let contentType = http.type();\n    if(contentType && contentType.indexOf('application/x-www-form-urlencoded') === -1){\n      return;\n    }\n    \n    return http.getPayload().then(payload => {\n      http._post = think.extend(http._post, querystring.parse(payload));\n      return null;\n    });\n  }\n}"]}