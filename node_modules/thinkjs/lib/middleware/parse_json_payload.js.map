{"version":3,"sources":["../../src/middleware/parse_json_payload.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;mBAWE,G,kBAAK;AACH,QAAI,OAAO,KAAK,IAAhB;AACA,QAAG,CAAC,KAAK,GAAL,CAAS,QAAb,EAAsB;AACpB;AACD;;AAED,QAAI,QAAQ,KAAK,MAAL,CAAY,wBAAZ,CAAZ;AACA,QAAI,MAAM,OAAN,CAAc,KAAK,IAAL,EAAd,MAA+B,CAAC,CAApC,EAAuC;AACrC;AACD;AACD,WAAO,KAAK,UAAL,GAAkB,IAAlB,CAAuB,mBAAW;AACvC,UAAI,aAAJ;AACA,UAAG;AACD,eAAO,KAAK,KAAL,CAAW,OAAX,CAAP;AACD,OAFD,CAEC,OAAM,CAAN,EAAQ;;AAEP,YAAG,KAAK,MAAL,CAAY,gBAAZ,CAAH,EAAiC;AAC/B,gBAAM,GAAN,CAAU,IAAI,KAAJ,CAAU,oDAAV,CAAV;AACD;;;AAGD,eAAO,sBAAY,KAAZ,CAAkB,OAAlB,CAAP;AACD;AACD,UAAG,CAAC,MAAM,OAAN,CAAc,IAAd,CAAJ,EAAwB;AACtB,aAAK,KAAL,GAAa,MAAM,MAAN,CAAa,KAAK,KAAlB,EAAyB,IAAzB,CAAb;AACD;AACD,aAAO,IAAP;AACD,KAjBM,CAAP;AAkBD,G;;;EAjC0B,MAAM,UAAN,CAAiB,I","file":"parse_json_payload.js","sourcesContent":["'use strict';\n\nimport querystring from 'querystring';\n\n/**\n * parse json payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    if(!http.req.readable){\n      return;\n    }\n\n    let types = http.config('post.json_content_type');\n    if (types.indexOf(http.type()) === -1) {\n      return;\n    }\n    return http.getPayload().then(payload => {\n      let data;\n      try{\n        data = JSON.parse(payload);\n      }catch(e){\n        //log error\n        if(http.config('post.log_error')){\n          think.log(new Error('JSON.parse error, payload is not a valid JSON data'));\n        }\n        //if using json parse error, then use querystring parse.\n        //sometimes http header has json content-type, but payload data is querystring data\n        data = querystring.parse(payload);\n      }\n      if(!think.isEmpty(data)){\n        http._post = think.extend(http._post, data);\n      }\n      return null;\n    });\n  }\n}"]}