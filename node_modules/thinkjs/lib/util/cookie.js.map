{"version":3,"sources":["../../src/util/cookie.js"],"names":[],"mappings":"AAAA;;;;AAEA;;;;;;;;;;AAKA,IAAI,SAAS;;;;;;AAMX,SAAO,oBAAO;AACZ,QAAI,OAAO,EAAX;AACA,QAAI,CAAC,GAAL,EAAU;AACR,aAAO,IAAP;AACD;AACD,QAAI,KAAJ,CAAU,KAAV,EAAiB,OAAjB,CAAyB,gBAAQ;AAC/B,UAAI,MAAM,KAAK,OAAL,CAAa,GAAb,CAAV;AACA,UAAI,QAAQ,CAAC,CAAb,EAAgB;AACd;AACD;AACD,UAAI,MAAM,KAAK,MAAL,CAAY,CAAZ,EAAe,GAAf,EAAoB,IAApB,EAAV;AACA,UAAI,MAAM,KAAK,MAAL,CAAY,MAAM,CAAlB,EAAqB,IAArB,EAAV;AACA,UAAI,QAAQ,IAAI,CAAJ,CAAZ,EAAoB;AAClB,cAAM,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACD;;AAED,UAAI,cAAc,KAAK,GAAL,CAAlB,EAA6B;AAC3B,YAAI;AACF,eAAK,GAAL,IAAY,mBAAmB,GAAnB,CAAZ;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,eAAK,GAAL,IAAY,GAAZ;AACD;AACF;AACF,KAlBD;AAmBA,WAAO,IAAP;AACD,GA/BU;;;;;;;;AAuCX,aAAW,mBAAC,IAAD,EAAO,KAAP,EAAc,OAAd,EAA0B;AACnC,cAAU,WAAW,EAArB;AACA,QAAI,OAAO,CAAC,OAAO,GAAP,GAAa,mBAAmB,KAAnB,CAAd,CAAX;AACA,QAAI,QAAQ,MAAZ,EAAoB;AAClB,WAAK,IAAL,CAAU,aAAa,QAAQ,MAA/B;AACD;AACD,QAAI,QAAQ,MAAZ,EAAoB;AAClB,WAAK,IAAL,CAAU,YAAY,QAAQ,MAA9B;AACD;AACD,QAAI,QAAQ,IAAZ,EAAkB;AAChB,WAAK,IAAL,CAAU,UAAU,QAAQ,IAA5B;AACD;AACD,QAAI,UAAU,QAAQ,OAAtB;AACA,QAAI,OAAJ,EAAY;AACV,UAAI,CAAC,MAAM,MAAN,CAAa,OAAb,CAAL,EAA4B;AAC1B,kBAAU,IAAI,IAAJ,CAAS,OAAT,CAAV;AACD;AACD,WAAK,IAAL,CAAU,aAAa,QAAQ,WAAR,EAAvB;AACD;AACD,QAAI,QAAQ,QAAZ,EAAsB;AACpB,WAAK,IAAL,CAAU,UAAV;AACD;AACD,QAAI,QAAQ,MAAZ,EAAoB;AAClB,WAAK,IAAL,CAAU,QAAV;AACD;AACD,WAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AACD,GAjEU;;;;;;;AAwEX,QAAM,cAAC,GAAD,EAAsB;AAAA,QAAhB,MAAgB,yDAAP,EAAO;;AAC1B,aAAS,iBAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,EAAoC,MAApC,CAA2C,GAA3C,EAAgD,MAAhD,CAAuD,QAAvD,CAAT;AACA,aAAS,OAAO,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAT;AACA,WAAO,MAAM,GAAN,GAAY,MAAnB;AACD,GA5EU;;;;;;;AAmFX,UAAQ,gBAAC,GAAD,EAAM,MAAN,EAAiB;AACvB,QAAI,MAAM,IAAI,KAAJ,CAAU,CAAV,EAAa,IAAI,WAAJ,CAAgB,GAAhB,CAAb,CAAV;AACA,WAAO,OAAO,IAAP,CAAY,GAAZ,EAAiB,MAAjB,MAA6B,GAA7B,GAAmC,GAAnC,GAAyC,EAAhD;AACD;AAtFU,CAAb;;kBAyFe,M","file":"cookie.js","sourcesContent":["'use strict';\n\nimport crypto from 'crypto';\n/**\n * cookie\n * @type {Object}\n */\nlet Cookie = {\n  /**\n   * parse cookie\n   * @param  {String} str [cookie string]\n   * @return {Object}     []\n   */\n  parse: str => {\n    let data = {};\n    if (!str) {\n      return data;\n    }\n    str.split(/; */).forEach(item => {\n      let pos = item.indexOf('=');\n      if (pos === -1) {\n        return;\n      }\n      let key = item.substr(0, pos).trim();\n      let val = item.substr(pos + 1).trim();\n      if ('\"' === val[0]) {\n        val = val.slice(1, -1);\n      }\n      // only assign once\n      if (undefined === data[key]) {\n        try {\n          data[key] = decodeURIComponent(val);\n        } catch (e) {\n          data[key] = val;\n        }\n      }\n    });\n    return data;\n  },\n  /**\n   * stringify cookie\n   * @param  {String} name    [cookie name]\n   * @param  {String} val     [cookie value]\n   * @param  {Object} options [cookie options]\n   * @return {String}         []\n   */\n  stringify: (name, value, options) => {\n    options = options || {};\n    let item = [name + '=' + encodeURIComponent(value)];\n    if (options.maxage) {\n      item.push('Max-Age=' + options.maxage);\n    }\n    if (options.domain) {\n      item.push('Domain=' + options.domain);\n    }\n    if (options.path) {\n      item.push('Path=' + options.path);\n    }\n    let expires = options.expires;\n    if (expires){\n      if (!think.isDate(expires)) {\n        expires = new Date(expires);\n      }\n      item.push('Expires=' + expires.toUTCString());\n    } \n    if (options.httponly) {\n      item.push('HttpOnly');\n    }\n    if (options.secure) {\n      item.push('Secure');\n    }\n    return item.join('; ');\n  },\n  /**\n   * sign cookie\n   * @param  {String} val    [cookie value]\n   * @param  {String} secret [cookie sign]\n   * @return {String}        []\n   */\n  sign: (val, secret = '') => {\n    secret = crypto.createHmac('sha256', secret).update(val).digest('base64');\n    secret = secret.replace(/\\=+$/, '');\n    return val + '.' + secret;\n  },\n  /**\n   * unsign cookie\n   * @param  {String} val    [signed cookie value]\n   * @param  {String} secret [cookie sign]\n   * @return {String}        []\n   */\n  unsign: (val, secret) => {\n    let str = val.slice(0, val.lastIndexOf('.'));\n    return Cookie.sign(str, secret) === val ? str : '';\n  }\n};\n\nexport default Cookie;"]}