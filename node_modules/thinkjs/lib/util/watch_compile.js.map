{"version":3,"sources":["../../src/util/watch_compile.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;AA0BE,oBAAoB;AAAA;AAAA,SAhBpB,aAgBoB,GAhBJ,EAgBI;AAAA,SAXpB,kBAWoB,GAXC,EAWD;AAAA,SANpB,YAMoB,GANL,CAAC,KAAD,EAAQ,KAAR,CAMK;;AAClB,SAAK,IAAL;AACD;;;;;;;;;;;;;;;;;;;;mBAQD,I,iBAAK,O,EAAS,O,EAAgC;AAAA,QAAvB,OAAuB,yDAAb,EAAa;AAAA,QAAT,QAAS;;AAC5C,SAAK,OAAL,GAAe,eAAK,SAAL,CAAe,OAAf,CAAf;AACA,SAAK,OAAL,GAAe,eAAK,SAAL,CAAe,OAAf,CAAf;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,QAAL,GAAgB,QAAhB;AACD,G;;;;;;;;;mBAOD,W,wBAAY,I,EAAM,Q,EAAS;AACzB,QAAI,gBAAc,KAAK,OAAnB,GAA6B,MAAM,GAAnC,GAAyC,IAA7C;AACA,QAAI,UAAU,aAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAAd;;;AAGA,QAAG,CAAC,OAAJ,EAAY;AACV;AACD;;AAED,QAAG,QAAH,EAAY;AACV,UAAI,oBAAkB,KAAK,OAAvB,GAAiC,MAAM,GAAvC,GAA6C,IAAjD;AACA,YAAM,KAAN,CAAY,eAAK,OAAL,CAAa,YAAb,CAAZ;AACA,mBAAG,aAAH,CAAiB,YAAjB,EAA+B,OAA/B;AACA;AACD;;AAED,QAAG;AACD,UAAG,KAAK,OAAL,CAAa,IAAb,KAAsB,IAAzB,EAA8B;AAC5B,aAAK,mBAAL,CAAyB,OAAzB,EAAkC,IAAlC;AACD,OAFD,MAEK;AACH,aAAK,cAAL,CAAoB,OAApB,EAA6B,IAA7B;AACD;AACD,aAAO,IAAP;AACD,KAPD,CAOC,OAAM,CAAN,EAAQ;;AAEP,YAAM,GAAN,CAAU,kBAAU;AAClB,eAAO,OAAO,GAAP,mBAA2B,IAA3B,YAAP;AACD,OAFD,EAEG,SAFH;AAGA,YAAM,GAAN,CAAU,CAAV;;AAEA,QAAE,OAAF,GAAY,oBAAoB,EAAE,OAAlC;AACA,YAAM,YAAN,GAAqB,CAArB;AACD;AACD,WAAO,KAAP;AACD,G;;;;;;;;mBAMD,e,4BAAgB,I,EAAK;;;AAGnB,QAAI,QAAQ,eAAK,OAAL,CAAa,KAAK,OAAL,GAAe,MAAM,GAArB,GAA2B,IAAxC,CAAZ;AACA,WAAO,eAAK,QAAL,CAAc,KAAd,EAAqB,KAAK,OAAL,GAAe,MAAM,GAArB,GAA2B,IAAhD,CAAP;AACD,G;;;;;;;mBAKD,mB,gCAAoB,O,EAAS,I,EAAK;AAChC,QAAI,KAAK,QAAQ,YAAR,CAAT;AACA,QAAI,YAAY,KAAK,GAAL,EAAhB;AACA,QAAI,cAAc,EAAlB;AACA,QAAI,SAAS,GAAG,eAAH,CAAmB,OAAnB,EAA4B;AACvC,uBAAiB;AACf,gBAAQ,GAAG,UAAH,CAAc,QADP;AAEf,gBAAQ,GAAG,YAAH,CAAgB,GAFT;AAGf,gCAAwB,IAHT;AAIf,+BAAuB,IAJR;AAKf,sCAA8B,IALf;AAMf,mBAAW;AANI,OADsB;AASvC,gBAAU,IAT6B;AAUvC,yBAAmB,CAAC,CAAC;AAVkB,KAA5B,CAAb;AAYA,OAAG,QAAH,CAAY,WAAZ,EAAyB,OAAO,WAAhC;;;AAGA,QAAG,YAAY,MAAf,EAAsB;AACpB,UAAI,mBAAmB,YAAY,CAAZ,CAAvB;;AADoB,kCAEI,iBAAiB,IAAjB,CAAsB,6BAAtB,CAAoD,iBAAiB,KAArE,CAFJ;;AAAA,UAEf,IAFe,yBAEf,IAFe;AAAA,UAET,SAFS,yBAET,SAFS;;AAGpB,UAAI,UAAU,GAAG,4BAAH,CAAgC,iBAAiB,WAAjD,EAA8D,IAA9D,CAAd;AACA,YAAM,IAAI,KAAJ,CAAa,OAAb,kBAAgC,OAAO,CAAvC,qBAAuD,SAAvD,CAAN;AACD;AACD,QAAG,KAAK,OAAL,CAAa,GAAhB,EAAoB;AAClB,YAAM,GAAN,mBAA0B,IAA1B,EAAkC,YAAlC,EAAgD,SAAhD;AACD;;AAED,WAAO,KAAK,cAAL,CAAoB,IAApB,EAA0B,KAA1B,CAAP;AACA,QAAI,YAAY,KAAK,KAAL,CAAW,OAAO,aAAlB,CAAhB;AACA,cAAU,OAAV,CAAkB,CAAlB,IAAuB,KAAK,eAAL,CAAqB,IAArB,CAAvB;AACA,cAAU,cAAV,GAA2B,CAAC,OAAD,CAA3B;;AAEA,cAAU,IAAV,GAAiB,UAAU,OAAV,CAAkB,CAAlB,CAAjB;AACA,WAAO,UAAU,UAAjB;AACA,SAAK,cAAL,CAAoB,OAAO,UAA3B,EAAuC,IAAvC,EAA6C,IAA7C,EAAmD,SAAnD;AACD,G;;;;;;;mBAKD,c,2BAAe,O,EAAS,I,EAAM,M,EAAQ,c,EAAe;AACnD,QAAI,YAAY,KAAK,GAAL,EAAhB;AACA,QAAI,eAAe,KAAK,eAAL,CAAqB,IAArB,CAAnB;;;AAGA,QAAI,QAAQ,QAAQ,YAAR,CAAZ;AACA,QAAI,OAAO,MAAM,SAAN,CAAgB,OAAhB,EAAyB;AAClC,gBAAU,IADwB;AAElC,eAAS,CAAC,cAAD,EAAiB,SAAjB,EAA4B,MAA5B,CAAmC,KAAK,OAAL,CAAa,OAAb,IAAwB,EAA3D,CAFyB;AAGlC,eAAS,CAAC,mBAAD,EAAsB,MAAtB,CAA6B,KAAK,OAAL,CAAa,OAAb,IAAwB,EAArD,CAHyB;AAIlC,kBAAY,IAJsB;AAKlC,sBAAgB;AALkB,KAAzB,CAAX;AAOA,QAAG,CAAC,MAAD,IAAW,KAAK,OAAL,CAAa,GAA3B,EAA+B;AAC7B,YAAM,GAAN,mBAA0B,IAA1B,EAAkC,OAAlC,EAA2C,SAA3C;AACD;AACD,UAAM,KAAN,CAAY,eAAK,OAAL,MAAgB,KAAK,OAArB,GAA+B,MAAM,GAArC,GAA2C,IAA3C,CAAZ;AACA,QAAI,WAAW,eAAK,QAAL,CAAc,IAAd,CAAf;AACA,QAAI,SAAS,uBAAb;AACA,QAAG,KAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,MAA8B,CAAC,CAAlC,EAAoC;AAClC,WAAK,IAAL,GAAY,KAAK,IAAL,GAAY,IAAZ,GAAmB,MAAnB,GAA4B,QAA5B,GAAuC,MAAnD;AACD;AACD,iBAAG,aAAH,MAAoB,KAAK,OAAzB,GAAmC,MAAM,GAAzC,GAA+C,IAA/C,EAAuD,KAAK,IAA5D;AACA,QAAI,YAAY,KAAK,GAArB;;AAEA,cAAU,IAAV,GAAiB,UAAU,OAAV,CAAkB,CAAlB,CAAjB;AACA,QAAG,cAAH,EAAkB;AAChB,kBAAY,KAAK,cAAL,CAAoB,cAApB,EAAoC,SAApC,CAAZ;AACD;AACD,iBAAG,aAAH,MAAoB,KAAK,OAAzB,GAAmC,MAAM,GAAzC,GAA+C,IAA/C,WAA2D,yBAAe,SAAf,EAA0B,SAA1B,EAAqC,CAArC,CAA3D;AACD,G;;;;;;;;;;mBAQD,c,2BAAe,c,EAAgB,S,EAAU;AAAA,mBACO,QAAQ,YAAR,CADP;;AAAA,QAClC,kBADkC,YAClC,kBADkC;AAAA,QACd,iBADc,YACd,iBADc;;AAEvC,cAAU,IAAV,GAAiB,UAAU,IAAV,CAAe,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAjB;AACA,cAAU,OAAV,GAAoB,UAAU,OAAV,CAAkB,GAAlB,CAAsB,oBAAY;AACpD,aAAO,SAAS,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACD,KAFmB,CAApB;AAGA,QAAI,YAAY,mBAAmB,aAAnB,CAAiC,IAAI,iBAAJ,CAAsB,SAAtB,CAAjC,CAAhB;AACA,cAAU,cAAV,CAAyB,IAAI,iBAAJ,CAAsB,cAAtB,CAAzB;AACA,gBAAY,KAAK,KAAL,CAAW,UAAU,QAAV,EAAX,CAAZ;;AAEA,WAAO,SAAP;AACD,G;;;;;;;;mBAMD,kB,+BAAmB,Q,EAAU,Q,EAAS;AAAA;;AACpC,QAAI,qBAAqB,SAAS,GAAT,CAAa,gBAAQ;AAC5C,aAAO,MAAK,cAAL,CAAoB,IAApB,CAAP;AACD,KAFwB,CAAzB;AAGA,WAAO,SAAS,MAAT,CAAgB,gBAAQ;AAC7B,UAAI,UAAU,eAAK,OAAL,CAAa,IAAb,CAAd;AACA,UAAG,MAAK,YAAL,CAAkB,OAAlB,CAA0B,OAA1B,MAAuC,CAAC,CAA3C,EAA6C;AAC3C;AACD;AACD,UAAI,iBAAiB,MAAK,cAAL,CAAoB,IAApB,CAArB;;AAEA,UAAG,mBAAmB,OAAnB,CAA2B,cAA3B,MAA+C,CAAC,CAAnD,EAAqD;AACnD,YAAI,WAAW,MAAK,OAAL,GAAe,MAAM,GAArB,GAA2B,IAA1C;AACA,YAAG,MAAM,MAAN,CAAa,QAAb,CAAH,EAA0B;AACxB,uBAAG,UAAH,CAAc,QAAd;AACD;AACD,eAAO,IAAP;AACD;AACF,KAdM,EAcJ,GAdI,CAcA,gBAAQ;AACb,aAAO,MAAK,OAAL,GAAe,MAAM,GAArB,GAA2B,IAAlC;AACD,KAhBM,CAAP;AAiBD,G;;;;;;;;;mBAOD,c,2BAAe,Q,EAAuB;AAAA,QAAb,OAAa,yDAAH,EAAG;;AACpC,WAAO,SAAS,OAAT,CAAiB,QAAjB,EAA2B,OAA3B,CAAP;AACD,G;;;;;;;mBAKD,O,oBAAQ,I,EAAK;AAAA;;AACX,QAAI,QAAQ,MAAM,QAAN,CAAe,KAAK,OAApB,EAA6B,IAA7B,CAAZ;AACA,QAAI,WAAW,MAAM,QAAN,CAAe,KAAK,OAApB,EAA6B,IAA7B,CAAf;AACA,QAAI,eAAe,KAAK,kBAAL,CAAwB,KAAxB,EAA+B,QAA/B,CAAnB;;AAEA,QAAG,MAAM,YAAN,IAAsB,CAAC,KAAK,kBAAL,CAAwB,MAAlD,EAAyD;AACvD,YAAM,YAAN,GAAqB,IAArB;AACD;;AAED,UAAM,OAAN,CAAc,gBAAQ;AACpB,UAAI,UAAU,eAAK,OAAL,CAAa,IAAb,CAAd;;AAEA,UAAG,OAAK,YAAL,CAAkB,OAAlB,CAA0B,OAA1B,MAAuC,CAAC,CAA3C,EAA6C;AAC3C,eAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB;AACA;AACD;AACD,UAAI,QAAQ,aAAG,QAAH,MAAe,OAAK,OAApB,GAA8B,MAAM,GAApC,GAA0C,IAA1C,EAAkD,KAAlD,CAAwD,OAAxD,EAAZ;AACA,UAAI,eAAa,OAAK,OAAlB,GAA4B,MAAM,GAAlC,GAAwC,IAA5C;;;;AAIA,gBAAU,OAAK,cAAL,CAAoB,OAApB,EAA6B,KAA7B,CAAV;;AAEA,UAAG,MAAM,MAAN,CAAa,OAAb,CAAH,EAAyB;AACvB,YAAI,WAAW,aAAG,QAAH,CAAY,OAAZ,EAAqB,KAArB,CAA2B,OAA3B,EAAf;;AAEA,YAAG,YAAY,KAAf,EAAqB;AACnB;AACD;AACF;AACD,UAAG,CAAC,OAAK,aAAL,CAAmB,IAAnB,CAAD,IAA6B,QAAQ,OAAK,aAAL,CAAmB,IAAnB,CAAxC,EAAiE;AAC/D,YAAI,MAAM,OAAK,WAAL,CAAiB,IAAjB,CAAV;AACA,YAAG,GAAH,EAAO;AACL,uBAAa,IAAb,CAAkB,OAAlB;AACD;;AAED,eAAK,aAAL,CAAmB,IAAnB,IAA2B,KAA3B;;AAEA,YAAI,QAAQ,OAAK,kBAAL,CAAwB,OAAxB,CAAgC,IAAhC,CAAZ;AACA,YAAG,GAAH,EAAO;AACL,cAAG,QAAQ,CAAC,CAAZ,EAAc;AACZ,mBAAK,kBAAL,CAAwB,MAAxB,CAA+B,KAA/B,EAAsC,CAAtC;AACD;AACF,SAJD,MAIM,IAAG,QAAQ,KAAX,EAAiB;AACrB,cAAG,UAAU,CAAC,CAAd,EAAgB;AACd,mBAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B;AACD;AACF;AACF;AACF,KAxCD;;AA0CA,QAAG,aAAa,MAAb,IAAuB,KAAK,QAA/B,EAAwC;AACtC,WAAK,QAAL,CAAc,YAAd;AACD;AACD,QAAG,CAAC,IAAJ,EAAS;AACP,iBAAW,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAX,EAAoC,GAApC;AACD;AACF,G;;;;;;;mBAKD,G,kBAAK;AACH,SAAK,OAAL;AACD,G;;;;;;;SAKM,O,oBAAQ,O,EAAS,O,EAAsB;AAAA,QAAb,OAAa,yDAAH,EAAG;;AAC5C,QAAI,WAAW,IAAI,IAAJ,CAAS,OAAT,EAAkB,OAAlB,EAA2B,OAA3B,CAAf;AACA,aAAS,OAAT,CAAiB,IAAjB;AACD,G","file":"watch_compile.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * watch compile\n */\nexport default class {\n  /**\n   * store compiled files last mtime\n   * @type {Object}\n   */\n  compiledMtime = {};\n  /**\n   * compiled error files\n   * @type {Array}\n   */\n  compiledErrorFiles = [];\n  /**\n   * allow file ext in src path\n   * @type {Array}\n   */\n  allowFileExt = ['.js', '.ts'];\n  /**\n   * constructor\n   * @param  {Array} args []\n   * @return {}         []\n   */\n  constructor(...args){\n    this.init(...args);\n  }\n  /**\n   * init\n   * @param  {String} srcPath []\n   * @param  {String} outPath []\n   * @param  {Boolean} log     []\n   * @return {}         []\n   */\n  init(srcPath, outPath, options = {}, callback){\n    this.srcPath = path.normalize(srcPath);\n    this.outPath = path.normalize(outPath);\n    this.options = options;\n    this.callback = callback;\n  }\n  /**\n   * compile single file\n   * @param  {String} file     []\n   * @param  {Boolean} onlyCopy []\n   * @return {}          []\n   */\n  compileFile(file, onlyCopy){\n    let filePath = `${this.srcPath}${think.sep}${file}`;\n    let content = fs.readFileSync(filePath, 'utf8');\n\n    //when get file content empty, maybe file is locked\n    if(!content){\n      return;\n    }\n    // only copy file content\n    if(onlyCopy){\n      let saveFilepath = `${this.outPath}${think.sep}${file}`;\n      think.mkdir(path.dirname(saveFilepath));\n      fs.writeFileSync(saveFilepath, content);\n      return;\n    }\n\n    try{\n      if(this.options.type === 'ts'){\n        this.compileByTypeScript(content, file);\n      }else{\n        this.compileByBabel(content, file);\n      }\n      return true;\n    }catch(e){\n\n      think.log(colors => {\n        return colors.red(`compile file ${file} error`);\n      }, 'COMPILE');\n      think.log(e);\n\n      e.message = 'Compile Error: ' + e.message;\n      think.compileError = e;\n    }\n    return false;\n  }\n  /**\n   * get relative path\n   * @param  {String} file []\n   * @return {String}      []\n   */\n  getRelationPath(file){\n    //use dirname to resolve file path in source-map-support\n    //so must use dirname in here\n    let pPath = path.dirname(this.outPath + think.sep + file);\n    return path.relative(pPath, this.srcPath + think.sep + file);\n  }\n  /**\n   * typescript compile\n   * @return {} []\n   */\n  compileByTypeScript(content, file){\n    let ts = require('typescript');\n    let startTime = Date.now();\n    let diagnostics = [];\n    let output = ts.transpileModule(content, {\n      compilerOptions: {\n        module: ts.ModuleKind.CommonJS,\n        target: ts.ScriptTarget.ES6,\n        experimentalDecorators: true,\n        emitDecoratorMetadata: true,\n        allowSyntheticDefaultImports: true,\n        sourceMap: true\n      },\n      fileName: file,\n      reportDiagnostics: !!diagnostics\n    });\n    ts.addRange(diagnostics, output.diagnostics);\n\n    //has error\n    if(diagnostics.length){\n      let firstDiagnostics = diagnostics[0];\n      let {line, character} = firstDiagnostics.file.getLineAndCharacterOfPosition(firstDiagnostics.start);\n      let message = ts.flattenDiagnosticMessageText(firstDiagnostics.messageText, '\\n');\n      throw new Error(`${message} on Line ${line + 1}, Character ${character}`);\n    }\n    if(this.options.log){\n      think.log(`Compile file ${file}`, 'TypeScript', startTime);\n    }\n\n    file = this.replaceExtName(file, '.js');\n    let sourceMap = JSON.parse(output.sourceMapText);\n    sourceMap.sources[0] = this.getRelationPath(file);\n    sourceMap.sourcesContent = [content];\n    //file value must be equal sources values\n    sourceMap.file = sourceMap.sources[0];\n    delete sourceMap.sourceRoot;\n    this.compileByBabel(output.outputText, file, true, sourceMap);\n  }\n  /**\n   * babel compile\n   * @return {} []\n   */\n  compileByBabel(content, file, logged, orginSourceMap){\n    let startTime = Date.now();\n    let relativePath = this.getRelationPath(file);\n    //babel not export default property\n    //so can not use `import babel from 'babel-core'`\n    let babel = require('babel-core');\n    let data = babel.transform(content, {\n      filename: file,\n      presets: ['es2015-loose', 'stage-1'].concat(this.options.presets || []),\n      plugins: ['transform-runtime'].concat(this.options.plugins || []),\n      sourceMaps: true,\n      sourceFileName: relativePath\n    });\n    if(!logged && this.options.log){\n      think.log(`Compile file ${file}`, 'Babel', startTime);\n    }\n    think.mkdir(path.dirname(`${this.outPath}${think.sep}${file}`));\n    let basename = path.basename(file);\n    let prefix = '//# sourceMappingURL=';\n    if(data.code.indexOf(prefix) === -1){\n      data.code = data.code + '\\n' + prefix + basename + '.map';\n    }\n    fs.writeFileSync(`${this.outPath}${think.sep}${file}`, data.code);\n    let sourceMap = data.map;\n    //file value must be equal sources values\n    sourceMap.file = sourceMap.sources[0];\n    if(orginSourceMap){\n      sourceMap = this.mergeSourceMap(orginSourceMap, sourceMap);\n    }\n    fs.writeFileSync(`${this.outPath}${think.sep}${file}.map`, JSON.stringify(sourceMap, undefined, 4));\n  }\n  /**\n   * merge source map\n   * @param  {String} content        []\n   * @param  {Object} orginSourceMap []\n   * @param  {Object} sourceMap      []\n   * @return {}                []\n   */\n  mergeSourceMap(orginSourceMap, sourceMap){\n    let {SourceMapGenerator, SourceMapConsumer} = require('source-map');\n    sourceMap.file = sourceMap.file.replace(/\\\\/g, '/');\n    sourceMap.sources = sourceMap.sources.map(filePath => {\n      return filePath.replace(/\\\\/g, '/');\n    });\n    var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));\n    generator.applySourceMap(new SourceMapConsumer(orginSourceMap));\n    sourceMap = JSON.parse(generator.toString());\n\n    return sourceMap;\n  }\n  /**\n   * src file is deleted, but app file also exist\n   * then delete app file\n   * @return {} []\n   */\n  getSrcDeletedFiles(srcFiles, appFiles){\n    let srcFilesWithoutExt = srcFiles.map(item => {\n      return this.replaceExtName(item);\n    });\n    return appFiles.filter(file => {\n      let extname = path.extname(file);\n      if(this.allowFileExt.indexOf(extname) === -1){\n        return;\n      }\n      let fileWithoutExt = this.replaceExtName(file);\n      //src file not exist\n      if(srcFilesWithoutExt.indexOf(fileWithoutExt) === -1){\n        let filepath = this.outPath + think.sep + file;\n        if(think.isFile(filepath)){\n          fs.unlinkSync(filepath);\n        }\n        return true;\n      }\n    }).map(file => {\n      return this.outPath + think.sep + file;\n    });\n  }\n  /**\n   * replace filepath extname\n   * @param  {String} filepath []\n   * @param  {String} extname  []\n   * @return {String}          []\n   */\n  replaceExtName(filepath, extname = ''){\n    return filepath.replace(/\\.\\w+$/, extname);\n  }\n  /**\n   * compile\n   * @return {} []\n   */\n  compile(once){\n    let files = think.getFiles(this.srcPath, true);\n    let appFiles = think.getFiles(this.outPath, true);\n    let changedFiles = this.getSrcDeletedFiles(files, appFiles);\n\n    if(think.compileError && !this.compiledErrorFiles.length){\n      think.compileError = null;\n    }\n\n    files.forEach(file => {\n      let extname = path.extname(file);\n      //if is not js file, only copy\n      if(this.allowFileExt.indexOf(extname) === -1){\n        this.compileFile(file, true);\n        return;\n      }\n      let mTime = fs.statSync(`${this.srcPath}${think.sep}${file}`).mtime.getTime();\n      let outFile = `${this.outPath}${think.sep}${file}`;\n\n      //change extname to .js.\n      //in typescript, file extname is .ts\n      outFile = this.replaceExtName(outFile, '.js');\n\n      if(think.isFile(outFile)){\n        let outmTime = fs.statSync(outFile).mtime.getTime();\n        //if compiled file mtime is after than source file, return\n        if(outmTime >= mTime){\n          return;\n        }\n      }\n      if(!this.compiledMtime[file] || mTime > this.compiledMtime[file]){\n        let ret = this.compileFile(file);\n        if(ret){\n          changedFiles.push(outFile);\n        }\n        \n        this.compiledMtime[file] = mTime;\n\n        let index = this.compiledErrorFiles.indexOf(file);\n        if(ret){\n          if(index > -1){\n            this.compiledErrorFiles.splice(index, 1);\n          }\n        }else if(ret === false){\n          if(index === -1){\n            this.compiledErrorFiles.push(file);\n          }\n        }\n      }\n    });\n    //notify auto reload service to clear file cache\n    if(changedFiles.length && this.callback){\n      this.callback(changedFiles);\n    }\n    if(!once){\n      setTimeout(this.compile.bind(this), 100);\n    }\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    this.compile();\n  }\n  /**\n   * compile\n   * @return {} []\n   */\n  static compile(srcPath, outPath, options = {}){\n    let instance = new this(srcPath, outPath, options);\n    instance.compile(true);\n  }\n}"]}