{"version":3,"sources":["../../src/util/validator.js"],"names":[],"mappings":"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","file":"validator.js","sourcesContent":["'use strict';\n\nimport net from 'net';\n\n//https://github.com/chriso/validator.js\nimport validator from 'validator';\n\n\n/**\n * Validator\n * @type {Object}\n */\nlet Validator = {};\n/**\n * check value is set\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.required = value => {\n  return !think.isEmpty(value);\n};\n/**\n * The field under validation must be present if the anotherfield field is equal to any value.\n * @param  {String}    value        []\n * @param  {Stromg}    anotherfield []\n * @param  {Array} values       []\n * @return {Boolean}                 []\n */\nValidator.requiredIf = (value, anotherField, ...values) => {\n  if(values.indexOf(anotherField) > -1){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse requiredIf args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredIf = (args, data) => {\n  let arg0 = args[0];\n  args[0] = data[arg0] ? data[arg0].value : '';\n  return args;\n};\n/**\n * The field under validation must be present not if the anotherfield field is equal to any value.\n * @param  {String}    value        []\n * @param  {Stromg}    anotherfield []\n * @param  {Array} values       []\n * @return {Boolean}                 []\n */\nValidator.requiredNotIf = (value, anotherField, ...values) => {\n  if(values.indexOf(anotherField) === -1){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse requiredNotIf args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredNotIf = (args, data) => {\n  return Validator._requiredIf(args, data);\n};\n/**\n * The field under validation must be present only if any of the other specified fields are present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWith = (value, ...anotherFields) => {\n  let flag = anotherFields.some(item => {\n    return Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required with args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWith = (args, data) => {\n  return args.map(item => {\n    return data[item] ? data[item].value : '';\n  });\n};\n/**\n * The field under validation must be present only if all of the other specified fields are present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithAll = (value, ...anotherFields) => {\n  let flag = anotherFields.every(item => {\n    return Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required with all args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithAll = (args, data) => {\n  return Validator._requiredWith(args, data);\n};\n/**\n * The field under validation must be present only when any of the other specified fields are not present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithout = (value, ...anotherFields) => {\n  let flag = anotherFields.some(item => {\n    return !Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required without args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithout = (args, data) => {\n  return Validator._requiredWith(args, data);\n};\n/**\n * The field under validation must be present only when all of the other specified fields are not present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithoutAll = (value, ...anotherFields) => {\n  let flag = anotherFields.every(item => {\n    return !Validator.required(item);\n  });\n  if(flag){\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required without all args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithoutAll = (args, data) => {\n  return Validator._requiredWith(args, data);\n};\n/**\n * check if the string contains the seed.\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.contains = (value, str) => {\n  return !value || validator.contains(value, str);\n};\n/**\n * check if the string matches the comparison.\n * @param  {String} value      []\n * @param  {String} comparison []\n * @return {Boolean}            []\n */\nValidator.equals = (value, comparison) => {\n  return !value || validator.equals(value, comparison);\n};\n/**\n * parse equal args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._equals = (args, data) => {\n  let item = data[args[0]];\n  return [item ? item.value : ''];\n};\n/**\n * check if the string matches the comparison.\n * @param  {String} value      []\n * @param  {String} comparison []\n * @return {Boolean}            []\n */\nValidator.equalsValue = (value, comparison) => {\n  return !value || validator.equals(value, comparison);\n};\n/**\n * check if the string not matches the comparison.\n * @type {Boolean}\n */\nValidator.different = (value, comparison) => {\n  return !value || value !== comparison;\n};\n/**\n * parse different args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._different = (args, data) => {\n  return Validator._equals(args, data);\n};\n/**\n * check if the string is a date that's after the specified date (defaults to now).\n * @param  {String} value []\n * @param  {String} date  []\n * @return {Boolean}       []\n */\nValidator.after = (value, date) => {\n  return !value || validator.isAfter(value, date);\n};\n/**\n * parse after args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._after = (args, data) => {\n  let arg = args[0];\n  if(arg in data){\n    return [data[arg].value];\n  }\n  return args;\n};\n/**\n * check if the string contains only letters (a-zA-Z).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alpha = value => {\n  return !value || validator.isAlpha(value);\n};\n/**\n * check if the string contains only letters and dashes(a-zA-Z_).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaDash = value => {\n  return !value || /^[A-Z_]+$/i.test(value);\n};\n/**\n * check if the string contains only letters and numbers.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaNumeric = value => {\n  return !value || validator.isAlphanumeric(value);\n};\n/**\n * check if the string contains only letters or numbers or dash.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaNumericDash = value => {\n  return !value || /^\\w+$/i.test(value);\n};\n/**\n * check if the string contains ASCII chars only.\n * @param  {String} value []\n * @return {Boolean}      []\n */\nValidator.ascii = value => {\n  return !value || validator.isAscii(value);\n};\n/**\n * check if a string is base64 encoded.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.base64 = value => {\n  return !value || validator.isBase64(value);\n};\n/**\n * check if the string is a date that's before the specified date.\n * @param  {String} value []\n * @param  {String} date  []\n * @return {Boolean}       []\n */\nValidator.before = (value, date) => {\n  return !value || validator.isBefore(value, date);\n};\n/**\n * parse before args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._before = (args, data) => {\n  return Validator._after(args, data);\n};\n/**\n * check if the string's length (in bytes) falls in a range.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.byteLength = (value, min, max) => {\n  return !value || validator.isByteLength(value, min, max);\n};\n/**\n *  check if the string is a credit card.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.creditcard = value => {\n  return !value || validator.isCreditCard(value);\n};\n/**\n * check if the string is a valid currency amount. options is an object which defaults to\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.currency = (value, options) => {\n  return !value || validator.isCurrency(value, options);\n};\n/**\n * check if the string is a date.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.date = value => {\n  return !value || validator.isDate(value);\n};\n/**\n * check if the string represents a decimal number, such as 0.1, .3, 1.1, 1.00003, 4.0, etc.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.decimal = value => {\n  return !value || validator.isDecimal(value);\n};\n/**\n * check if the string is a number that's divisible by another.\n * @param  {Number} value  []\n * @param  {Number} number []\n * @return {Boolean}        []\n */\nValidator.divisibleBy = (value, number) => {\n  return !value || validator.isDivisibleBy(value, number);\n};\n/**\n * check if the string is an email. \n * options is an object which defaults to { \n *   allow_display_name: false, \n *   allow_utf8_locale_part: true, \n *   require_tld: true \n *  }. \n *  If allow_display_name is set to true, the validator will also match Display Name <email-address>. \n *  If allow_utf8_locale_part is set to false, the validator will not allow any non-English UTF8 character in email address' locale part. \n *  If require_tld is set to false, e-mail addresses without having TLD in their domain will also be matched.\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.email = (value, options) => {\n  return !value || validator.isEmail(value, options);\n};\n/**\n * check if the string is a fully qualified domain name (e.g. domain.com). \n * options is an object which defaults to { \n *   require_tld: true, \n *   allow_underscores: false, \n *   allow_trailing_dot: false \n * }.\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.fqdn = (value, options) => {\n  return !value || validator.isFQDN(value, options);\n};\n/**\n *  check if the string is a float. \n *  options is an object which can contain the keys min and/or max to validate the float is within boundaries \n *  (e.g. { min: 7.22, max: 9.55 }).\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.float = (value, min, max) => {\n  if(!value){\n    return true;\n  }\n  let options = {};\n  if(min){\n    options.min = min;\n  }\n  if(max){\n    options.max = max;\n  }\n  return validator.isFloat(value, options);\n};\n/**\n * check if the string contains any full-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.fullWidth = value => {\n  return !value || validator.isFullWidth(value);\n};\n/**\n * check if the string contains any half-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.halfWidth = value => {\n  return !value || validator.isHalfWidth(value);\n};\n/**\n * check if the string is a hexadecimal color.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.hexColor = value => {\n  return !value || validator.isHexColor(value);\n};\n/**\n * check if the string is a hexadecimal number.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.hex = value => {\n  return !value || validator.isHexadecimal(value);\n};\n/**\n * check if the string is an IP (version 4 or 6).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip = value => {\n  return !value || !!net.isIP(value);\n};\n/**\n * check if the string is an IP v4\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip4 = value => {\n  return !value || net.isIPv4(value);\n};\n/**\n * check if the string is an IP v6\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip6 = value => {\n  return !value || net.isIPv6(value);\n};\n/**\n * check if the string is an ISBN (version 10 or 13).\n * @param  {String} value   []\n * @param  {Number} version []\n * @return {Boolean}         []\n */\nValidator.isbn = (value, version) => {\n  return !value || validator.isISBN(value, version);\n};\n/**\n * check if the string is an ISIN (stock/security identifier).\n * https://en.wikipedia.org/wiki/International_Securities_Identification_Number\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.isin = value => {\n  return !value || validator.isISIN(value);\n};\n/**\n * check if the string is a valid ISO 8601 date.\n * https://en.wikipedia.org/wiki/ISO_8601\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.iso8601 = value => {\n  return !value || validator.isISO8601(value);\n};\n/**\n * check if the string is in a array of allowed values.\n * @type {Boolean}\n */\nValidator.in = (value, ...values) => {\n  return !value || validator.isIn(value, values);\n};\n/**\n * check if the string is not in a array of allowed values.\n * @type {Boolean}\n */\nValidator.notIn = (value, ...values) => {\n  return !value || !validator.isIn(value, values);\n};\n/**\n * check if the string is an integer. \n * options is an object which can contain the keys min and/or max to check the integer is within boundaries (e.g. { min: 10, max: 99 }).\n * @type {Boolean}\n */\nValidator.int = (value, min, max) => {\n  if(!value){\n    return true;\n  }\n  let options = {};\n  if(min){\n    options.min = min | 0;\n  }\n  if(max){\n    options.max = max | 0;\n  }\n  return !isNaN(value) && validator.isInt(value, options);\n};\n/**\n * check if the string greater than min value\n * @param  {String} value []\n * @param  {Number} min   []\n * @return {Boolean}       []\n */\nValidator.min = (value, min) => {\n  return !value || validator.isInt(value, {\n    min: min | 0\n  });\n};\n/**\n * check if the string less than max value\n * @param  {String} value []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.max = (value, max) => {\n  return !value || validator.isInt(value, {\n    min: 0,\n    max: max | 0\n  });\n};\n/**\n * check if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * @param  {String} value []\n * @param  {Number} min   []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.length = (value, min, max) => {\n  if(!value){\n    return true;\n  }\n  if(min){\n    min = min | 0;\n  }else{\n    min = 1;\n  }\n  if(max){\n    max = max | 0;\n  }\n  return validator.isLength(value, min, max);\n};\n/**\n * check if the string's length is max than min\n * @param  {String} value []\n * @param  {Number} min   []\n * @return {Boolean}       []\n */\nValidator.minLength = (value, min) => {\n  return !value || validator.isLength(value, min | 0);\n};\n/**\n * check is the string's length is min than max\n * @param  {String} value []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.maxLength = (value, max) => {\n  return !value || validator.isLength(value, 0, max | 0);\n};\n/**\n * check if the string is lowercase.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.lowercase = value => {\n  return !value || validator.isLowercase(value);\n};\n/**\n * check if the string is a mobile phone number, \n * (locale is one of ['zh-CN', 'en-ZA', 'en-AU', 'en-HK', 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU']).\n * @param  {String} value []\n * @param  {[type]} locale []\n * @return {Boolean}       []\n */\nValidator.mobile = (value, locale = 'zh-CN') => {\n  return !value || validator.isMobilePhone(value, locale);\n};\n/**\n *  check if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.mongoId = value => {\n  return !value || validator.isMongoId(value);\n};\n/**\n * check if the string contains one or more multibyte chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.multibyte = value => {\n  return !value || validator.isMultibyte(value);\n};\n/**\n * check if the string contains only numbers.\n * @param  {String} value []\n * @return {Boolean}       []\n */\n// Validator.number = value => {\n//   return validator.isNumeric(value);\n// };\n/**\n * check if the string is an URL. \n * options is an object which defaults to { \n *   protocols: ['http','https','ftp'], \n *   require_tld: true, \n *   require_protocol: false, \n *   require_valid_protocol: true, \n *   allow_underscores: false, \n *   host_whitelist: false, \n *   host_blacklist: false, \n *   allow_trailing_dot: false, \n *   allow_protocol_relative_urls: false \n * }.\n * @type {Boolean}\n */\nValidator.url = (value, options) => {\n  if(!value){\n    return true;\n  }\n  options = think.extend({\n    require_protocol: true,\n    protocols: ['http', 'https']\n  }, options);\n  return validator.isURL(value, options);\n};\n/**\n * check if the string is uppercase.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.uppercase = value => {\n  return !value || validator.isUppercase(value);\n};\n/**\n * check if the string contains a mixture of full and half-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.variableWidth = value => {\n  return !value || validator.isVariableWidth(value);\n};\n/**\n * check is sql order string\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.order = value => {\n  if(!value){\n    return true;\n  }\n  return value.split(/\\s*,\\s*/).every(item => {\n    return /^\\w+\\s+(?:ASC|DESC)$/i.test(item);\n  });\n};\n/**\n * check is sql field string\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.field = value => {\n  if(!value){\n    return true;\n  }\n  return value.split(/\\s*,\\s*/).every(item => {\n    return item === '*' || /^\\w+$/.test(item);\n  });\n};\n/**\n * check is image file\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.image = value => {\n  if(!value){\n    return true;\n  }\n  if(think.isObject(value)){\n    value = value.originalFilename;\n  }\n  return /\\.(?:jpeg|jpg|png|bmp|gif|svg)$/i.test(value);\n};\n/**\n * check is string start with str\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.startWith = (value, str) => {\n  return !value || value.indexOf(str) === 0;\n};\n/**\n * check is string end with str\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.endWith = (value, str) => {\n  return !value || value.lastIndexOf(str) === (value.length - str.length);\n};\n/**\n * check value is string value\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.string = value => {\n  return think.isString(value);\n};\n/**\n * check value is array value\n * @param  {Array} value []\n * @return {Boolean}       []\n */\nValidator.array = value => {\n  return think.isArray(value);\n};\n/**\n * check value is true\n * @param  {Boolean} value []\n * @return {Boolean}       []\n */\nValidator.boolean = value => {\n  return think.isBoolean(value);\n};\n/**\n * check value is object\n * @param  {Object} value []\n * @return {Boolean}       []\n */\nValidator.object = value => {\n  return think.isObject(value);\n};\n\n/**\n * check value with regexp\n * @param  {Mixed} value []\n * @param  {RegExp} reg   []\n * @return {Boolean}       []\n */\nValidator.regexp = (value, reg) => {\n  if(!value){\n    return true;\n  }\n  return reg.test(value);\n};\n/**\n * check type\n * @param  {Mixed} value []\n * @param  {String} type  []\n * @return {Boolean}       []\n */\nValidator.type = (value, type) => {\n  if(!value){\n    return true;\n  }\n  switch(type){\n    case 'int':\n      return Validator.int(value);\n    case 'float':\n      return Validator.float(value);\n    case 'boolean':\n      return Validator.boolean(value);\n    case 'array':\n      return Validator.array(value);\n    case 'object':\n      return Validator.object(value);\n  }\n  return Validator.string(value);\n};\n\nexport default Validator;"]}