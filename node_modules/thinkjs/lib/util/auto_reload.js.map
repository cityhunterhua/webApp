{"version":3,"sources":["../../src/util/auto_reload.js"],"names":[],"mappings":"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","file":"auto_reload.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n//can not use import from\nlet sys_module = require('module');\n\n//rewriteSysModuleLoad flag\nlet _rewriteSysModuleLoad = false;\n\nconst NODE_MODULES = `${path.sep}node_modules${path.sep}`;\n\n/**\n * auto reload file\n */\nexport default class {\n  /**\n   * constructor\n   * @param  {Array} args []\n   * @return {}         []\n   */\n  constructor(...args){\n    this.init(...args);\n  }\n  /**\n   * init\n   * @param  {String}   srcPath  [source path]\n   * @param  {Function} callback [when file has changed, callback will be invoke]\n   * @param  {Boolean}  log      [log reload file]\n   * @return {}            []\n   */\n  init(srcPath, callback){\n    this.srcPath = path.normalize(srcPath);\n    this.callback = callback;\n    this.prevFilesCount = 0;\n  }\n  /**\n   * log file\n   * @param  {String} file []\n   * @return {}      []\n   */\n  // log(file){\n  //   //only log app files changed\n  //   if(file.indexOf(this.srcPath) === 0){\n  //     file = file.slice(this.srcPath.length);\n  //     think.log(`reload file ${file}`, 'RELOAD');\n  //   }\n  // }\n  /**\n   * clear file cache, also clear dependents file cache\n   * @return {} []\n   */\n  clearFileCache(file){\n    if(file.indexOf(NODE_MODULES) > -1 || file.indexOf(this.srcPath) !== 0){\n      return;\n    }\n    let mod = require.cache[file];\n    if(!mod){\n      return;\n    }\n    //think.log(`reload file ${file.slice(this.srcPath.length)}`, 'RELOAD');\n    //remove children\n    if(mod && mod.children){\n      mod.children.length = 0;\n    }\n\n    // clear module cache which dependents this module\n    for(let fileItem in require.cache){\n      if(fileItem === file || fileItem.indexOf(NODE_MODULES) > -1){\n        continue;\n      }\n      let item = require.cache[fileItem];\n      if(item && item.children && item.children.indexOf(mod) > -1){\n        this.clearFileCache(fileItem);\n      }\n    }\n    //remove require cache\n    delete require.cache[file];\n  }\n  /**\n   * clear files cache\n   * @param  {Array} files []\n   * @return {}       []\n   */\n  clearFilesCache(files){\n    files.forEach(file => {\n      this.clearFileCache(file);\n    });\n    if(this.callback){\n      this.callback();\n    }\n  }\n  /**\n   * check file change\n   * compare files count\n   * @return {} []\n   */\n  checkFileChange(){\n    let filesCount = think.getFiles(this.srcPath, true).filter(file => {\n      let extname = path.extname(file);\n      return extname === '.js';\n    }).length;\n    let flag = this.prevFilesCount && this.prevFilesCount !== filesCount;\n    this.prevFilesCount = filesCount;\n    return flag;\n  }\n  /**\n   * check cache change\n   * @return {} []\n   */\n  checkCacheChange(){\n    let autoReload = thinkCache(thinkCache.AUTO_RELOAD);\n    let hasChange = false;\n    for(let file in require.cache){\n      //ignore file in node_modules path\n      if(file.indexOf(NODE_MODULES) > -1){\n        continue;\n      }\n      if(!think.isFile(file)){\n        this.clearFileCache(file);\n        continue;\n      }\n      let mTime = fs.statSync(file).mtime.getTime();\n      if(!autoReload[file]){\n        autoReload[file] = mTime;\n        continue;\n      }\n      if(mTime > autoReload[file]){\n        this.clearFileCache(file);\n        autoReload[file] = mTime;\n        hasChange = true;\n      }\n    }\n    return hasChange;\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let hasChange = this.checkCacheChange() || this.checkFileChange();\n    if(hasChange && this.callback){\n      this.callback();\n    }\n    setTimeout(this.run.bind(this), 200);\n  }\n  /**\n   * rewrite sys module load method\n   * @return {} []\n   */\n  static rewriteSysModuleLoad(){\n\n    if(_rewriteSysModuleLoad){\n      return;\n    }\n    _rewriteSysModuleLoad = true;\n\n    let load = sys_module._load;\n    \n    //rewrite Module._load method\n    sys_module._load = (request, parent, isMain) => {\n      let exportsObj = load(request, parent, isMain);\n      if(!parent){\n        return exportsObj;\n      }\n      if(isMain || parent.filename.indexOf(NODE_MODULES) > -1){\n        return exportsObj;\n      }\n      if(request === 'internal/repl' || request === 'repl'){\n        return exportsObj;\n      }\n      try{\n        let filename = sys_module._resolveFilename(request, parent);\n        let cachedModule = sys_module._cache[filename];\n        if(cachedModule && parent.children.indexOf(cachedModule) === -1){\n          parent.children.push(cachedModule);\n        }\n      }catch(e){}\n      return exportsObj;\n    };\n  }\n}"]}