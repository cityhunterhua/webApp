{"version":3,"sources":["../../src/util/checker.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;;;kBAEe;;;;;;AAKb,kBALa,8BAKK;AAChB,QAAI,cAAiB,MAAM,UAAvB,kBAAJ;;AADgB,sBAEA,KAAK,KAAL,CAAW,aAAG,YAAH,CAAgB,WAAhB,EAA6B,OAA7B,CAAX,CAFA;;AAAA,QAEX,OAFW,eAEX,OAFW;;AAGhB,QAAI,cAAc,QAAQ,IAAR,CAAa,MAAb,CAAoB,CAApB,CAAlB;;AAEA,QAAI,cAAc,QAAQ,OAA1B;AACA,QAAG,YAAY,CAAZ,MAAmB,GAAtB,EAA0B;AACxB,oBAAc,YAAY,KAAZ,CAAkB,CAAlB,CAAd;AACD;;AAED,QAAG,cAAc,WAAjB,EAA6B;AAC3B,YAAM,GAAN,mCAA0C,WAA1C,6BAA6E,WAA7E,2BAAgH,MAAhH;AACD;AACF,GAlBY;;;;;;AAuBb,eAvBa,2BAuBE;AACb,QAAI,QAAQ,MAAM,QAAN,CAAe,MAAM,QAArB,EAA+B,IAA/B,CAAZ;AACA,QAAI,MAAM,kBAAV;AACA,QAAI,eAAe,QAAnB;AACA,QAAI,iBAAe,MAAM,GAArB,GAA2B,MAAM,OAAN,CAAc,MAAzC,GAAkD,MAAM,GAA5D;AACA,QAAI,SAAS,SAAT,MAAS,OAAQ;AACnB,UAAG,CAAC,IAAI,IAAJ,CAAS,IAAT,CAAJ,EAAmB;AACjB;AACD;AACD,aAAO,eAAK,SAAL,CAAe,IAAf,CAAP;;AAEA,UAAG,KAAK,OAAL,CAAa,SAAb,IAA0B,CAAC,CAA9B,EAAgC;AAC9B;AACD;AACD,aAAO,IAAP;AACD,KAVD;AAWA,UAAM,OAAN,CAAc,gBAAQ;AACpB,UAAG,OAAO,IAAP,KAAgB,aAAa,IAAb,CAAkB,IAAlB,CAAnB,EAA2C;AACzC,cAAM,GAAN,YAAoB,IAApB,6BAAmD,SAAnD;AACD;AACF,KAJD;AAKD,GA5CY;;;;;;AAiDb,mBAjDa,+BAiDM;AACjB,QAAI,cAAc,MAAM,SAAN,GAAkB,eAApC;AACA,QAAG,CAAC,MAAM,MAAN,CAAa,WAAb,CAAJ,EAA8B;AAC5B;AACD;AACD,QAAI,OAAO,KAAK,KAAL,CAAW,aAAG,YAAH,CAAgB,WAAhB,EAA6B,MAA7B,CAAX,CAAX;AACA,QAAI,eAAe,MAAM,MAAN,CAAa,EAAb,EAAiB,KAAK,YAAtB,CAAnB;;AAEA,QAAG,MAAM,GAAN,KAAc,aAAjB,EAA+B;AAC7B,qBAAe,MAAM,MAAN,CAAa,YAAb,EAA2B,KAAK,eAAhC,CAAf;AACD;;AAED,QAAI,WAAW;AACb,uBAAiB;AADJ,KAAf;AAGA,QAAI,eAAa,MAAM,SAAnB,GAA+B,MAAM,GAArC,oBAAuD,MAAM,GAAjE;AACA,SAAI,IAAI,GAAR,IAAe,YAAf,EAA4B;AAC1B,YAAM,SAAS,GAAT,KAAiB,GAAvB;AACA,UAAG,MAAM,KAAN,MAAe,OAAf,GAAyB,GAAzB,CAAH,EAAmC;AACjC;AACD;AACD,UAAG;AACD,gBAAQ,GAAR;AACD,OAFD,CAEC,OAAM,CAAN,EAAQ;AACP,cAAM,GAAN,eAAuB,GAAvB,gFAA0G,MAA1G;AACD;AACF;AACF,GA5EY;;;;;;AAiFb,mBAjFa,+BAiFM;AACjB,QAAG,MAAM,IAAN,KAAe,MAAM,WAAxB,EAAoC;AAClC;AACD;;;AAGD,QAAI,OAAO,EAAX;QAAe,WAAW,kBAA1B;AACA,QAAI,kBAAkB,WAAW,WAAW,UAAtB,EAAkC,QAAlC,CAAtB;AACA,QAAG,MAAM,OAAN,CAAc,eAAd,CAAH,EAAkC;AAChC,iBAAW,WAAW,UAAtB,EAAkC,QAAlC,EAA4C,EAA5C;AACA,wBAAkB,WAAW,WAAW,UAAtB,EAAkC,QAAlC,CAAlB;AACD;;AAED,QAAI,eAAe,SAAf,YAAe,SAAU;AAC3B,UAAG,KAAK,MAAL,KAAgB,CAAnB,EAAqB;AACnB,eAAO,oBAAY,MAAM,WAAN,CAAqB,MAAM,cAA3B,uBAAZ,CAAP;AACD;;;AAGD,WAAK,OAAL,CAAa,gBAAQ;AACnB,YAAI,iBAAiB,MAAM,OAAN,CAAc,MAAd,EAAsB,MAAM,OAAN,CAAc,MAApC,IAA8C,GAA9C,GAAoD,IAApD,GAA2D,KAAhF;AACA,YAAG,MAAM,MAAN,CAAa,cAAb,CAAH,EAAgC;AAC9B,gBAAM,GAAN,kBAA0B,MAAM,GAAhC,GAAsC,IAAtC,8DAAqG,MAArG;AACD;AACF,OALD;;AAOA,UAAG,WAAW,QAAd,EAAuB;AACrB;AACD;;AAED,UAAI,iBAAiB,MAAM,OAAN,CAAc,MAAd,EAAsB,MAAM,OAAN,CAAc,MAApC,IAA8C,YAAnE;AACA,UAAG,CAAC,MAAM,MAAN,CAAa,cAAb,CAAJ,EAAiC;AAC/B;AACD;AACD,UAAI,SAAS,MAAM,WAAN,CAAkB,cAAlB,CAAb;AACA,WAAK,OAAL,CAAa,eAAO;AAClB,YAAG,OAAO,GAAP,KAAe,gBAAgB,OAAhB,CAAwB,GAAxB,MAAiC,CAAC,CAApD,EAAsD;AACpD,0BAAgB,IAAhB,CAAqB,GAArB;AACA,gBAAM,GAAN,kBAA0B,GAA1B,6BAAuD,MAAvD,+CAA4G,SAA5G;AACD;AACF,OALD;AAMD,KA5BD;;AA8BA,QAAI,UAAU,MAAM,MAApB;;AAEA,YAAQ,OAAR,CAAgB,kBAAU;AACxB,mBAAa,MAAb;AACD,KAFD;AAGD;AAjIY,C","file":"checker.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\nexport default {\n  /**\n   * check node version\n   * @return {} []\n   */\n  checkNodeVersion(){\n    let packageFile = `${think.THINK_PATH}/package.json`;\n    let {engines} = JSON.parse(fs.readFileSync(packageFile, 'utf-8'));\n    let needVersion = engines.node.substr(2);\n\n    let nodeVersion = process.version;\n    if(nodeVersion[0] === 'v'){\n      nodeVersion = nodeVersion.slice(1);\n    }\n\n    if(needVersion > nodeVersion){\n      think.log(`ThinkJS need node version >= ${needVersion}, current version is ${nodeVersion}, please upgrade it.`, 'EXIT');\n    }\n  },\n  /**\n   * check application filename is lower\n   * @return {} []\n   */\n  checkFileName(){\n    let files = think.getFiles(think.APP_PATH, true);\n    let reg = /\\.(js|html|tpl)$/;\n    let uppercaseReg = /[A-Z]+/;\n    let localPath = `${think.sep}${think.dirname.locale}${think.sep}`;\n    let filter = item => {\n      if(!reg.test(item)){\n        return;\n      }\n      item = path.normalize(item);\n      //ignore files in config/locale\n      if(item.indexOf(localPath) > -1){\n        return;\n      }\n      return true;\n    };\n    files.forEach(item => {\n      if(filter(item) && uppercaseReg.test(item)){\n        think.log(`file \\`${item}\\` has uppercase chars.`, 'WARNING');\n      }\n    });\n  },\n  /**\n   * check dependencies is installed before server start\n   * @return {} []\n   */\n  checkDependencies(){\n    let packageFile = think.ROOT_PATH + '/package.json';\n    if(!think.isFile(packageFile)){\n      return;\n    }\n    let data = JSON.parse(fs.readFileSync(packageFile, 'utf8'));\n    let dependencies = think.extend({}, data.dependencies);\n    //only merge devDependencies in development env\n    if(think.env === 'development'){\n      dependencies = think.extend(dependencies, data.devDependencies);\n    }\n    //package alias\n    let pkgAlias = {\n      'babel-runtime': 'babel-runtime/helpers/inherits'\n    };\n    let pkgPath = `${think.ROOT_PATH}${think.sep}node_modules${think.sep}`;\n    for(let pkg in dependencies){\n      pkg = pkgAlias[pkg] || pkg;\n      if(think.isDir(`${pkgPath}${pkg}`)){\n        continue;\n      }\n      try{\n        require(pkg);\n      }catch(e){\n        think.log(`package \\`${pkg}\\` is not installed. please run \\`npm install\\` command before start server.`, 'EXIT');\n      }\n    }\n  },\n  /**\n   * check module config\n   * @return {} []\n   */\n  checkModuleConfig(){\n    if(think.mode !== think.mode_module){\n      return;\n    }\n    // check module config\n    // some config must be set in common module\n    let keys = [], errorKey = 'error_config_key';\n    let errorConfigKeys = thinkCache(thinkCache.COLLECTION, errorKey);\n    if(think.isEmpty(errorConfigKeys)){\n      thinkCache(thinkCache.COLLECTION, errorKey, []);\n      errorConfigKeys = thinkCache(thinkCache.COLLECTION, errorKey);\n    }\n\n    let checkMConfig = module => {\n      if(keys.length === 0){\n        keys = Object.keys(think.safeRequire(`${think.THINK_LIB_PATH}/config/config.js`));\n      }\n\n      //check config key not set as file name\n      keys.forEach(item => {\n        let configFilePath = think.getPath(module, think.dirname.config) + '/' + item + '.js';\n        if(think.isFile(configFilePath)){\n          think.log(`file \\`config${think.sep}${item}.js\\` is not allowed, it's already used for config key.`, 'EXIT');\n        }\n      }); \n\n      if(module === 'common'){\n        return;\n      }\n\n      let configFilePath = think.getPath(module, think.dirname.config) + '/config.js';\n      if(!think.isFile(configFilePath)){\n        return;\n      }\n      let config = think.safeRequire(configFilePath);\n      keys.forEach(key => {\n        if(config[key] && errorConfigKeys.indexOf(key) === -1){\n          errorConfigKeys.push(key);\n          think.log(`config key \\`${key}\\` can not be set in \\`${module}\\` module, must be set in \\`common\\` module`, 'WARNING');\n        }\n      });\n    };\n\n    let modules = think.module;\n    //load modules config\n    modules.forEach(module => {\n      checkMConfig(module);\n    });\n  }\n};"]}