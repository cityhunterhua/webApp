{"version":3,"sources":["../../src/model/_base.js"],"names":[],"mappings":"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","file":"_base.js","sourcesContent":["'use strict';\n\nimport Validator from '../core/think_validate.js';\n/**\n * base model class\n */\nexport default class extends think.base {\n  /**\n   * init\n   * @param  {} name   []\n   * @param  {} config []\n   * @return {}        []\n   */\n  init(name = '', config = {}){\n\n    let options = {\n      pk: 'id', //primary key\n      name: '', //model name\n      tablePrefix: undefined, //table prefix\n      tableName: '', //table name, without prefix\n      /**\n       * schema\n       * {\n       *   name: {\n       *     type: 'string',\n       *     required: true,\n       *     default: '',\n       *     unique: true,\n       *     primary: true,\n       *     auto_increment: true\n       *   }\n       * }\n       */\n      schema: {}, //table schema\n      /**\n       * table indexes\n       * {\n       *   name: {name: 1, $unique: true}, //single indexes\n       *   test1: {name1: 1, title1: 1, $unique: 1}, //compound indexes\n       * }\n       * @type {Object}\n       */\n      indexes: {}\n      //readonlyFields: []// readonly fields\n    };\n    //if is set in subclass, can't be override\n    for(let key in options){\n      if(this[key] === undefined){\n        this[key] = options[key];\n      }\n    }\n\n    if(think.isObject(name)){\n      config = name;\n      name = '';\n    }\n\n    config = think.parseConfig(true, config);\n    \n    //change property name `name`\n    if(config.name && !config.database){\n      config.database = config.name;\n      delete config.name;\n      think.log(`db.name is deprecated, use db.database instead`, 'WARNING');\n    }\n\n    if(config.pwd && !config.password){\n      config.password = config.pwd;\n      delete config.pwd;\n      think.log(`db.pwd is deprecated, use db.password instead`, 'WARNING');\n    }\n\n    //check property name `fields`\n    if(!think.isEmpty(this.fields)){\n      this.schema = this.fields;\n      delete this.fields;\n      think.log(`fields property is deprecated, use schema instead`, 'WARNING');\n    }\n\n    this.config = config;\n    this._db = null;\n    this._data = {};\n    this._options = {};\n\n    //model name\n    if(name){\n      this.name = name;\n    }\n    // get table prefix from config\n    if (this.config.prefix && this.tablePrefix === undefined) {\n      this.tablePrefix = this.config.prefix;\n    }\n  }\n  /**\n   * get model instance\n   * @param  {String} name    [model name]\n   * @param  {Object} options [options]\n   * @return {Object}         []\n   */\n  model(name, options, module){\n    if(think.isString(options) && think.module.indexOf(options) > -1){\n      module = options;\n      options = {};\n    }\n    module = module || this.parseModuleFromPath();\n    if(think.isString(options)){\n      options = {type: options};\n    }\n    options = think.extend({}, this.config, options);\n    return think.model(name, options, module);\n  }\n  /**\n   * get table prefix\n   * @return {String} []\n   */\n  getTablePrefix(){\n    return this.tablePrefix || '';\n  }\n  /**\n   * get db instance\n   * @return {Object} []\n   */\n  db(){\n    if (this._db) {\n      return this._db;\n    }\n    let DB = think.adapter('db', this.config.type || 'mysql');\n    this._db = new DB(this.config);\n    return this._db;\n  }\n  /**\n   * get model name\n   * @return {String} []\n   */\n  getModelName(){\n    if (this.name) {\n      return this.name;\n    }\n    let filename = this.__filename || __filename;\n    let last = filename.lastIndexOf(think.sep);\n    this.name = filename.substr(last + 1, filename.length - last - 4);\n    return this.name;\n  }\n  /**\n   * get table name\n   * @return {String} []\n   */\n  getTableName(){\n    if(!this.tableName){\n      this.tableName = this.getModelName();\n    }\n    return this.getTablePrefix() + this.tableName;\n  }\n  /**\n   * set cache options\n   * @param  {String} key     []\n   * @param  {Number} timeout []\n   * @return {}         []\n   */\n  cache(key, timeout = this.config.cache.timeout){\n    if (key === undefined) {\n      return this;\n    }\n    let options;\n    if(!think.isObject(key)){\n      if(think.isNumber(key)){\n        timeout = key;\n        key = '';\n      }\n      options = think.extend({}, this.config.cache, {key, timeout});\n    }else{\n      options = key;\n    }\n    this._options.cache = options;\n    return this;\n  }\n  /**\n   * set limit options\n   * @param  {Number} offset []\n   * @param  {Number} length []\n   * @return {}        []\n   */\n  limit(offset, length){\n    if (offset === undefined) {\n      return this;\n    }\n    if(think.isArray(offset)){\n      length = offset[1] || length;\n      offset = offset[0];\n    }\n    offset = Math.max(parseInt(offset) || 0, 0);\n    if(length){\n      length = Math.max(parseInt(length) || 0, 0);\n    }\n    this._options.limit = [offset, length];\n    return this;\n  }\n  /**\n   * set page options\n   * @param  {Number} page     []\n   * @param  {} listRows []\n   * @return {}          []\n   */\n  page(page, listRows = this.config.nums_per_page){\n    if (page === undefined) {\n      return this;\n    }\n    if(think.isArray(page)){\n      listRows = page[1] || listRows;\n      page = page[0];\n    }\n    page = Math.max(parseInt(page) || 1, 1);\n    listRows = Math.max(parseInt(listRows) || 10, 1);\n    this._options.limit = [listRows * (page - 1), listRows];\n    return this;\n  }\n  /**\n   * set where options\n   * @return {} []\n   */\n  where(where){\n    if (!where) {\n      return this;\n    }\n    if (think.isString(where)) {\n      where = {_string: where};\n    }\n    let options = this._options;\n    if(options.where && think.isString(options.where)){\n      options.where = {_string: options.where};\n    }\n    options.where = think.extend({}, options.where, where);\n    return this;\n  }\n  /**\n   * set field options\n   * @param  {String} field   []\n   * @param  {Boolean} reverse []\n   * @return {}         []\n   */\n  field(field, reverse = false){\n    if(!field){\n      return this;\n    }\n    if (think.isString(field)) {\n      if(field.indexOf(')') === -1){\n        field = field.split(/\\s*,\\s*/);\n      }\n    }\n    this._options.field = field;\n    this._options.fieldReverse = reverse;\n    return this;\n  }\n  /**\n   * set field reverse\n   * @param  {String} field [field list]\n   * @return {Object}       []\n   */\n  fieldReverse(field){\n    return this.field(field, true);\n  }\n  /**\n   * set table name\n   * @param  {String} table []\n   * @return {}       []\n   */\n  table(table, hasPrefix){\n    if (!table) {\n      return this;\n    }\n    table = table.trim();\n    //table is sql, `SELECT * FROM`\n    if (table.indexOf(' ') > -1) {\n      hasPrefix = true;\n    }\n    this._options.table = hasPrefix ? table : this.getTablePrefix() + table;\n    return this;\n  }\n  /**\n   * union options\n   * @param  {} union []\n   * @param  {} all   []\n   * @return {}       []\n   */\n  union(union, all = false){\n    if (!union) {\n      return this;\n    }\n    if (!this._options.union) {\n      this._options.union = [];\n    }\n    this._options.union.push({\n      union: union,\n      all: all\n    });\n    return this;\n  }\n  /**\n   * .join({\n   *   'xxx': {\n   *     join: 'left',\n   *     as: 'c',\n   *     on: ['id', 'cid']\n   *   }\n   * })\n   * @param  {[type]} join [description]\n   * @return {[type]}      [description]\n   */\n  join(join){\n    if (!join) {\n      return this;\n    }\n    if (!this._options.join) {\n      this._options.join = [];\n    }\n    if (think.isArray(join)) {\n      this._options.join = this._options.join.concat(join);\n    }else{\n      this._options.join.push(join);\n    }\n    return this;\n  }\n  /**\n   * set order options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  order(value){\n    this._options.order = value;\n    return this;\n  }\n  /**\n   * set table alias\n   * @param  {String} value []\n   * @return {}       []\n   */\n  alias(value){\n    this._options.alias = value;\n    return this;\n  }\n  /**\n   * set having options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  having(value){\n    this._options.having = value;\n    return this;\n  }\n  /**\n   * set group options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  group(value){\n    this._options.group = value;\n    return this;\n  }\n  /**\n   * set lock options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  lock(value){\n    this._options.lock = value;\n    return this;\n  }\n  /**\n   * set auto options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  auto(value){\n    this._options.auto = value;\n    return this;\n  }\n  /**\n   * set filter options\n   * @param  {String} value []\n   * @return {}       []\n   */\n  filter(value){\n    this._options.filter = value;\n    return this;\n  }\n  /**\n   * set distinct options\n   * @param  {String} data []\n   * @return {}      []\n   */\n  distinct(data){\n    this._options.distinct = data;\n    if (think.isString(data)) {\n      this._options.field = data;\n    }\n    return this;\n  }\n  /**\n   * set explain\n   * @param  {Boolean} explain []\n   * @return {}         []\n   */\n  explain(explain){\n    this._options.explain = explain;\n    return this;\n  }\n  /**\n   * options filter\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  optionsFilter(options){\n    return options;\n  }\n  /**\n   * data filter\n   * @param  {Object} data []\n   * @return {}      []\n   */\n  dataFilter(data){\n    return data;\n  }\n  /**\n   * before add\n   * @param  {Object} data []\n   * @return {}      []\n   */\n  beforeAdd(data, options, schema){\n    \n    //for addMany invoked\n    if(think.isArray(data)){\n      return data.map(item => {\n        return this.beforeAdd(item, options);\n      });\n    }\n\n    let ret = {};\n    let extRet = {};\n    schema = schema || this.schema;\n    //fields in schema\n    for(let field in schema){\n      let fieldSchema = schema[field];\n      let _default = fieldSchema.default;\n      //default value is setted\n      if(!think.isTrueEmpty(_default)){\n        ret[field] = {\n          value: data[field],\n          default: _default\n        };\n      }else{\n        if(this._isSubSchema(fieldSchema)){\n          extRet[field] = this.beforeAdd(data[field] || {}, options, fieldSchema);\n        }\n      }\n    }\n    for(let field in data){\n      if(!ret[field] && !extRet[field]){\n        ret[field] = {\n          value: data[field]\n        };\n      }\n    }\n    ret = Validator.values(ret);\n    if(!think.isEmpty(extRet)){\n      ret = think.extend(ret, extRet);\n    }\n    return ret;\n  }\n  /**\n   * check is sub schema\n    // meta: {\n    //   createAt: {\n    //     default: ()=>new Date()\n    //   },\n    //   updateAt: {\n    //     default: ()=>new Date()\n    //   }\n    // }\n   * @param  {Mixed}  schema []\n   * @return {Boolean}        []\n   */\n  _isSubSchema(schema){\n    if(!schema || !think.isObject(schema)){\n      return false;\n    }\n    let keys = Object.keys(schema);\n    return keys.length && keys.every(key => think.isObject(schema[key]));\n  }\n  /**\n   * after add\n   * @param  {} data []\n   * @return {}      []\n   */\n  afterAdd(data){\n    return data;\n  }\n  /**\n   * before delete\n   */\n  beforeDelete(options){\n    return options;\n  }\n  /**\n   * after delete\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  afterDelete(data){\n    return data;\n  }\n  /**\n   * before update\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  beforeUpdate(data, options, schema){\n    //check property readonlyFields\n    if(!think.isEmpty(this.readonlyFields)){\n      let ret = {};\n      this.readonlyFields.forEach(item => {\n        ret[item] = {readonly: true};\n      });\n      delete this.readonlyFields;\n      this.schema = think.extend(ret, this.schema);\n      think.log(`readonlyFields property is deprecated, use schema[field].readonly instead`, 'WARNING');\n    }\n\n    let ret = {};\n    let extRet = {};\n    schema = schema || this.schema;\n\n    for(let field in data){\n      let fieldSchema = schema[field];\n      if(!fieldSchema){\n        ret[field] = {value: data[field]};\n      }else{\n        if(this._isSubSchema(fieldSchema)){\n          let result = this.beforeUpdate(data[field] || {}, options, fieldSchema);\n          if(!think.isEmpty(result)){\n            extRet[field] = result;\n          }\n        }else if(!fieldSchema.readonly){\n          ret[field] = {value: data[field]};\n        }\n      }\n    }\n\n    for(let field in schema){\n      let fieldSchema = schema[field];\n      let _default = fieldSchema.default;\n      if(!think.isTrueEmpty(_default) && !fieldSchema.readonly && fieldSchema.update){\n        ret[field] = {\n          value: data[field],\n          default: _default\n        };\n      }else if(this._isSubSchema(fieldSchema)){\n        let result = this.beforeUpdate(data[field] || {}, options, fieldSchema);\n        if(!think.isEmpty(result)){\n          extRet[field] = result;\n        }\n      }\n    }\n    ret = Validator.values(ret);\n    if(!think.isEmpty(extRet)){\n      ret = think.extend(ret, extRet);\n    }\n    return ret;\n  }\n  /**\n   * after update\n   * @param  {} data    []\n   * @param  {} options []\n   * @return {}         []\n   */\n  afterUpdate(data){\n    return data;\n  }\n  /**\n   * before find\n   */\n  beforeFind(options){\n    return options;\n  }\n  /**\n   * after find\n   * @return {} []\n   */\n  afterFind(data){\n    return data;\n  }\n  /**\n   * before select\n   */\n  beforeSelect(options){\n    return options;\n  }\n  /**\n   * after select\n   * @param  {Mixed} result []\n   * @return {}        []\n   */\n  afterSelect(data){\n    return data;\n  }\n  /**\n   * set data\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n  data(data){\n    if (data === true) {\n      return this._data;\n    }\n    this._data = data;\n    return this;\n  }\n  /**\n   * set options\n   * @param  {Mixed} options []\n   * @return {}         []\n   */\n  options(options){\n    if (!options) {\n      return this._options;\n    }\n    this._options = options;\n    //page to limit\n    if(options.page){\n      this.page(options.page);\n    }\n    return this;\n  }\n  /**\n   * close db socket\n   * @return {} []\n   */\n  close(){\n    if (this._db) {\n      this._db.close();\n      this._db = null;\n    }\n  }\n}"]}