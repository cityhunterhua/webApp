{"version":3,"sources":["../../src/model/relation.js"],"names":[],"mappings":"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","file":"relation.js","sourcesContent":["'use strict';\n\n//model relation type\nthink.model.HAS_ONE = 1;\nthink.model.BELONG_TO = 2;\nthink.model.HAS_MANY = 3;\nthink.model.MANY_TO_MANY = 4;\n/**\n * relation model\n * @type {Class}\n */\nexport default class extends think.model.base {\n  /**\n   * init\n   * @param  {String} name   []\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(name = '', config = {}){\n    super.init(name, config);\n    /**\n     * @example\n     'profile': {\n        type: think.model.HAS_ONE, //relation type\n        model: 'profile', //model name\n        name: 'profile', //data name\n        key: 'id', \n        fKey: 'user_id', //forign key\n        field: 'id,name',\n        where: 'name=xx',\n        order: '',\n        limit: ''\n      }\n     */\n    if(this.relation === undefined){\n      this.relation = {};\n    }\n    this._relationName = true;\n  }\n  /**\n   * set relation\n   * @param {String} name []\n   */\n  setRelation(name, value){\n    //ignore undefined name\n    if(name === undefined){\n      return this;\n    }\n\n    //config relation data\n    if (think.isObject(name) || !think.isEmpty(value)) {\n      let obj = think.isObject(name) ? name : {[name]: value};\n      think.extend(this.relation, obj);\n      return this;\n    }\n\n    if(think.isBoolean(name)){\n      this._relationName = name;\n      return this;\n    }\n\n    //enable relation\n    if (think.isString(name)) {\n      name = name.split(/\\s*,\\s*/);\n    }\n\n    name = name || [];\n    //filter relation name\n    if(value === false){\n      let filterRelations = Object.keys(this.relation).filter(item => {\n        return name.indexOf(item) === -1;\n      });\n      name = filterRelations;\n    }\n\n    this._relationName = name;\n    return this;\n  }\n  /**\n   * after find\n   * @param  {Object} data []\n   * @return {Promise}      []\n   */\n  afterFind(data, options){\n    return this.getRelation(data, options);\n  }\n  /**\n   * after select\n   * @param  {Object} data []\n   * @return {}      []\n   */\n  afterSelect(data, options){\n    return this.getRelation(data, options);\n  }\n  /**\n   * get relation data\n   * @param  {}  data       []\n   * @param  Boolean isDataList \n   * @return {}\n   */\n  async getRelation(data, options = {}){\n    if (think.isEmpty(data) || think.isEmpty(this.relation) || think.isEmpty(this._relationName)) {\n      return data;\n    }\n    let pk = await this.getPk();\n    let promises = Object.keys(this.relation).map(key => {\n      //relation is disabled\n      if (this._relationName !== true && this._relationName.indexOf(key) === -1) {\n        return;\n      }\n      let item = this.relation[key];\n      if (!think.isObject(item)) {\n        item = {type: item};\n      }\n      //get relation model options\n      let opts = think.extend({\n        name: key,\n        type: think.model.HAS_ONE,\n        key: pk,\n        fKey: this.name + '_id',\n        relation: true\n      }, item);\n\n      //relation data is exist\n      let itemData = think.isArray(data) ? data[0] : data;\n      let relData = itemData[opts.name];\n      if(think.isArray(relData) || think.isObject(relData)){\n        return;\n      }\n\n      let modelOpts = think.extend({}, {\n        cache: options.cache\n      });\n      //remove cache key\n      if(modelOpts.cache && modelOpts.cache.key){\n        delete modelOpts.cache.key;\n      }\n\n      ['where', 'field', 'order', 'limit', 'page'].forEach(optItem => {\n        if(think.isFunction(item[optItem])){\n          modelOpts[optItem] = item[optItem](this);\n        }else{\n          modelOpts[optItem] = item[optItem];\n        }\n      });\n      //get relation model instance\n      let model = this.model(item.model || key).options(modelOpts);\n\n      //set relation to relate model\n      if(model.setRelation){\n        model.setRelation(opts.relation, false);\n      }\n\n      opts.model = model;\n      \n      switch(item.type){\n        case think.model.BELONG_TO:\n          opts = think.extend(opts, {\n            key: opts.model.getModelName() + '_id',\n            fKey: 'id' \n          }, item);\n          return this._getBelongsToRelation(data, opts, options);\n        case think.model.HAS_MANY:\n          return this._getHasManyRelation(data, opts, options);\n        case think.model.MANY_TO_MANY:\n          return this._getManyToManyRelation(data, opts, options);\n        default:\n          return this._getHasOneRelation(data, opts, options);\n      }\n    });\n    await Promise.all(promises);\n    return data;\n  }\n  /**\n   * has one\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n  async _getHasOneRelation(data, mapOpts/*, options*/){\n    let where = this.parseRelationWhere(data, mapOpts);\n    // if (where === false) {\n    //   return {};\n    // }\n    let mapData = await mapOpts.model.where(where).select();\n    return this.parseRelationData(data, mapData, mapOpts);\n  }\n  /**\n   * belongs to\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n  async _getBelongsToRelation(data, mapOpts/*, options*/){\n    let where = this.parseRelationWhere(data, mapOpts);\n    let mapData = await mapOpts.model.where(where).select();\n    return this.parseRelationData(data, mapData, mapOpts);\n  }\n  /**\n   * has many\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n  async _getHasManyRelation(data, mapOpts/*, options*/){\n    let where = this.parseRelationWhere(data, mapOpts);\n    // if (where === false) {\n    //   return [];\n    // }\n    let mapData = await mapOpts.model.where(where).select();\n    return this.parseRelationData(data, mapData, mapOpts, true);\n  }\n  /**\n   * many to many\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  async _getManyToManyRelation(data, mapOpts, options){\n    let where = this.parseRelationWhere(data, mapOpts);\n    let sql = 'SELECT %s, a.%s FROM %s as a, %s as b %s AND a.%s=b.%s %s';\n    let field = this.db().parseField(mapOpts.field).split(',').map(item => `b.${item}`).join(',');\n    let pk = await mapOpts.model.getPk();\n\n    let table = mapOpts.rModel;\n    if(table){\n      if(this.tablePrefix && table.indexOf(this.tablePrefix) !== 0){\n        table = this.tablePrefix + table;\n      }\n    }else{\n     table = this.getRelationTableName(mapOpts.model);\n    }\n\n    let table1 = mapOpts.model.getTableName();\n    let where1 = this.db().parseWhere(where);\n    let rkey = mapOpts.rfKey || (mapOpts.model.getModelName() + '_id');\n    let where2 = mapOpts.where ? (' AND ' + this.db().parseWhere(mapOpts.where).trim().slice(6)) : '';\n    sql = this.parseSql(sql, field, mapOpts.fKey, table, table1, where1, rkey, pk, where2);\n    let mapData = await this.db().select(sql, options.cache);\n    return this.parseRelationData(data, mapData, mapOpts, true);\n  }\n  /**\n   * get relation table name\n   * @param  {Object} model []\n   * @return {}       []\n   */\n  getRelationTableName(model){\n    let table = [\n      this.tablePrefix,\n      this.tableName || this.name,\n      '_',\n      model.getModelName()\n    ].join('');\n    return table.toLowerCase();\n  }\n  /**\n   * get relation model\n   * @param  {} model []\n   * @return {}       []\n   */\n  getRelationModel(model){\n    let name = (this.tableName || this.name) + '_' + model.getModelName();\n    return this.model(name);\n  }\n  /**\n   * parese relation where\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {}         []\n   */\n  parseRelationWhere(data, mapOpts){\n    if (think.isArray(data)) {\n      let keys = {};\n      data.forEach(item => {\n        keys[item[mapOpts.key]] = 1;\n      });\n      let value = Object.keys(keys);\n      return {\n        [mapOpts.fKey]: ['IN', value]\n      };\n    }\n    return {\n      [mapOpts.fKey]: data[mapOpts.key]\n    };\n  }\n  /**\n   * parse relation data\n   * @param  {Object}  data     []\n   * @param  {}  mapData  []\n   * @param  {}  mapOpts  []\n   * @param  {Boolean} isArrMap []\n   * @return {}           []\n   */\n  parseRelationData(data, mapData, mapOpts, isArrMap){\n    if (think.isArray(data)) {\n      data.forEach((item, i) => {\n        data[i][mapOpts.name] = isArrMap ? [] : {};\n      });\n      mapData.forEach(mapItem => {\n        data.forEach((item, i) => {\n          if (mapItem[mapOpts.fKey] !== item[mapOpts.key]) {\n            return;\n          }\n          if (isArrMap) {\n            data[i][mapOpts.name].push(mapItem);\n          }else{\n            data[i][mapOpts.name] = mapItem;\n          }\n        });\n      });\n    }else{\n      data[mapOpts.name] = isArrMap ? mapData : (mapData[0] || {});\n    }\n    return data;\n  }\n  /**\n   * after add\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  afterAdd(data, options){\n    return this.postRelation('ADD', data, options);\n  }\n  /**\n   * after delete\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  afterDelete(options = {}){\n    return this.postRelation('DELETE', options.where, options);\n  }\n  /**\n   * after update\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  afterUpdate(data, options){\n    return this.postRelation('UPDATE', data, options);\n  }\n  /**\n   * post relation\n   * @param  {} postType      []\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  async postRelation(postType, data/*, parsedOptions*/){\n    if (think.isEmpty(data) || think.isEmpty(this.relation) || think.isEmpty(this._relationName)) {\n      return data;\n    }\n    let pk = await this.getPk();\n    let promises = Object.keys(this.relation).map(key => {\n      let item = this.relation[key];\n      if (!think.isObject(item)) {\n        item = {type: item};\n      }\n      let opts = think.extend({\n        type: think.model.HAS_ONE,\n        postType: postType,\n        name: key,\n        key: pk,\n        fKey: this.name + '_id'\n      }, item);\n      if (this._relationName !== true && this._relationName.indexOf(opts.name) === -1) {\n        return;\n      }\n      if(postType === 'DELETE'){\n        opts.data = data;\n      }else{\n        let mapData = data[opts.name];\n        if (think.isEmpty(mapData)) {\n          return;\n        }\n        opts.data = mapData;\n      }\n      opts.model = this.model(item.model || key).where(item.where);\n      switch(item.type){\n        case think.model.BELONG_TO:\n          return this._postBelongsToRelation(data, opts);\n        case think.model.HAS_MANY:\n          return this._postHasManyRelation(data, opts);\n        case think.model.MANY_TO_MANY:\n          return this._postManyToManyRelation(data, opts);\n        default:\n          return this._postHasOneRelation(data, opts);\n      }\n    });\n    await Promise.all(promises);\n    return data;\n  }\n  /**\n   * has one post\n   * @param  {} data          []\n   * @param  {} value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  _postHasOneRelation(data, mapOpts){\n    let where;\n    switch(mapOpts.postType){\n      case 'ADD':\n        mapOpts.data[mapOpts.fKey] = data[mapOpts.key];\n        return mapOpts.model.add(mapOpts.data);\n      case 'DELETE':\n        where = {[mapOpts.fKey]: data[mapOpts.key]};\n        return mapOpts.model.where(where).delete();\n      case 'UPDATE':\n        where = {[mapOpts.fKey]: data[mapOpts.key]};\n        return mapOpts.model.where(where).update(mapOpts.data);\n    }\n  }\n  /**\n   * belongs to\n   * @param  {} data []\n   * @return {}      []\n   */\n  _postBelongsToRelation(data){\n    return data;\n  }\n  /**\n   * has many\n   * @param  {} data          []\n   * @param  {} value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  _postHasManyRelation(data, mapOpts){\n    let mapData = mapOpts.data;\n    let model = mapOpts.model;\n    if (!think.isArray(mapData)) {\n      mapData = [mapData];\n    }\n    switch(mapOpts.postType){\n      case 'ADD':\n        mapData = mapData.map(item => {\n          item[mapOpts.fKey] = data[mapOpts.key];\n          return item;\n        });\n        return model.addMany(mapData);\n      case 'UPDATE':\n        return model.getSchema().then(() => {\n          let pk = model.getPk();\n          let promises = mapData.map(item => {\n            if (item[pk]) {\n              return model.update(item);\n            }else{\n              item[mapOpts.fKey] = data[mapOpts.key];\n              //ignore error when add data\n              return model.add(item).catch(() => {});\n            }\n          });\n          return Promise.all(promises);\n        });\n      case 'DELETE':\n        let where = {[mapOpts.fKey]: data[mapOpts.key]};\n        return model.where(where).delete();\n    }\n  }\n  /**\n   * many to many post\n   * @param  Object data          []\n   * @param  object value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  async _postManyToManyRelation(data, mapOpts){\n    let model = mapOpts.model;\n    await model.getSchema();\n    let rfKey = mapOpts.rfKey || (model.getModelName().toLowerCase() + '_id');\n    let relationModel = this.getRelationModel(model);\n\n    let type = mapOpts.postType;\n    if (type === 'DELETE' || type === 'UPDATE') {\n      let where = {[mapOpts.fKey]: data[mapOpts.key]};\n      await relationModel.where(where).delete(); \n    }\n\n    if (type === 'ADD' || type === 'UPDATE') {\n      let mapData = mapOpts.data;\n      if (!think.isArray(mapData)) {\n        mapData = think.isString(mapData) ? mapData.split(',') : [mapData];\n      }\n      let firstItem = mapData[0];\n      if (think.isNumberString(firstItem) || (think.isObject(firstItem) && (rfKey in firstItem))) {\n        let postData = mapData.map(item => {\n          return {[mapOpts.fKey]: data[mapOpts.key], [rfKey]: item[rfKey] || item};\n        });\n        await relationModel.addMany(postData);\n      }else{ \n        let unqiueField = await model.getUniqueField();\n        if (!unqiueField) {\n          return think.reject(new Error('table `' + model.getTableName() + '` has no unqiue field'));\n        }\n        let ids = await this._getRalationAddIds(mapData, model, unqiueField);\n        let postData = ids.map(id => {\n          return {[mapOpts.fKey]: data[mapOpts.key], [rfKey]: id};\n        });\n        await relationModel.addMany(postData);\n      }\n    }\n  }\n  /**\n   * insert data, add ids\n   * @param  {Array} dataList    []\n   * @param  {Object} model       []\n   * @param  {String} unqiueField []\n   * @return {Promise}             []\n   */\n  async _getRalationAddIds(dataList, model, unqiueField){\n    let ids = [];\n    let pk = await model.getPk();\n    let promises = dataList.map(item => {\n      if (!think.isObject(item)) {\n        item = {[unqiueField]: item};\n      }\n      let value = item[unqiueField];\n      let where = {[unqiueField]: value};\n      return model.where(where).field(pk).find().then(data => {\n        if (think.isEmpty(data)) {\n          return model.add(item).then(insertId => {\n            ids.push(insertId);\n          });\n        }else{\n          ids.push(data[pk]);\n        }\n      });\n    });\n    await Promise.all(promises);\n    return ids;\n  }\n}"]}