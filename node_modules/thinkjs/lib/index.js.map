{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\n\n//rewrite promise, bluebird is more faster\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\nglobal.Promise = require('bluebird');\n\nimport AutoReload from './util/auto_reload.js';\nimport WatchCompile from './util/watch_compile.js';\nimport Checker from './util/checker.js';\n\nimport './core/think.js';\n\nexport default class {\n  /**\n   * init\n   * @param  {Object} options [project options]\n   * @return {}         []\n   */\n  constructor(options = {}){\n    //extend options to think\n    think.extend(think, this.getPath(), options);\n\n    //normalize path\n    think.APP_PATH = path.normalize(think.APP_PATH);\n    think.ROOT_PATH = path.normalize(think.ROOT_PATH);\n    think.RESOURCE_PATH = path.normalize(think.RESOURCE_PATH);\n    think.RUNTIME_PATH = path.normalize(think.RUNTIME_PATH);\n\n    //parse data from process arguments\n    let i = 2;\n    let argv = process.argv[i];\n    //get app mode from argv\n    if (argv === 'production' || argv === 'development' || argv === 'testing') {\n      think.env = argv;\n      i++;\n    }\n    argv = process.argv[i];\n    //get port or cli url from argv\n    if (argv) {\n      if (/^\\d+$/.test(argv)) {\n        think.port = argv;\n      }else{\n        think.cli = argv;\n      }\n    }\n    //get app mode\n    think.mode = this.getMode();\n  }\n  /**\n   * get app mode\n   * @return {Number} [app mode]\n   */\n  getMode(){\n    let filepath = `${think.APP_PATH}/${think.dirname.controller}`;\n    if (think.isDir(filepath)) {\n      return think.mode_normal;\n    }\n    return think.mode_module;\n  }\n  /**\n   * get app path\n   * @return {Object} []\n   */\n  getPath(){\n    let filepath = process.argv[1];\n    let RESOURCE_PATH = path.dirname(filepath);\n    let ROOT_PATH = path.dirname(RESOURCE_PATH);\n    let APP_PATH = `${ROOT_PATH}${think.sep}app`;\n    let RUNTIME_PATH = ROOT_PATH + think.sep + think.dirname.runtime;\n    return {\n      APP_PATH,\n      RESOURCE_PATH,\n      ROOT_PATH,\n      RUNTIME_PATH\n    };\n  }\n  /**\n   * check node env\n   * @return {Boolean} []\n   */\n  checkEnv(){\n    this.checkNodeVersion();\n  }\n  \n  /**\n   * get app module list\n   * @return {} []\n   */\n  getModule(){\n    //only have default module in mini mode\n    if (think.mode === think.mode_normal) {\n      think.module = [think.config('default_module')];\n      return think.module;\n    }\n    let modulePath = think.APP_PATH;\n    if(!think.isDir(modulePath)){\n      return [];\n    }\n    let modules = fs.readdirSync(modulePath);\n    let denyModuleList = think.config('deny_module_list') || [];\n    if (denyModuleList.length > 0) {\n      modules = modules.filter(module => {\n        if(module[0] === '.'){\n          return;\n        }\n        if (denyModuleList.indexOf(module) === -1) {\n          return module;\n        }\n      });\n    }\n    think.module = modules;\n    return modules;\n  }\n  /**\n   * load alias\n   * @return {} []\n   */\n  loadAlias(){\n    let aliasPath = `${think.THINK_LIB_PATH}/config/sys/alias.js`;\n    thinkData.alias = think.safeRequire(aliasPath);\n  }\n  /**\n   * load config\n   * @return {} []\n   */\n  loadConfig(){\n    think.getModuleConfig();\n    //load modules config\n    this.getModule().forEach(module => {\n      think.getModuleConfig(module);\n    });\n  }\n  \n  /**\n   * load route\n   * @return {} []\n   */\n  loadRoute(){\n    think.route();\n  }\n  /**\n   * load adapter\n   * @return {} []\n   */\n  loadAdapter(){\n    think.adapter.load();\n  }\n  /**\n   * load middleware\n   * @return {} []\n   */\n  loadMiddleware(){\n    let paths = [\n      `${think.THINK_LIB_PATH}${think.sep}middleware`,\n      `${think.getPath(undefined, think.dirname.middleware)}`\n    ];\n    think.alias('middleware', paths);\n    //middleware base class\n    think.middleware.base = think.require('middleware_base');\n  }\n  /**\n   * load hook\n   * @return {} []\n   */\n  loadHook(){\n    let hookPath = `${think.THINK_LIB_PATH}/config/hook.js`;\n    thinkData.hook = think.extend({}, think.safeRequire(hookPath));\n\n    let file = `${think.getPath(undefined, think.dirname.config)}/hook.js`;\n    let data = think.extend({}, think.safeRequire(file));\n    for(let key in data){\n      think.hook.set(key, data[key]); \n    }\n  }\n  /**\n   * load controller, model, logic, service files\n   * @return {} []\n   */\n  loadMVC(){\n    let types = {\n      model: ['base', 'relation', 'mongo', 'adv'],\n      controller: ['base', 'rest'],\n      logic: ['base'],\n      service: ['base']\n    };\n    for(let itemType in types){\n      think.alias(itemType, `${think.THINK_LIB_PATH}${think.sep}${itemType}`);\n      types[itemType].forEach(item => {\n        think[itemType][item] = think.require(`${itemType}_${item}`);\n      });\n      think.module.forEach(module => {\n        let moduleType = `${module}/${itemType}`; //can not use think.sep\n        let filepath = think.getPath(module, think.dirname[itemType]);\n        think.alias(moduleType, filepath, true);\n      });\n    }\n  }\n  /**\n   * load sub controller\n   * @return {} []\n   */\n  loadSubController(){\n    think.module.forEach(module => {\n      let filepath = think.getPath(module, think.dirname.controller);\n      let subControllers = think.getFiles(filepath).filter(item => {\n        if(item.indexOf(think.sep) === -1){\n          return;\n        }\n        if(path.extname(item) !== '.js'){\n          return;\n        }\n        return true;\n      }).map(item => {\n        return item.slice(0, -3).replace(/\\\\/g, '/');\n      }).sort((a, b) => {\n        let al = a.split('/').length;\n        let bl = b.split('/').length;\n        if(al === bl){\n          return a < b ? 1 : -1;\n        }\n        return al < bl ? 1 : -1;\n      });\n      if(subControllers.length){\n        thinkData.subController[module] = subControllers;\n      }\n    });\n  }\n  /**\n   * load bootstrap\n   * @return {} []\n   */\n  loadBootstrap(){\n    let paths = [\n      `${think.THINK_LIB_PATH}${think.sep}bootstrap`,\n      think.getPath(think.dirname.common, think.dirname.bootstrap)\n    ];\n    paths.forEach(item => {\n      if (!think.isDir(item)) {\n        return;\n      }\n      let files = fs.readdirSync(item);\n\n      //must reload all bootstrap files.\n      if (think.config('auto_reload')) {\n        AutoReload.rewriteSysModuleLoad();\n        var instance = new AutoReload(item, ()=>{});\n        instance.clearFilesCache(files.map(file => item + think.sep + file));\n      }\n\n      files.forEach(file => {\n        let extname = path.extname(file);\n        if(extname !== '.js'){\n          return;\n        }\n        think.safeRequire(`${item}${think.sep}${file}`);\n      });\n    });\n  }\n  /**\n   * load template file\n   * add template files to cache\n   * @return {} []\n   */\n  loadTemplate(){\n    let data = {};\n\n    let add = filepath => {\n      if (!think.isDir(filepath)) {\n        return;\n      }\n      let files = think.getFiles(filepath, true);\n      files.forEach(file => {\n        let key = `${filepath}${think.sep}${file}`;\n        data[key] = true;\n      });\n    };\n    let {root_path} = think.config('view');\n    if(root_path){\n      add(path.normalize(root_path));\n    }else{\n      think.module.forEach(module => {\n        add(think.getPath(module, think.dirname.view));\n      });\n    }\n    thinkData.template = data;\n  }\n  /**\n   * load system error message\n   * @return {} []\n   */\n  loadError(){\n    thinkData.error = think.safeRequire(think.THINK_LIB_PATH + `/config/sys/error.js`);\n  }\n  /**\n   * clear all cache for reload\n   * @return {void} []\n   */\n  clearData(){\n    thinkData.alias = {};\n    thinkData.export = {};\n    thinkData.config = {};\n    thinkData.hook = {};\n    thinkData.template = {};\n    thinkData.middleware = {};\n    thinkData.subController = {};\n    thinkData.route = null;\n  }\n  /**\n   * load all config or modules\n   * @return {} []\n   */\n  load(){\n    \n    this.loadConfig();\n    this.loadRoute();\n    this.loadAlias();\n    this.loadAdapter();\n    this.loadMiddleware();\n    this.loadMVC();\n    this.loadSubController();\n    this.loadHook();\n    this.loadTemplate();\n    this.loadError();\n    this.loadBootstrap();\n\n    Checker.checkModuleConfig();\n\n    think.toFastProperties(thinkData.alias);\n    think.toFastProperties(thinkData.config);\n    think.toFastProperties(thinkData.hook);\n    think.toFastProperties(thinkData.middleware);\n    think.toFastProperties(thinkData.error);\n    think.toFastProperties(thinkData.template);\n    think.toFastProperties(thinkData.subController);\n\n    //console.log(thinkData.alias)\n    //console.log(eval('%HasFastProperties(thinkData.template)'))\n  }\n  /**\n   * capture error\n   * @return {} []\n   */\n  captureError(){\n    process.on('uncaughtException', err => {\n      let msg = err.message;\n      err = think.error(err, 'port:' + (think.port || think.config('port')));\n      think.log(err);\n      if(msg.indexOf(' EADDRINUSE ') > -1){\n        process.exit();\n      }\n    });\n    process.on('unhandledRejection', err => {\n      if(think.config('log_unhandled_promise')){\n        think.log(err);\n      }\n    });\n  }\n  /**\n   * start\n   * @return {} []\n   */\n  start(){\n    Checker.checkNodeVersion();\n    Checker.checkFileName();\n    Checker.checkDependencies();\n    \n    this.load();\n    this.captureError();\n    if (think.config('auto_reload')) {\n      this.autoReload();\n    }\n  }\n  /**\n   * auto reload user modified files\n   * @return {} []\n   */\n  autoReload(){\n    //it auto reload by watch compile\n    if(this.compileCallback){\n      return;\n    }\n    let instance = this.getReloadInstance();\n    instance.run();\n  }\n  /**\n   * get auto reload class instance\n   * @param  {String} srcPath []\n   * @return {Object}         []\n   */\n  getReloadInstance(srcPath){\n    srcPath = srcPath || think.APP_PATH;\n    AutoReload.rewriteSysModuleLoad();\n    let instance = new AutoReload(srcPath, () => {\n      this.clearData();\n      this.load();\n    });\n    return instance;\n  }\n  /**\n   * use babel compile code\n   * @return {} []\n   */\n  compile(srcPath, outPath, options = {}){\n    if(think.isObject(srcPath)){\n      options = srcPath;\n      srcPath = '';\n    }else if(srcPath === true){\n      options = {log: true};\n      srcPath = '';\n    }\n    srcPath = srcPath || `${think.ROOT_PATH}${think.sep}src`;\n    outPath = outPath || think.APP_PATH;\n\n    if(!think.isDir(srcPath)){\n      return;\n    }\n    let reloadInstance = this.getReloadInstance(outPath);\n    let _getMode = false;\n    this.compileCallback = changedFiles => {\n      if(!_getMode){\n        _getMode = true;\n        //get app mode\n        think.mode = this.getMode();\n      }\n\n      reloadInstance.clearFilesCache(changedFiles);\n    };\n\n    let instance = new WatchCompile(srcPath, outPath, options, this.compileCallback);\n    instance.run();\n\n    think.autoCompile = true;\n    \n    this.sourceMapSupport(true);\n  }\n  /**\n   * source map support\n   * @param  {} flag []\n   * @return {}      []\n   */\n  async sourceMapSupport(flag){\n    let support = await think.npm('source-map-support');\n    let options = {\n      environment: 'node',\n      emptyCacheBetweenOperations: flag\n    };\n    return support.install(options);\n  }\n  /**\n   * pre require\n   * @return {} []\n   */\n  preload(){\n    let startTime = Date.now();\n    for(let name in thinkData.alias){\n      think.require(thinkData.alias[name]);\n    }\n    think.log('preload packages finished', 'PRELOAD', startTime);\n  }\n  /**\n   * run\n   * @return {} []\n   */\n  run(preload){\n    this.start();\n    if(preload){\n      this.preload();\n    }\n    return think.require('app').run();\n  }\n  /**\n   * load, convenient for plugins\n   * @return {} []\n   */\n  static load(options){\n    let instance = new this(options);\n    instance.load();\n  }\n}\n\nmodule.exports = exports.default;"]}